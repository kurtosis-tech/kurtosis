// Code generated by "enumer -trimprefix LogLineOperator -type=logLineOperator -transform=lower"; DO NOT EDIT.

package kurtosis_context

import (
	"fmt"
	"strings"
)

const _logLineOperatorName = "loglineoperator_doescontaintextloglineoperator_doesnotcontaintextloglineoperator_doescontainmatchregexloglineoperator_doesnotcontainmatchregex"

var _logLineOperatorIndex = [...]uint8{0, 31, 65, 102, 142}

const _logLineOperatorLowerName = "loglineoperator_doescontaintextloglineoperator_doesnotcontaintextloglineoperator_doescontainmatchregexloglineoperator_doesnotcontainmatchregex"

func (i logLineOperator) String() string {
	if i >= logLineOperator(len(_logLineOperatorIndex)-1) {
		return fmt.Sprintf("logLineOperator(%d)", i)
	}
	return _logLineOperatorName[_logLineOperatorIndex[i]:_logLineOperatorIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _logLineOperatorNoOp() {
	var x [1]struct{}
	_ = x[logLineOperator_DoesContainText-(0)]
	_ = x[logLineOperator_DoesNotContainText-(1)]
	_ = x[logLineOperator_DoesContainMatchRegex-(2)]
	_ = x[logLineOperator_DoesNotContainMatchRegex-(3)]
}

var _logLineOperatorValues = []logLineOperator{logLineOperator_DoesContainText, logLineOperator_DoesNotContainText, logLineOperator_DoesContainMatchRegex, logLineOperator_DoesNotContainMatchRegex}

var _logLineOperatorNameToValueMap = map[string]logLineOperator{
	_logLineOperatorName[0:31]:         logLineOperator_DoesContainText,
	_logLineOperatorLowerName[0:31]:    logLineOperator_DoesContainText,
	_logLineOperatorName[31:65]:        logLineOperator_DoesNotContainText,
	_logLineOperatorLowerName[31:65]:   logLineOperator_DoesNotContainText,
	_logLineOperatorName[65:102]:       logLineOperator_DoesContainMatchRegex,
	_logLineOperatorLowerName[65:102]:  logLineOperator_DoesContainMatchRegex,
	_logLineOperatorName[102:142]:      logLineOperator_DoesNotContainMatchRegex,
	_logLineOperatorLowerName[102:142]: logLineOperator_DoesNotContainMatchRegex,
}

var _logLineOperatorNames = []string{
	_logLineOperatorName[0:31],
	_logLineOperatorName[31:65],
	_logLineOperatorName[65:102],
	_logLineOperatorName[102:142],
}

// logLineOperatorString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func logLineOperatorString(s string) (logLineOperator, error) {
	if val, ok := _logLineOperatorNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _logLineOperatorNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to logLineOperator values", s)
}

// logLineOperatorValues returns all values of the enum
func logLineOperatorValues() []logLineOperator {
	return _logLineOperatorValues
}

// logLineOperatorStrings returns a slice of all String values of the enum
func logLineOperatorStrings() []string {
	strs := make([]string, len(_logLineOperatorNames))
	copy(strs, _logLineOperatorNames)
	return strs
}

// IsAlogLineOperator returns "true" if the value is listed in the enum definition. "false" otherwise
func (i logLineOperator) IsAlogLineOperator() bool {
	for _, v := range _logLineOperatorValues {
		if i == v {
			return true
		}
	}
	return false
}
