// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: engine_service.proto

package kurtosis_engine_rpc_api_bindings

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ==============================================================================================
//                                            Get Enclaves
// ==============================================================================================
// Status of the containers in the enclave
// NOTE: We have to prefix the enum values with the enum name due to the way Protobuf enum valuee uniqueness works
type EnclaveContainersStatus int32

const (
	// The enclave has been created, but there are no containers inside it
	EnclaveContainersStatus_EnclaveContainersStatus_EMPTY EnclaveContainersStatus = 0
	// One or more containers are running in the enclave (which may or may not include the API container, depending on if the user was manually stopping/removing containers)
	EnclaveContainersStatus_EnclaveContainersStatus_RUNNING EnclaveContainersStatus = 1
	// There are >= 1 container in the enclave, but they're all stopped
	EnclaveContainersStatus_EnclaveContainersStatus_STOPPED EnclaveContainersStatus = 2
)

// Enum value maps for EnclaveContainersStatus.
var (
	EnclaveContainersStatus_name = map[int32]string{
		0: "EnclaveContainersStatus_EMPTY",
		1: "EnclaveContainersStatus_RUNNING",
		2: "EnclaveContainersStatus_STOPPED",
	}
	EnclaveContainersStatus_value = map[string]int32{
		"EnclaveContainersStatus_EMPTY":   0,
		"EnclaveContainersStatus_RUNNING": 1,
		"EnclaveContainersStatus_STOPPED": 2,
	}
)

func (x EnclaveContainersStatus) Enum() *EnclaveContainersStatus {
	p := new(EnclaveContainersStatus)
	*p = x
	return p
}

func (x EnclaveContainersStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnclaveContainersStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_engine_service_proto_enumTypes[0].Descriptor()
}

func (EnclaveContainersStatus) Type() protoreflect.EnumType {
	return &file_engine_service_proto_enumTypes[0]
}

func (x EnclaveContainersStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnclaveContainersStatus.Descriptor instead.
func (EnclaveContainersStatus) EnumDescriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{0}
}

// NOTE: We have to prefix the enum values with the enum name due to the way Protobuf enum value uniqueness works
type EnclaveAPIContainerStatus int32

const (
	// No API container exists in the enclave
	// This is the only valid value when the enclave containers status is "EMPTY"
	EnclaveAPIContainerStatus_EnclaveAPIContainerStatus_NONEXISTENT EnclaveAPIContainerStatus = 0
	// An API container exists and is running
	// NOTE: this does NOT say that the server inside the API container is available, because checking if it's available requires making a call to the API container
	//  If we have a lot of API containers, we'd be making tons of calls
	EnclaveAPIContainerStatus_EnclaveAPIContainerStatus_RUNNING EnclaveAPIContainerStatus = 1
	// An API container exists, but isn't running
	EnclaveAPIContainerStatus_EnclaveAPIContainerStatus_STOPPED EnclaveAPIContainerStatus = 2
)

// Enum value maps for EnclaveAPIContainerStatus.
var (
	EnclaveAPIContainerStatus_name = map[int32]string{
		0: "EnclaveAPIContainerStatus_NONEXISTENT",
		1: "EnclaveAPIContainerStatus_RUNNING",
		2: "EnclaveAPIContainerStatus_STOPPED",
	}
	EnclaveAPIContainerStatus_value = map[string]int32{
		"EnclaveAPIContainerStatus_NONEXISTENT": 0,
		"EnclaveAPIContainerStatus_RUNNING":     1,
		"EnclaveAPIContainerStatus_STOPPED":     2,
	}
)

func (x EnclaveAPIContainerStatus) Enum() *EnclaveAPIContainerStatus {
	p := new(EnclaveAPIContainerStatus)
	*p = x
	return p
}

func (x EnclaveAPIContainerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnclaveAPIContainerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_engine_service_proto_enumTypes[1].Descriptor()
}

func (EnclaveAPIContainerStatus) Type() protoreflect.EnumType {
	return &file_engine_service_proto_enumTypes[1]
}

func (x EnclaveAPIContainerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnclaveAPIContainerStatus.Descriptor instead.
func (EnclaveAPIContainerStatus) EnumDescriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{1}
}

//The filter operator which can be text or regex type
// NOTE: We have to prefix the enum values with the enum name due to the way Protobuf enum value uniqueness works
type LogLineOperator int32

const (
	LogLineOperator_LogLineOperator_DOES_CONTAIN_TEXT            LogLineOperator = 0
	LogLineOperator_LogLineOperator_DOES_NOT_CONTAIN_TEXT        LogLineOperator = 1
	LogLineOperator_LogLineOperator_DOES_CONTAIN_MATCH_REGEX     LogLineOperator = 2
	LogLineOperator_LogLineOperator_DOES_NOT_CONTAIN_MATCH_REGEX LogLineOperator = 3
)

// Enum value maps for LogLineOperator.
var (
	LogLineOperator_name = map[int32]string{
		0: "LogLineOperator_DOES_CONTAIN_TEXT",
		1: "LogLineOperator_DOES_NOT_CONTAIN_TEXT",
		2: "LogLineOperator_DOES_CONTAIN_MATCH_REGEX",
		3: "LogLineOperator_DOES_NOT_CONTAIN_MATCH_REGEX",
	}
	LogLineOperator_value = map[string]int32{
		"LogLineOperator_DOES_CONTAIN_TEXT":            0,
		"LogLineOperator_DOES_NOT_CONTAIN_TEXT":        1,
		"LogLineOperator_DOES_CONTAIN_MATCH_REGEX":     2,
		"LogLineOperator_DOES_NOT_CONTAIN_MATCH_REGEX": 3,
	}
)

func (x LogLineOperator) Enum() *LogLineOperator {
	p := new(LogLineOperator)
	*p = x
	return p
}

func (x LogLineOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogLineOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_engine_service_proto_enumTypes[2].Descriptor()
}

func (LogLineOperator) Type() protoreflect.EnumType {
	return &file_engine_service_proto_enumTypes[2]
}

func (x LogLineOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogLineOperator.Descriptor instead.
func (LogLineOperator) EnumDescriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{2}
}

// ==============================================================================================
//                                        Get Engine Info
// ==============================================================================================
type GetEngineInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of the engine server
	EngineVersion string `protobuf:"bytes,1,opt,name=engine_version,json=engineVersion,proto3" json:"engine_version,omitempty"`
}

func (x *GetEngineInfoResponse) Reset() {
	*x = GetEngineInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEngineInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEngineInfoResponse) ProtoMessage() {}

func (x *GetEngineInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_engine_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEngineInfoResponse.ProtoReflect.Descriptor instead.
func (*GetEngineInfoResponse) Descriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetEngineInfoResponse) GetEngineVersion() string {
	if x != nil {
		return x.EngineVersion
	}
	return ""
}

// ==============================================================================================
//                                        Create Enclave
// ==============================================================================================
type CreateEnclaveArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the new Kurtosis Enclave
	EnclaveName string `protobuf:"bytes,1,opt,name=enclave_name,json=enclaveName,proto3" json:"enclave_name,omitempty"`
	// The image tag of the API container that should be used inside the enclave
	// If blank, will use the default version that the engine server uses
	ApiContainerVersionTag string `protobuf:"bytes,2,opt,name=api_container_version_tag,json=apiContainerVersionTag,proto3" json:"api_container_version_tag,omitempty"`
	// The API container log level
	ApiContainerLogLevel string `protobuf:"bytes,3,opt,name=api_container_log_level,json=apiContainerLogLevel,proto3" json:"api_container_log_level,omitempty"`
	// Whether network partitioning will be enabled or not on the new Kurtosis Enclave
	IsPartitioningEnabled bool `protobuf:"varint,4,opt,name=is_partitioning_enabled,json=isPartitioningEnabled,proto3" json:"is_partitioning_enabled,omitempty"`
}

func (x *CreateEnclaveArgs) Reset() {
	*x = CreateEnclaveArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEnclaveArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEnclaveArgs) ProtoMessage() {}

func (x *CreateEnclaveArgs) ProtoReflect() protoreflect.Message {
	mi := &file_engine_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEnclaveArgs.ProtoReflect.Descriptor instead.
func (*CreateEnclaveArgs) Descriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateEnclaveArgs) GetEnclaveName() string {
	if x != nil {
		return x.EnclaveName
	}
	return ""
}

func (x *CreateEnclaveArgs) GetApiContainerVersionTag() string {
	if x != nil {
		return x.ApiContainerVersionTag
	}
	return ""
}

func (x *CreateEnclaveArgs) GetApiContainerLogLevel() string {
	if x != nil {
		return x.ApiContainerLogLevel
	}
	return ""
}

func (x *CreateEnclaveArgs) GetIsPartitioningEnabled() bool {
	if x != nil {
		return x.IsPartitioningEnabled
	}
	return false
}

type CreateEnclaveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//All the enclave information inside this object
	EnclaveInfo *EnclaveInfo `protobuf:"bytes,1,opt,name=enclave_info,json=enclaveInfo,proto3" json:"enclave_info,omitempty"`
}

func (x *CreateEnclaveResponse) Reset() {
	*x = CreateEnclaveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEnclaveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEnclaveResponse) ProtoMessage() {}

func (x *CreateEnclaveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_engine_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEnclaveResponse.ProtoReflect.Descriptor instead.
func (*CreateEnclaveResponse) Descriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{2}
}

func (x *CreateEnclaveResponse) GetEnclaveInfo() *EnclaveInfo {
	if x != nil {
		return x.EnclaveInfo
	}
	return nil
}

type EnclaveAPIContainerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//The container engine ID of the API container
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	// The IP inside the enclave network of the API container (i.e. how services inside the network can reach the API container)
	IpInsideEnclave string `protobuf:"bytes,2,opt,name=ip_inside_enclave,json=ipInsideEnclave,proto3" json:"ip_inside_enclave,omitempty"`
	// The grpc port inside the enclave network that the API container is listening on
	GrpcPortInsideEnclave uint32 `protobuf:"varint,3,opt,name=grpc_port_inside_enclave,json=grpcPortInsideEnclave,proto3" json:"grpc_port_inside_enclave,omitempty"`
	// The grpc-proxy port inside the enclave network that the API container is listening on
	GrpcProxyPortInsideEnclave uint32 `protobuf:"varint,4,opt,name=grpc_proxy_port_inside_enclave,json=grpcProxyPortInsideEnclave,proto3" json:"grpc_proxy_port_inside_enclave,omitempty"`
}

func (x *EnclaveAPIContainerInfo) Reset() {
	*x = EnclaveAPIContainerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnclaveAPIContainerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnclaveAPIContainerInfo) ProtoMessage() {}

func (x *EnclaveAPIContainerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_engine_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnclaveAPIContainerInfo.ProtoReflect.Descriptor instead.
func (*EnclaveAPIContainerInfo) Descriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{3}
}

func (x *EnclaveAPIContainerInfo) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *EnclaveAPIContainerInfo) GetIpInsideEnclave() string {
	if x != nil {
		return x.IpInsideEnclave
	}
	return ""
}

func (x *EnclaveAPIContainerInfo) GetGrpcPortInsideEnclave() uint32 {
	if x != nil {
		return x.GrpcPortInsideEnclave
	}
	return 0
}

func (x *EnclaveAPIContainerInfo) GetGrpcProxyPortInsideEnclave() uint32 {
	if x != nil {
		return x.GrpcProxyPortInsideEnclave
	}
	return 0
}

// Will only be present if the API container is running
type EnclaveAPIContainerHostMachineInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The interface IP on the container engine host machine where the API container can be reached
	IpOnHostMachine string `protobuf:"bytes,4,opt,name=ip_on_host_machine,json=ipOnHostMachine,proto3" json:"ip_on_host_machine,omitempty"`
	// The grpc port on the container engine host machine where the API container can be reached
	GrpcPortOnHostMachine uint32 `protobuf:"varint,5,opt,name=grpc_port_on_host_machine,json=grpcPortOnHostMachine,proto3" json:"grpc_port_on_host_machine,omitempty"`
	// The port that proxies the engine's grpc port, which is necessary for the engine to be accessible by Typescript-in-web using the grpc-web library
	GrpcProxyPortOnHostMachine uint32 `protobuf:"varint,6,opt,name=grpc_proxy_port_on_host_machine,json=grpcProxyPortOnHostMachine,proto3" json:"grpc_proxy_port_on_host_machine,omitempty"`
}

func (x *EnclaveAPIContainerHostMachineInfo) Reset() {
	*x = EnclaveAPIContainerHostMachineInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnclaveAPIContainerHostMachineInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnclaveAPIContainerHostMachineInfo) ProtoMessage() {}

func (x *EnclaveAPIContainerHostMachineInfo) ProtoReflect() protoreflect.Message {
	mi := &file_engine_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnclaveAPIContainerHostMachineInfo.ProtoReflect.Descriptor instead.
func (*EnclaveAPIContainerHostMachineInfo) Descriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{4}
}

func (x *EnclaveAPIContainerHostMachineInfo) GetIpOnHostMachine() string {
	if x != nil {
		return x.IpOnHostMachine
	}
	return ""
}

func (x *EnclaveAPIContainerHostMachineInfo) GetGrpcPortOnHostMachine() uint32 {
	if x != nil {
		return x.GrpcPortOnHostMachine
	}
	return 0
}

func (x *EnclaveAPIContainerHostMachineInfo) GetGrpcProxyPortOnHostMachine() uint32 {
	if x != nil {
		return x.GrpcProxyPortOnHostMachine
	}
	return 0
}

// Enclaves are defined by a network in the container system, which is why there's a bunch of network information here
type EnclaveInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the enclave
	EnclaveUuid string `protobuf:"bytes,1,opt,name=enclave_uuid,json=enclaveUuid,proto3" json:"enclave_uuid,omitempty"`
	// Name of the enclave
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The shortened uuid of the enclave
	ShortenedUuid string `protobuf:"bytes,3,opt,name=shortened_uuid,json=shortenedUuid,proto3" json:"shortened_uuid,omitempty"`
	// State of all containers in the enclave
	ContainersStatus EnclaveContainersStatus `protobuf:"varint,4,opt,name=containers_status,json=containersStatus,proto3,enum=engine_api.EnclaveContainersStatus" json:"containers_status,omitempty"`
	// State specifically of the API container
	ApiContainerStatus EnclaveAPIContainerStatus `protobuf:"varint,5,opt,name=api_container_status,json=apiContainerStatus,proto3,enum=engine_api.EnclaveAPIContainerStatus" json:"api_container_status,omitempty"`
	// NOTE: Will not be present if the API container status is "NONEXISTENT"!!
	ApiContainerInfo *EnclaveAPIContainerInfo `protobuf:"bytes,6,opt,name=api_container_info,json=apiContainerInfo,proto3" json:"api_container_info,omitempty"`
	// NOTE: Will not be present if the API container status is not "RUNNING"!!
	ApiContainerHostMachineInfo *EnclaveAPIContainerHostMachineInfo `protobuf:"bytes,7,opt,name=api_container_host_machine_info,json=apiContainerHostMachineInfo,proto3" json:"api_container_host_machine_info,omitempty"`
	//The enclave's creation time
	CreationTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
}

func (x *EnclaveInfo) Reset() {
	*x = EnclaveInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnclaveInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnclaveInfo) ProtoMessage() {}

func (x *EnclaveInfo) ProtoReflect() protoreflect.Message {
	mi := &file_engine_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnclaveInfo.ProtoReflect.Descriptor instead.
func (*EnclaveInfo) Descriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{5}
}

func (x *EnclaveInfo) GetEnclaveUuid() string {
	if x != nil {
		return x.EnclaveUuid
	}
	return ""
}

func (x *EnclaveInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnclaveInfo) GetShortenedUuid() string {
	if x != nil {
		return x.ShortenedUuid
	}
	return ""
}

func (x *EnclaveInfo) GetContainersStatus() EnclaveContainersStatus {
	if x != nil {
		return x.ContainersStatus
	}
	return EnclaveContainersStatus_EnclaveContainersStatus_EMPTY
}

func (x *EnclaveInfo) GetApiContainerStatus() EnclaveAPIContainerStatus {
	if x != nil {
		return x.ApiContainerStatus
	}
	return EnclaveAPIContainerStatus_EnclaveAPIContainerStatus_NONEXISTENT
}

func (x *EnclaveInfo) GetApiContainerInfo() *EnclaveAPIContainerInfo {
	if x != nil {
		return x.ApiContainerInfo
	}
	return nil
}

func (x *EnclaveInfo) GetApiContainerHostMachineInfo() *EnclaveAPIContainerHostMachineInfo {
	if x != nil {
		return x.ApiContainerHostMachineInfo
	}
	return nil
}

func (x *EnclaveInfo) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

type GetEnclavesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mapping of enclave_uuid -> info_about_enclave
	EnclaveInfo map[string]*EnclaveInfo `protobuf:"bytes,1,rep,name=enclave_info,json=enclaveInfo,proto3" json:"enclave_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetEnclavesResponse) Reset() {
	*x = GetEnclavesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEnclavesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEnclavesResponse) ProtoMessage() {}

func (x *GetEnclavesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_engine_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEnclavesResponse.ProtoReflect.Descriptor instead.
func (*GetEnclavesResponse) Descriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetEnclavesResponse) GetEnclaveInfo() map[string]*EnclaveInfo {
	if x != nil {
		return x.EnclaveInfo
	}
	return nil
}

// An enclave identifier is a collection of uuid, name and shortened uuid
type EnclaveIdentifiers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the enclave
	EnclaveUuid string `protobuf:"bytes,1,opt,name=enclave_uuid,json=enclaveUuid,proto3" json:"enclave_uuid,omitempty"`
	// Name of the enclave
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The shortened uuid of the enclave
	ShortenedUuid string `protobuf:"bytes,3,opt,name=shortened_uuid,json=shortenedUuid,proto3" json:"shortened_uuid,omitempty"`
}

func (x *EnclaveIdentifiers) Reset() {
	*x = EnclaveIdentifiers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnclaveIdentifiers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnclaveIdentifiers) ProtoMessage() {}

func (x *EnclaveIdentifiers) ProtoReflect() protoreflect.Message {
	mi := &file_engine_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnclaveIdentifiers.ProtoReflect.Descriptor instead.
func (*EnclaveIdentifiers) Descriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{7}
}

func (x *EnclaveIdentifiers) GetEnclaveUuid() string {
	if x != nil {
		return x.EnclaveUuid
	}
	return ""
}

func (x *EnclaveIdentifiers) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnclaveIdentifiers) GetShortenedUuid() string {
	if x != nil {
		return x.ShortenedUuid
	}
	return ""
}

type GetExistingAndHistoricalEnclaveIdentifiersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllIdentifiers []*EnclaveIdentifiers `protobuf:"bytes,1,rep,name=allIdentifiers,proto3" json:"allIdentifiers,omitempty"`
}

func (x *GetExistingAndHistoricalEnclaveIdentifiersResponse) Reset() {
	*x = GetExistingAndHistoricalEnclaveIdentifiersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExistingAndHistoricalEnclaveIdentifiersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExistingAndHistoricalEnclaveIdentifiersResponse) ProtoMessage() {}

func (x *GetExistingAndHistoricalEnclaveIdentifiersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_engine_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExistingAndHistoricalEnclaveIdentifiersResponse.ProtoReflect.Descriptor instead.
func (*GetExistingAndHistoricalEnclaveIdentifiersResponse) Descriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetExistingAndHistoricalEnclaveIdentifiersResponse) GetAllIdentifiers() []*EnclaveIdentifiers {
	if x != nil {
		return x.AllIdentifiers
	}
	return nil
}

// ==============================================================================================
//                                       Stop Enclave
// ==============================================================================================
type StopEnclaveArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//The identifier(uuid, shortened uuid, name) of the Kurtosis enclave to stop
	EnclaveIdentifier string `protobuf:"bytes,1,opt,name=enclave_identifier,json=enclaveIdentifier,proto3" json:"enclave_identifier,omitempty"`
}

func (x *StopEnclaveArgs) Reset() {
	*x = StopEnclaveArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopEnclaveArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopEnclaveArgs) ProtoMessage() {}

func (x *StopEnclaveArgs) ProtoReflect() protoreflect.Message {
	mi := &file_engine_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopEnclaveArgs.ProtoReflect.Descriptor instead.
func (*StopEnclaveArgs) Descriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{9}
}

func (x *StopEnclaveArgs) GetEnclaveIdentifier() string {
	if x != nil {
		return x.EnclaveIdentifier
	}
	return ""
}

// ==============================================================================================
//                                       Destroy Enclave
// ==============================================================================================
type DestroyEnclaveArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//The identifier(uuid, shortened uuid, name) of the Kurtosis enclave to destroy
	EnclaveIdentifier string `protobuf:"bytes,1,opt,name=enclave_identifier,json=enclaveIdentifier,proto3" json:"enclave_identifier,omitempty"`
}

func (x *DestroyEnclaveArgs) Reset() {
	*x = DestroyEnclaveArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyEnclaveArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyEnclaveArgs) ProtoMessage() {}

func (x *DestroyEnclaveArgs) ProtoReflect() protoreflect.Message {
	mi := &file_engine_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyEnclaveArgs.ProtoReflect.Descriptor instead.
func (*DestroyEnclaveArgs) Descriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{10}
}

func (x *DestroyEnclaveArgs) GetEnclaveIdentifier() string {
	if x != nil {
		return x.EnclaveIdentifier
	}
	return ""
}

// ==============================================================================================
//                                       Create Enclave
// ==============================================================================================
type CleanArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, It will clean even the running enclaves
	ShouldCleanAll bool `protobuf:"varint,1,opt,name=should_clean_all,json=shouldCleanAll,proto3" json:"should_clean_all,omitempty"`
}

func (x *CleanArgs) Reset() {
	*x = CleanArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanArgs) ProtoMessage() {}

func (x *CleanArgs) ProtoReflect() protoreflect.Message {
	mi := &file_engine_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanArgs.ProtoReflect.Descriptor instead.
func (*CleanArgs) Descriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{11}
}

func (x *CleanArgs) GetShouldCleanAll() bool {
	if x != nil {
		return x.ShouldCleanAll
	}
	return false
}

type EnclaveNameAndUuid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *EnclaveNameAndUuid) Reset() {
	*x = EnclaveNameAndUuid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnclaveNameAndUuid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnclaveNameAndUuid) ProtoMessage() {}

func (x *EnclaveNameAndUuid) ProtoReflect() protoreflect.Message {
	mi := &file_engine_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnclaveNameAndUuid.ProtoReflect.Descriptor instead.
func (*EnclaveNameAndUuid) Descriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{12}
}

func (x *EnclaveNameAndUuid) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnclaveNameAndUuid) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type CleanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// removed enclave name and uuids
	RemovedEnclaveNameAndUuids []*EnclaveNameAndUuid `protobuf:"bytes,1,rep,name=removed_enclave_name_and_uuids,json=removedEnclaveNameAndUuids,proto3" json:"removed_enclave_name_and_uuids,omitempty"`
}

func (x *CleanResponse) Reset() {
	*x = CleanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanResponse) ProtoMessage() {}

func (x *CleanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_engine_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanResponse.ProtoReflect.Descriptor instead.
func (*CleanResponse) Descriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{13}
}

func (x *CleanResponse) GetRemovedEnclaveNameAndUuids() []*EnclaveNameAndUuid {
	if x != nil {
		return x.RemovedEnclaveNameAndUuids
	}
	return nil
}

// ==============================================================================================
//                                   Get User Service Logs
// ==============================================================================================
type GetServiceLogsArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of the user service's Kurtosis Enclave
	EnclaveIdentifier string `protobuf:"bytes,1,opt,name=enclave_identifier,json=enclaveIdentifier,proto3" json:"enclave_identifier,omitempty"`
	// "Set" of service UUIDs in the enclave
	ServiceUuidSet map[string]bool `protobuf:"bytes,2,rep,name=service_uuid_set,json=serviceUuidSet,proto3" json:"service_uuid_set,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// If true, It will follow the container logs
	FollowLogs bool `protobuf:"varint,3,opt,name=follow_logs,json=followLogs,proto3" json:"follow_logs,omitempty"`
	// The conjunctive log lines filters, the first filter is applied over the found log lines, the second filter is applied over the filter one result and so on (like grep)
	ConjunctiveFilters []*LogLineFilter `protobuf:"bytes,4,rep,name=conjunctive_filters,json=conjunctiveFilters,proto3" json:"conjunctive_filters,omitempty"`
}

func (x *GetServiceLogsArgs) Reset() {
	*x = GetServiceLogsArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceLogsArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceLogsArgs) ProtoMessage() {}

func (x *GetServiceLogsArgs) ProtoReflect() protoreflect.Message {
	mi := &file_engine_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceLogsArgs.ProtoReflect.Descriptor instead.
func (*GetServiceLogsArgs) Descriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{14}
}

func (x *GetServiceLogsArgs) GetEnclaveIdentifier() string {
	if x != nil {
		return x.EnclaveIdentifier
	}
	return ""
}

func (x *GetServiceLogsArgs) GetServiceUuidSet() map[string]bool {
	if x != nil {
		return x.ServiceUuidSet
	}
	return nil
}

func (x *GetServiceLogsArgs) GetFollowLogs() bool {
	if x != nil {
		return x.FollowLogs
	}
	return false
}

func (x *GetServiceLogsArgs) GetConjunctiveFilters() []*LogLineFilter {
	if x != nil {
		return x.ConjunctiveFilters
	}
	return nil
}

type GetServiceLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The service log lines grouped by service UUIDs and ordered in forward direction (oldest log line is the first element)
	ServiceLogsByServiceUuid map[string]*LogLine `protobuf:"bytes,1,rep,name=service_logs_by_service_uuid,json=serviceLogsByServiceUuid,proto3" json:"service_logs_by_service_uuid,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// A set of service GUIDs requested by the user that were not found in the logs database, could be related that users send
	// a wrong GUID or a right GUID for a service that has not sent any logs so far
	NotFoundServiceUuidSet map[string]bool `protobuf:"bytes,2,rep,name=not_found_service_uuid_set,json=notFoundServiceUuidSet,proto3" json:"not_found_service_uuid_set,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GetServiceLogsResponse) Reset() {
	*x = GetServiceLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceLogsResponse) ProtoMessage() {}

func (x *GetServiceLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_engine_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceLogsResponse.ProtoReflect.Descriptor instead.
func (*GetServiceLogsResponse) Descriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{15}
}

func (x *GetServiceLogsResponse) GetServiceLogsByServiceUuid() map[string]*LogLine {
	if x != nil {
		return x.ServiceLogsByServiceUuid
	}
	return nil
}

func (x *GetServiceLogsResponse) GetNotFoundServiceUuidSet() map[string]bool {
	if x != nil {
		return x.NotFoundServiceUuidSet
	}
	return nil
}

// TODO add timestamp as well, for when we do timestamp-handling on the client side
type LogLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Line []string `protobuf:"bytes,1,rep,name=line,proto3" json:"line,omitempty"`
}

func (x *LogLine) Reset() {
	*x = LogLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogLine) ProtoMessage() {}

func (x *LogLine) ProtoReflect() protoreflect.Message {
	mi := &file_engine_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogLine.ProtoReflect.Descriptor instead.
func (*LogLine) Descriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{16}
}

func (x *LogLine) GetLine() []string {
	if x != nil {
		return x.Line
	}
	return nil
}

type LogLineFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator    LogLineOperator `protobuf:"varint,1,opt,name=operator,proto3,enum=engine_api.LogLineOperator" json:"operator,omitempty"`
	TextPattern string          `protobuf:"bytes,2,opt,name=text_pattern,json=textPattern,proto3" json:"text_pattern,omitempty"`
}

func (x *LogLineFilter) Reset() {
	*x = LogLineFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogLineFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogLineFilter) ProtoMessage() {}

func (x *LogLineFilter) ProtoReflect() protoreflect.Message {
	mi := &file_engine_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogLineFilter.ProtoReflect.Descriptor instead.
func (*LogLineFilter) Descriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{17}
}

func (x *LogLineFilter) GetOperator() LogLineOperator {
	if x != nil {
		return x.Operator
	}
	return LogLineOperator_LogLineOperator_DOES_CONTAIN_TEXT
}

func (x *LogLineFilter) GetTextPattern() string {
	if x != nil {
		return x.TextPattern
	}
	return ""
}

var File_engine_service_proto protoreflect.FileDescriptor

var file_engine_service_proto_rawDesc = []byte{
	0x0a, 0x14, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61,
	0x70, 0x69, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x3e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0xe0, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x63, 0x6c, 0x61,
	0x76, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e,
	0x63, 0x6c, 0x61, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x70, 0x69,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x61, 0x70,
	0x69, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x67, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61, 0x70, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x36, 0x0a, 0x17, 0x69,
	0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x22, 0x53, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x63,
	0x6c, 0x61, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0c,
	0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x65, 0x6e, 0x63,
	0x6c, 0x61, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xe5, 0x01, 0x0a, 0x17, 0x45, 0x6e, 0x63,
	0x6c, 0x61, 0x76, 0x65, 0x41, 0x50, 0x49, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x70, 0x5f, 0x69, 0x6e,
	0x73, 0x69, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x69, 0x70, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x63, 0x6c,
	0x61, 0x76, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x67, 0x72, 0x70, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x49,
	0x6e, 0x73, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x12, 0x42, 0x0a, 0x1e,
	0x67, 0x72, 0x70, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x67, 0x72, 0x70, 0x63, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50,
	0x6f, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65,
	0x22, 0xd0, 0x01, 0x0a, 0x22, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x41, 0x50, 0x49, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x70, 0x5f, 0x6f, 0x6e,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x70, 0x4f, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x12, 0x38, 0x0a, 0x19, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x67, 0x72, 0x70, 0x63, 0x50, 0x6f, 0x72,
	0x74, 0x4f, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x43,
	0x0a, 0x1f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x67, 0x72, 0x70, 0x63, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x4f, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x22, 0xa0, 0x04, 0x0a, 0x0b, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x63, 0x6c, 0x61,
	0x76, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x65, 0x6e, 0x65, 0x64, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x6e, 0x65, 0x64, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x50, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x57, 0x0a, 0x14, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x45,
	0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x41, 0x50, 0x49, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x12, 0x61, 0x70, 0x69, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x51, 0x0a, 0x12,
	0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x41, 0x50, 0x49,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x61,
	0x70, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x74, 0x0a, 0x1f, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x41, 0x50, 0x49,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x1b, 0x61, 0x70, 0x69, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x45, 0x6e,
	0x63, 0x6c, 0x61, 0x76, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53,
	0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x1a, 0x57, 0x0a, 0x10, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x72, 0x0a, 0x12,
	0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76,
	0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x65, 0x6e, 0x65, 0x64, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x6e, 0x65, 0x64, 0x55, 0x75, 0x69, 0x64,
	0x22, 0x7c, 0x0a, 0x32, 0x47, 0x65, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41,
	0x6e, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x63, 0x6c,
	0x61, 0x76, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6e, 0x63, 0x6c,
	0x61, 0x76, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x52, 0x0e,
	0x61, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x22, 0x40,
	0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x41, 0x72, 0x67,
	0x73, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65,
	0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x22, 0x43, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x45, 0x6e, 0x63, 0x6c, 0x61,
	0x76, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76,
	0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x35, 0x0a, 0x09, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x41, 0x72,
	0x67, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x63, 0x6c, 0x65,
	0x61, 0x6e, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x68,
	0x6f, 0x75, 0x6c, 0x64, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x41, 0x6c, 0x6c, 0x22, 0x3c, 0x0a, 0x12,
	0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x73, 0x0a, 0x0d, 0x43, 0x6c,
	0x65, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x1e, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x55,
	0x75, 0x69, 0x64, 0x52, 0x1a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x45, 0x6e, 0x63, 0x6c,
	0x61, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x55, 0x75, 0x69, 0x64, 0x73, 0x22,
	0xd1, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f,
	0x67, 0x73, 0x41, 0x72, 0x67, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76,
	0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x41, 0x72, 0x67, 0x73, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x53, 0x65, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64,
	0x53, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x6f,
	0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x4c, 0x6f, 0x67, 0x73, 0x12, 0x4a, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x6a, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4c,
	0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x12, 0x63, 0x6f,
	0x6e, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x1a, 0x41, 0x0a, 0x13, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x53,
	0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xc4, 0x03, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80,
	0x01, 0x0a, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x5f,
	0x62, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x6f, 0x67, 0x73, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x75,
	0x69, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x6f, 0x67, 0x73, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x7a, 0x0a, 0x1a, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75,
	0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x53, 0x65, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x16, 0x6e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x53, 0x65, 0x74, 0x1a, 0x60, 0x0a,
	0x1d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x42, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x67,
	0x4c, 0x69, 0x6e, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x49, 0x0a, 0x1b, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1d, 0x0a, 0x07, 0x4c, 0x6f,
	0x67, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x6b, 0x0a, 0x0d, 0x4c, 0x6f, 0x67,
	0x4c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x6e,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x2a, 0x86, 0x01, 0x0a, 0x17, 0x45, 0x6e, 0x63, 0x6c, 0x61,
	0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x45, 0x4d,
	0x50, 0x54, 0x59, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x6e,
	0x63, 0x6c, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x02, 0x2a,
	0x94, 0x01, 0x0a, 0x19, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x41, 0x50, 0x49, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a,
	0x25, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x41, 0x50, 0x49, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x58,
	0x49, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x6e, 0x63, 0x6c,
	0x61, 0x76, 0x65, 0x41, 0x50, 0x49, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12,
	0x25, 0x0a, 0x21, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x41, 0x50, 0x49, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x53, 0x54, 0x4f,
	0x50, 0x50, 0x45, 0x44, 0x10, 0x02, 0x2a, 0xc3, 0x01, 0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x4c, 0x69,
	0x6e, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x21, 0x4c, 0x6f,
	0x67, 0x4c, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x44, 0x4f,
	0x45, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10,
	0x00, 0x12, 0x29, 0x0a, 0x25, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28,
	0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x44, 0x4f, 0x45, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x5f, 0x52, 0x45, 0x47, 0x45, 0x58, 0x10, 0x02, 0x12, 0x30, 0x0a, 0x2c, 0x4c, 0x6f,
	0x67, 0x4c, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x44, 0x4f,
	0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x47, 0x45, 0x58, 0x10, 0x03, 0x32, 0xae, 0x05, 0x0a,
	0x0d, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4c,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x21, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x12, 0x1d, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x21, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x48, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x73,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x86, 0x01, 0x0a, 0x2a,
	0x47, 0x65, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x3e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x6e, 0x63, 0x6c,
	0x61, 0x76, 0x65, 0x12, 0x1b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x41, 0x72, 0x67, 0x73,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0e, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x12, 0x1e, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x05, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x12,
	0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x65,
	0x61, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x19, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x1e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67,
	0x73, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x22, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x56, 0x5a,
	0x54, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x75, 0x72, 0x74,
	0x6f, 0x73, 0x69, 0x73, 0x2d, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x6b, 0x75, 0x72, 0x74, 0x6f, 0x73,
	0x69, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2f, 0x6b, 0x75, 0x72, 0x74, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x62, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_engine_service_proto_rawDescOnce sync.Once
	file_engine_service_proto_rawDescData = file_engine_service_proto_rawDesc
)

func file_engine_service_proto_rawDescGZIP() []byte {
	file_engine_service_proto_rawDescOnce.Do(func() {
		file_engine_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_engine_service_proto_rawDescData)
	})
	return file_engine_service_proto_rawDescData
}

var file_engine_service_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_engine_service_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_engine_service_proto_goTypes = []interface{}{
	(EnclaveContainersStatus)(0),                               // 0: engine_api.EnclaveContainersStatus
	(EnclaveAPIContainerStatus)(0),                             // 1: engine_api.EnclaveAPIContainerStatus
	(LogLineOperator)(0),                                       // 2: engine_api.LogLineOperator
	(*GetEngineInfoResponse)(nil),                              // 3: engine_api.GetEngineInfoResponse
	(*CreateEnclaveArgs)(nil),                                  // 4: engine_api.CreateEnclaveArgs
	(*CreateEnclaveResponse)(nil),                              // 5: engine_api.CreateEnclaveResponse
	(*EnclaveAPIContainerInfo)(nil),                            // 6: engine_api.EnclaveAPIContainerInfo
	(*EnclaveAPIContainerHostMachineInfo)(nil),                 // 7: engine_api.EnclaveAPIContainerHostMachineInfo
	(*EnclaveInfo)(nil),                                        // 8: engine_api.EnclaveInfo
	(*GetEnclavesResponse)(nil),                                // 9: engine_api.GetEnclavesResponse
	(*EnclaveIdentifiers)(nil),                                 // 10: engine_api.EnclaveIdentifiers
	(*GetExistingAndHistoricalEnclaveIdentifiersResponse)(nil), // 11: engine_api.GetExistingAndHistoricalEnclaveIdentifiersResponse
	(*StopEnclaveArgs)(nil),                                    // 12: engine_api.StopEnclaveArgs
	(*DestroyEnclaveArgs)(nil),                                 // 13: engine_api.DestroyEnclaveArgs
	(*CleanArgs)(nil),                                          // 14: engine_api.CleanArgs
	(*EnclaveNameAndUuid)(nil),                                 // 15: engine_api.EnclaveNameAndUuid
	(*CleanResponse)(nil),                                      // 16: engine_api.CleanResponse
	(*GetServiceLogsArgs)(nil),                                 // 17: engine_api.GetServiceLogsArgs
	(*GetServiceLogsResponse)(nil),                             // 18: engine_api.GetServiceLogsResponse
	(*LogLine)(nil),                                            // 19: engine_api.LogLine
	(*LogLineFilter)(nil),                                      // 20: engine_api.LogLineFilter
	nil,                                                        // 21: engine_api.GetEnclavesResponse.EnclaveInfoEntry
	nil,                                                        // 22: engine_api.GetServiceLogsArgs.ServiceUuidSetEntry
	nil,                                                        // 23: engine_api.GetServiceLogsResponse.ServiceLogsByServiceUuidEntry
	nil,                                                        // 24: engine_api.GetServiceLogsResponse.NotFoundServiceUuidSetEntry
	(*timestamppb.Timestamp)(nil),                              // 25: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                                      // 26: google.protobuf.Empty
}
var file_engine_service_proto_depIdxs = []int32{
	8,  // 0: engine_api.CreateEnclaveResponse.enclave_info:type_name -> engine_api.EnclaveInfo
	0,  // 1: engine_api.EnclaveInfo.containers_status:type_name -> engine_api.EnclaveContainersStatus
	1,  // 2: engine_api.EnclaveInfo.api_container_status:type_name -> engine_api.EnclaveAPIContainerStatus
	6,  // 3: engine_api.EnclaveInfo.api_container_info:type_name -> engine_api.EnclaveAPIContainerInfo
	7,  // 4: engine_api.EnclaveInfo.api_container_host_machine_info:type_name -> engine_api.EnclaveAPIContainerHostMachineInfo
	25, // 5: engine_api.EnclaveInfo.creation_time:type_name -> google.protobuf.Timestamp
	21, // 6: engine_api.GetEnclavesResponse.enclave_info:type_name -> engine_api.GetEnclavesResponse.EnclaveInfoEntry
	10, // 7: engine_api.GetExistingAndHistoricalEnclaveIdentifiersResponse.allIdentifiers:type_name -> engine_api.EnclaveIdentifiers
	15, // 8: engine_api.CleanResponse.removed_enclave_name_and_uuids:type_name -> engine_api.EnclaveNameAndUuid
	22, // 9: engine_api.GetServiceLogsArgs.service_uuid_set:type_name -> engine_api.GetServiceLogsArgs.ServiceUuidSetEntry
	20, // 10: engine_api.GetServiceLogsArgs.conjunctive_filters:type_name -> engine_api.LogLineFilter
	23, // 11: engine_api.GetServiceLogsResponse.service_logs_by_service_uuid:type_name -> engine_api.GetServiceLogsResponse.ServiceLogsByServiceUuidEntry
	24, // 12: engine_api.GetServiceLogsResponse.not_found_service_uuid_set:type_name -> engine_api.GetServiceLogsResponse.NotFoundServiceUuidSetEntry
	2,  // 13: engine_api.LogLineFilter.operator:type_name -> engine_api.LogLineOperator
	8,  // 14: engine_api.GetEnclavesResponse.EnclaveInfoEntry.value:type_name -> engine_api.EnclaveInfo
	19, // 15: engine_api.GetServiceLogsResponse.ServiceLogsByServiceUuidEntry.value:type_name -> engine_api.LogLine
	26, // 16: engine_api.EngineService.GetEngineInfo:input_type -> google.protobuf.Empty
	4,  // 17: engine_api.EngineService.CreateEnclave:input_type -> engine_api.CreateEnclaveArgs
	26, // 18: engine_api.EngineService.GetEnclaves:input_type -> google.protobuf.Empty
	26, // 19: engine_api.EngineService.GetExistingAndHistoricalEnclaveIdentifiers:input_type -> google.protobuf.Empty
	12, // 20: engine_api.EngineService.StopEnclave:input_type -> engine_api.StopEnclaveArgs
	13, // 21: engine_api.EngineService.DestroyEnclave:input_type -> engine_api.DestroyEnclaveArgs
	14, // 22: engine_api.EngineService.Clean:input_type -> engine_api.CleanArgs
	17, // 23: engine_api.EngineService.GetServiceLogs:input_type -> engine_api.GetServiceLogsArgs
	3,  // 24: engine_api.EngineService.GetEngineInfo:output_type -> engine_api.GetEngineInfoResponse
	5,  // 25: engine_api.EngineService.CreateEnclave:output_type -> engine_api.CreateEnclaveResponse
	9,  // 26: engine_api.EngineService.GetEnclaves:output_type -> engine_api.GetEnclavesResponse
	11, // 27: engine_api.EngineService.GetExistingAndHistoricalEnclaveIdentifiers:output_type -> engine_api.GetExistingAndHistoricalEnclaveIdentifiersResponse
	26, // 28: engine_api.EngineService.StopEnclave:output_type -> google.protobuf.Empty
	26, // 29: engine_api.EngineService.DestroyEnclave:output_type -> google.protobuf.Empty
	16, // 30: engine_api.EngineService.Clean:output_type -> engine_api.CleanResponse
	18, // 31: engine_api.EngineService.GetServiceLogs:output_type -> engine_api.GetServiceLogsResponse
	24, // [24:32] is the sub-list for method output_type
	16, // [16:24] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_engine_service_proto_init() }
func file_engine_service_proto_init() {
	if File_engine_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_engine_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEngineInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEnclaveArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEnclaveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnclaveAPIContainerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnclaveAPIContainerHostMachineInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnclaveInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEnclavesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnclaveIdentifiers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExistingAndHistoricalEnclaveIdentifiersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopEnclaveArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyEnclaveArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleanArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnclaveNameAndUuid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceLogsArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogLineFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_engine_service_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_engine_service_proto_goTypes,
		DependencyIndexes: file_engine_service_proto_depIdxs,
		EnumInfos:         file_engine_service_proto_enumTypes,
		MessageInfos:      file_engine_service_proto_msgTypes,
	}.Build()
	File_engine_service_proto = out.File
	file_engine_service_proto_rawDesc = nil
	file_engine_service_proto_goTypes = nil
	file_engine_service_proto_depIdxs = nil
}
