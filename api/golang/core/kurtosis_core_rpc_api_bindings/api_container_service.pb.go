// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.2
// source: api_container_service.proto

package kurtosis_core_rpc_api_bindings

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ServiceStatus int32

const (
	ServiceStatus_STOPPED ServiceStatus = 0
	ServiceStatus_RUNNING ServiceStatus = 1
	ServiceStatus_UNKNOWN ServiceStatus = 2
)

// Enum value maps for ServiceStatus.
var (
	ServiceStatus_name = map[int32]string{
		0: "STOPPED",
		1: "RUNNING",
		2: "UNKNOWN",
	}
	ServiceStatus_value = map[string]int32{
		"STOPPED": 0,
		"RUNNING": 1,
		"UNKNOWN": 2,
	}
)

func (x ServiceStatus) Enum() *ServiceStatus {
	p := new(ServiceStatus)
	*p = x
	return p
}

func (x ServiceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_container_service_proto_enumTypes[0].Descriptor()
}

func (ServiceStatus) Type() protoreflect.EnumType {
	return &file_api_container_service_proto_enumTypes[0]
}

func (x ServiceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceStatus.Descriptor instead.
func (ServiceStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{0}
}

type ImageDownloadMode int32

const (
	ImageDownloadMode_always  ImageDownloadMode = 0
	ImageDownloadMode_missing ImageDownloadMode = 1
)

// Enum value maps for ImageDownloadMode.
var (
	ImageDownloadMode_name = map[int32]string{
		0: "always",
		1: "missing",
	}
	ImageDownloadMode_value = map[string]int32{
		"always":  0,
		"missing": 1,
	}
)

func (x ImageDownloadMode) Enum() *ImageDownloadMode {
	p := new(ImageDownloadMode)
	*p = x
	return p
}

func (x ImageDownloadMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImageDownloadMode) Descriptor() protoreflect.EnumDescriptor {
	return file_api_container_service_proto_enumTypes[1].Descriptor()
}

func (ImageDownloadMode) Type() protoreflect.EnumType {
	return &file_api_container_service_proto_enumTypes[1]
}

func (x ImageDownloadMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImageDownloadMode.Descriptor instead.
func (ImageDownloadMode) EnumDescriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{1}
}

// User services port forwarding
type Connect int32

const (
	// Best effort port forwarding
	Connect_CONNECT Connect = 0
	// Port forwarding disabled
	Connect_NO_CONNECT Connect = 1
)

// Enum value maps for Connect.
var (
	Connect_name = map[int32]string{
		0: "CONNECT",
		1: "NO_CONNECT",
	}
	Connect_value = map[string]int32{
		"CONNECT":    0,
		"NO_CONNECT": 1,
	}
)

func (x Connect) Enum() *Connect {
	p := new(Connect)
	*p = x
	return p
}

func (x Connect) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Connect) Descriptor() protoreflect.EnumDescriptor {
	return file_api_container_service_proto_enumTypes[2].Descriptor()
}

func (Connect) Type() protoreflect.EnumType {
	return &file_api_container_service_proto_enumTypes[2]
}

func (x Connect) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Connect.Descriptor instead.
func (Connect) EnumDescriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{2}
}

type KurtosisFeatureFlag int32

const (
	KurtosisFeatureFlag_NO_INSTRUCTIONS_CACHING KurtosisFeatureFlag = 0
)

// Enum value maps for KurtosisFeatureFlag.
var (
	KurtosisFeatureFlag_name = map[int32]string{
		0: "NO_INSTRUCTIONS_CACHING",
	}
	KurtosisFeatureFlag_value = map[string]int32{
		"NO_INSTRUCTIONS_CACHING": 0,
	}
)

func (x KurtosisFeatureFlag) Enum() *KurtosisFeatureFlag {
	p := new(KurtosisFeatureFlag)
	*p = x
	return p
}

func (x KurtosisFeatureFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KurtosisFeatureFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_api_container_service_proto_enumTypes[3].Descriptor()
}

func (KurtosisFeatureFlag) Type() protoreflect.EnumType {
	return &file_api_container_service_proto_enumTypes[3]
}

func (x KurtosisFeatureFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KurtosisFeatureFlag.Descriptor instead.
func (KurtosisFeatureFlag) EnumDescriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{3}
}

type RestartPolicy int32

const (
	RestartPolicy_NEVER  RestartPolicy = 0
	RestartPolicy_ALWAYS RestartPolicy = 1
)

// Enum value maps for RestartPolicy.
var (
	RestartPolicy_name = map[int32]string{
		0: "NEVER",
		1: "ALWAYS",
	}
	RestartPolicy_value = map[string]int32{
		"NEVER":  0,
		"ALWAYS": 1,
	}
)

func (x RestartPolicy) Enum() *RestartPolicy {
	p := new(RestartPolicy)
	*p = x
	return p
}

func (x RestartPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RestartPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_api_container_service_proto_enumTypes[4].Descriptor()
}

func (RestartPolicy) Type() protoreflect.EnumType {
	return &file_api_container_service_proto_enumTypes[4]
}

func (x RestartPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RestartPolicy.Descriptor instead.
func (RestartPolicy) EnumDescriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{4}
}

type Port_TransportProtocol int32

const (
	Port_TCP  Port_TransportProtocol = 0
	Port_SCTP Port_TransportProtocol = 1
	Port_UDP  Port_TransportProtocol = 2
)

// Enum value maps for Port_TransportProtocol.
var (
	Port_TransportProtocol_name = map[int32]string{
		0: "TCP",
		1: "SCTP",
		2: "UDP",
	}
	Port_TransportProtocol_value = map[string]int32{
		"TCP":  0,
		"SCTP": 1,
		"UDP":  2,
	}
)

func (x Port_TransportProtocol) Enum() *Port_TransportProtocol {
	p := new(Port_TransportProtocol)
	*p = x
	return p
}

func (x Port_TransportProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Port_TransportProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_api_container_service_proto_enumTypes[5].Descriptor()
}

func (Port_TransportProtocol) Type() protoreflect.EnumType {
	return &file_api_container_service_proto_enumTypes[5]
}

func (x Port_TransportProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Port_TransportProtocol.Descriptor instead.
func (Port_TransportProtocol) EnumDescriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{0, 0}
}

type Container_Status int32

const (
	Container_STOPPED Container_Status = 0
	Container_RUNNING Container_Status = 1
	Container_UNKNOWN Container_Status = 2
)

// Enum value maps for Container_Status.
var (
	Container_Status_name = map[int32]string{
		0: "STOPPED",
		1: "RUNNING",
		2: "UNKNOWN",
	}
	Container_Status_value = map[string]int32{
		"STOPPED": 0,
		"RUNNING": 1,
		"UNKNOWN": 2,
	}
)

func (x Container_Status) Enum() *Container_Status {
	p := new(Container_Status)
	*p = x
	return p
}

func (x Container_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Container_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_api_container_service_proto_enumTypes[6].Descriptor()
}

func (Container_Status) Type() protoreflect.EnumType {
	return &file_api_container_service_proto_enumTypes[6]
}

func (x Container_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Container_Status.Descriptor instead.
func (Container_Status) EnumDescriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{1, 0}
}

// ==============================================================================================
//
//	Shared Objects (Used By Multiple Endpoints)
//
// ==============================================================================================
type Port struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number uint32 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// The protocol that the port is listening on
	TransportProtocol        Port_TransportProtocol `protobuf:"varint,2,opt,name=transport_protocol,json=transportProtocol,proto3,enum=api_container_api.Port_TransportProtocol" json:"transport_protocol,omitempty"`
	MaybeApplicationProtocol string                 `protobuf:"bytes,3,opt,name=maybe_application_protocol,json=maybeApplicationProtocol,proto3" json:"maybe_application_protocol,omitempty"`
	// The wait timeout duration in string
	MaybeWaitTimeout string `protobuf:"bytes,4,opt,name=maybe_wait_timeout,json=maybeWaitTimeout,proto3" json:"maybe_wait_timeout,omitempty"`
}

func (x *Port) Reset() {
	*x = Port{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Port) ProtoMessage() {}

func (x *Port) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Port.ProtoReflect.Descriptor instead.
func (*Port) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{0}
}

func (x *Port) GetNumber() uint32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Port) GetTransportProtocol() Port_TransportProtocol {
	if x != nil {
		return x.TransportProtocol
	}
	return Port_TCP
}

func (x *Port) GetMaybeApplicationProtocol() string {
	if x != nil {
		return x.MaybeApplicationProtocol
	}
	return ""
}

func (x *Port) GetMaybeWaitTimeout() string {
	if x != nil {
		return x.MaybeWaitTimeout
	}
	return ""
}

type Container struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         Container_Status  `protobuf:"varint,1,opt,name=status,proto3,enum=api_container_api.Container_Status" json:"status,omitempty"`
	ImageName      string            `protobuf:"bytes,2,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	EntrypointArgs []string          `protobuf:"bytes,3,rep,name=entrypoint_args,json=entrypointArgs,proto3" json:"entrypoint_args,omitempty"`
	CmdArgs        []string          `protobuf:"bytes,4,rep,name=cmd_args,json=cmdArgs,proto3" json:"cmd_args,omitempty"`
	EnvVars        map[string]string `protobuf:"bytes,5,rep,name=env_vars,json=envVars,proto3" json:"env_vars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Container) Reset() {
	*x = Container{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Container) ProtoMessage() {}

func (x *Container) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Container.ProtoReflect.Descriptor instead.
func (*Container) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{1}
}

func (x *Container) GetStatus() Container_Status {
	if x != nil {
		return x.Status
	}
	return Container_STOPPED
}

func (x *Container) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *Container) GetEntrypointArgs() []string {
	if x != nil {
		return x.EntrypointArgs
	}
	return nil
}

func (x *Container) GetCmdArgs() []string {
	if x != nil {
		return x.CmdArgs
	}
	return nil
}

func (x *Container) GetEnvVars() map[string]string {
	if x != nil {
		return x.EnvVars
	}
	return nil
}

type ServiceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the service
	ServiceUuid string `protobuf:"bytes,1,opt,name=service_uuid,json=serviceUuid,proto3" json:"service_uuid,omitempty"`
	// The IP address of the service inside the enclave
	PrivateIpAddr string `protobuf:"bytes,2,opt,name=private_ip_addr,json=privateIpAddr,proto3" json:"private_ip_addr,omitempty"`
	// The ports on which the service is reachable inside the enclave, specified in user_specified_port_id -> port_info
	// Will be exactly what was passed in at the time of starting the service
	PrivatePorts map[string]*Port `protobuf:"bytes,3,rep,name=private_ports,json=privatePorts,proto3" json:"private_ports,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Public IP address *outside* the enclave where the service is reachable
	// NOTE: Will be empty if the service isn't running, the service didn't define any ports, or the backend doesn't support reporting public service info
	MaybePublicIpAddr string `protobuf:"bytes,4,opt,name=maybe_public_ip_addr,json=maybePublicIpAddr,proto3" json:"maybe_public_ip_addr,omitempty"`
	// Mapping defining the ports that the service can be reached at *outside* the enclave, in the user_defined_port_id -> port_info where user_defined_port_id
	//
	//	corresponds to the ID that was passed in in AddServiceArgs
	//
	// NOTE: Will be empty if the service isn't running, the service didn't define any ports, or the backend doesn't support reporting public service info
	MaybePublicPorts map[string]*Port `protobuf:"bytes,5,rep,name=maybe_public_ports,json=maybePublicPorts,proto3" json:"maybe_public_ports,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Name of the service
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// Shortened uuid of the service
	ShortenedUuid string `protobuf:"bytes,7,opt,name=shortened_uuid,json=shortenedUuid,proto3" json:"shortened_uuid,omitempty"`
	// Service status: stopped, running.
	ServiceStatus ServiceStatus `protobuf:"varint,8,opt,name=service_status,json=serviceStatus,proto3,enum=api_container_api.ServiceStatus" json:"service_status,omitempty"`
	// Docker container or Kubernetes pod container
	Container *Container `protobuf:"bytes,9,opt,name=container,proto3" json:"container,omitempty"`
}

func (x *ServiceInfo) Reset() {
	*x = ServiceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceInfo) ProtoMessage() {}

func (x *ServiceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceInfo.ProtoReflect.Descriptor instead.
func (*ServiceInfo) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{2}
}

func (x *ServiceInfo) GetServiceUuid() string {
	if x != nil {
		return x.ServiceUuid
	}
	return ""
}

func (x *ServiceInfo) GetPrivateIpAddr() string {
	if x != nil {
		return x.PrivateIpAddr
	}
	return ""
}

func (x *ServiceInfo) GetPrivatePorts() map[string]*Port {
	if x != nil {
		return x.PrivatePorts
	}
	return nil
}

func (x *ServiceInfo) GetMaybePublicIpAddr() string {
	if x != nil {
		return x.MaybePublicIpAddr
	}
	return ""
}

func (x *ServiceInfo) GetMaybePublicPorts() map[string]*Port {
	if x != nil {
		return x.MaybePublicPorts
	}
	return nil
}

func (x *ServiceInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceInfo) GetShortenedUuid() string {
	if x != nil {
		return x.ShortenedUuid
	}
	return ""
}

func (x *ServiceInfo) GetServiceStatus() ServiceStatus {
	if x != nil {
		return x.ServiceStatus
	}
	return ServiceStatus_STOPPED
}

func (x *ServiceInfo) GetContainer() *Container {
	if x != nil {
		return x.Container
	}
	return nil
}

type RunStarlarkScriptArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerializedScript string `protobuf:"bytes,1,opt,name=serialized_script,json=serializedScript,proto3" json:"serialized_script,omitempty"`
	SerializedParams string `protobuf:"bytes,2,opt,name=serialized_params,json=serializedParams,proto3" json:"serialized_params,omitempty"`
	// Defaults to false
	DryRun *bool `protobuf:"varint,3,opt,name=dry_run,json=dryRun,proto3,oneof" json:"dry_run,omitempty"`
	// Defaults to 4
	Parallelism *int32 `protobuf:"varint,4,opt,name=parallelism,proto3,oneof" json:"parallelism,omitempty"`
	// The name of the main function, the default value is "run"
	MainFunctionName     string                `protobuf:"bytes,5,opt,name=main_function_name,json=mainFunctionName,proto3" json:"main_function_name,omitempty"`
	ExperimentalFeatures []KurtosisFeatureFlag `protobuf:"varint,6,rep,packed,name=experimental_features,json=experimentalFeatures,proto3,enum=api_container_api.KurtosisFeatureFlag" json:"experimental_features,omitempty"`
	// Defaults to empty
	CloudInstanceId *string `protobuf:"bytes,7,opt,name=cloud_instance_id,json=cloudInstanceId,proto3,oneof" json:"cloud_instance_id,omitempty"`
	// Defaults to empty
	CloudUserId *string `protobuf:"bytes,8,opt,name=cloud_user_id,json=cloudUserId,proto3,oneof" json:"cloud_user_id,omitempty"`
	// Defaults to empty
	ImageDownloadMode *ImageDownloadMode `protobuf:"varint,9,opt,name=image_download_mode,json=imageDownloadMode,proto3,enum=api_container_api.ImageDownloadMode,oneof" json:"image_download_mode,omitempty"`
}

func (x *RunStarlarkScriptArgs) Reset() {
	*x = RunStarlarkScriptArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunStarlarkScriptArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunStarlarkScriptArgs) ProtoMessage() {}

func (x *RunStarlarkScriptArgs) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunStarlarkScriptArgs.ProtoReflect.Descriptor instead.
func (*RunStarlarkScriptArgs) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{3}
}

func (x *RunStarlarkScriptArgs) GetSerializedScript() string {
	if x != nil {
		return x.SerializedScript
	}
	return ""
}

func (x *RunStarlarkScriptArgs) GetSerializedParams() string {
	if x != nil {
		return x.SerializedParams
	}
	return ""
}

func (x *RunStarlarkScriptArgs) GetDryRun() bool {
	if x != nil && x.DryRun != nil {
		return *x.DryRun
	}
	return false
}

func (x *RunStarlarkScriptArgs) GetParallelism() int32 {
	if x != nil && x.Parallelism != nil {
		return *x.Parallelism
	}
	return 0
}

func (x *RunStarlarkScriptArgs) GetMainFunctionName() string {
	if x != nil {
		return x.MainFunctionName
	}
	return ""
}

func (x *RunStarlarkScriptArgs) GetExperimentalFeatures() []KurtosisFeatureFlag {
	if x != nil {
		return x.ExperimentalFeatures
	}
	return nil
}

func (x *RunStarlarkScriptArgs) GetCloudInstanceId() string {
	if x != nil && x.CloudInstanceId != nil {
		return *x.CloudInstanceId
	}
	return ""
}

func (x *RunStarlarkScriptArgs) GetCloudUserId() string {
	if x != nil && x.CloudUserId != nil {
		return *x.CloudUserId
	}
	return ""
}

func (x *RunStarlarkScriptArgs) GetImageDownloadMode() ImageDownloadMode {
	if x != nil && x.ImageDownloadMode != nil {
		return *x.ImageDownloadMode
	}
	return ImageDownloadMode_always
}

type RunStarlarkPackageArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageId string `protobuf:"bytes,1,opt,name=package_id,json=packageId,proto3" json:"package_id,omitempty"`
	// Deprecated: If the package is local, it should have been uploaded with UploadStarlarkPackage prior to calling
	// RunStarlarkPackage. If the package is remote and must be cloned within the APIC, use the standalone boolean flag
	// clone_package below
	//
	// Types that are assignable to StarlarkPackageContent:
	//
	//	*RunStarlarkPackageArgs_Local
	//	*RunStarlarkPackageArgs_Remote
	StarlarkPackageContent isRunStarlarkPackageArgs_StarlarkPackageContent `protobuf_oneof:"starlark_package_content"`
	// Serialized parameters data for the Starlark package main function
	// This should be a valid JSON string
	SerializedParams string `protobuf:"bytes,5,opt,name=serialized_params,json=serializedParams,proto3" json:"serialized_params,omitempty"`
	// Defaults to false
	DryRun *bool `protobuf:"varint,6,opt,name=dry_run,json=dryRun,proto3,oneof" json:"dry_run,omitempty"`
	// Defaults to 4
	Parallelism *int32 `protobuf:"varint,7,opt,name=parallelism,proto3,oneof" json:"parallelism,omitempty"`
	// Whether the package should be cloned or not.
	// If false, then the package will be pulled from the APIC local package store. If it's a local package then is must
	// have been uploaded using UploadStarlarkPackage prior to calling RunStarlarkPackage.
	// If true, then the package will be cloned from GitHub before execution starts
	ClonePackage *bool `protobuf:"varint,8,opt,name=clone_package,json=clonePackage,proto3,oneof" json:"clone_package,omitempty"`
	// The relative main file filepath, the default value is the "main.star" file in the root of a package
	RelativePathToMainFile string `protobuf:"bytes,9,opt,name=relative_path_to_main_file,json=relativePathToMainFile,proto3" json:"relative_path_to_main_file,omitempty"`
	// The name of the main function, the default value is "run"
	MainFunctionName     string                `protobuf:"bytes,10,opt,name=main_function_name,json=mainFunctionName,proto3" json:"main_function_name,omitempty"`
	ExperimentalFeatures []KurtosisFeatureFlag `protobuf:"varint,11,rep,packed,name=experimental_features,json=experimentalFeatures,proto3,enum=api_container_api.KurtosisFeatureFlag" json:"experimental_features,omitempty"`
	// Defaults to empty
	CloudInstanceId *string `protobuf:"bytes,12,opt,name=cloud_instance_id,json=cloudInstanceId,proto3,oneof" json:"cloud_instance_id,omitempty"`
	// Defaults to empty
	CloudUserId *string `protobuf:"bytes,13,opt,name=cloud_user_id,json=cloudUserId,proto3,oneof" json:"cloud_user_id,omitempty"`
	// Defaults to empty
	ImageDownloadMode *ImageDownloadMode `protobuf:"varint,14,opt,name=image_download_mode,json=imageDownloadMode,proto3,enum=api_container_api.ImageDownloadMode,oneof" json:"image_download_mode,omitempty"`
}

func (x *RunStarlarkPackageArgs) Reset() {
	*x = RunStarlarkPackageArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunStarlarkPackageArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunStarlarkPackageArgs) ProtoMessage() {}

func (x *RunStarlarkPackageArgs) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunStarlarkPackageArgs.ProtoReflect.Descriptor instead.
func (*RunStarlarkPackageArgs) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{4}
}

func (x *RunStarlarkPackageArgs) GetPackageId() string {
	if x != nil {
		return x.PackageId
	}
	return ""
}

func (m *RunStarlarkPackageArgs) GetStarlarkPackageContent() isRunStarlarkPackageArgs_StarlarkPackageContent {
	if m != nil {
		return m.StarlarkPackageContent
	}
	return nil
}

func (x *RunStarlarkPackageArgs) GetLocal() []byte {
	if x, ok := x.GetStarlarkPackageContent().(*RunStarlarkPackageArgs_Local); ok {
		return x.Local
	}
	return nil
}

func (x *RunStarlarkPackageArgs) GetRemote() bool {
	if x, ok := x.GetStarlarkPackageContent().(*RunStarlarkPackageArgs_Remote); ok {
		return x.Remote
	}
	return false
}

func (x *RunStarlarkPackageArgs) GetSerializedParams() string {
	if x != nil {
		return x.SerializedParams
	}
	return ""
}

func (x *RunStarlarkPackageArgs) GetDryRun() bool {
	if x != nil && x.DryRun != nil {
		return *x.DryRun
	}
	return false
}

func (x *RunStarlarkPackageArgs) GetParallelism() int32 {
	if x != nil && x.Parallelism != nil {
		return *x.Parallelism
	}
	return 0
}

func (x *RunStarlarkPackageArgs) GetClonePackage() bool {
	if x != nil && x.ClonePackage != nil {
		return *x.ClonePackage
	}
	return false
}

func (x *RunStarlarkPackageArgs) GetRelativePathToMainFile() string {
	if x != nil {
		return x.RelativePathToMainFile
	}
	return ""
}

func (x *RunStarlarkPackageArgs) GetMainFunctionName() string {
	if x != nil {
		return x.MainFunctionName
	}
	return ""
}

func (x *RunStarlarkPackageArgs) GetExperimentalFeatures() []KurtosisFeatureFlag {
	if x != nil {
		return x.ExperimentalFeatures
	}
	return nil
}

func (x *RunStarlarkPackageArgs) GetCloudInstanceId() string {
	if x != nil && x.CloudInstanceId != nil {
		return *x.CloudInstanceId
	}
	return ""
}

func (x *RunStarlarkPackageArgs) GetCloudUserId() string {
	if x != nil && x.CloudUserId != nil {
		return *x.CloudUserId
	}
	return ""
}

func (x *RunStarlarkPackageArgs) GetImageDownloadMode() ImageDownloadMode {
	if x != nil && x.ImageDownloadMode != nil {
		return *x.ImageDownloadMode
	}
	return ImageDownloadMode_always
}

type isRunStarlarkPackageArgs_StarlarkPackageContent interface {
	isRunStarlarkPackageArgs_StarlarkPackageContent()
}

type RunStarlarkPackageArgs_Local struct {
	Local []byte `protobuf:"bytes,3,opt,name=local,proto3,oneof"` // the payload of the local module
}

type RunStarlarkPackageArgs_Remote struct {
	Remote bool `protobuf:"varint,4,opt,name=remote,proto3,oneof"` // just a flag to indicate the module must be cloned inside the API
}

func (*RunStarlarkPackageArgs_Local) isRunStarlarkPackageArgs_StarlarkPackageContent() {}

func (*RunStarlarkPackageArgs_Remote) isRunStarlarkPackageArgs_StarlarkPackageContent() {}

// ==============================================================================================
//
//	Starlark Execution Response
//
// ==============================================================================================
type StarlarkRunResponseLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RunResponseLine:
	//
	//	*StarlarkRunResponseLine_Instruction
	//	*StarlarkRunResponseLine_Error
	//	*StarlarkRunResponseLine_ProgressInfo
	//	*StarlarkRunResponseLine_InstructionResult
	//	*StarlarkRunResponseLine_RunFinishedEvent
	//	*StarlarkRunResponseLine_Warning
	//	*StarlarkRunResponseLine_Info
	RunResponseLine isStarlarkRunResponseLine_RunResponseLine `protobuf_oneof:"run_response_line"`
}

func (x *StarlarkRunResponseLine) Reset() {
	*x = StarlarkRunResponseLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarlarkRunResponseLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarlarkRunResponseLine) ProtoMessage() {}

func (x *StarlarkRunResponseLine) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarlarkRunResponseLine.ProtoReflect.Descriptor instead.
func (*StarlarkRunResponseLine) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{5}
}

func (m *StarlarkRunResponseLine) GetRunResponseLine() isStarlarkRunResponseLine_RunResponseLine {
	if m != nil {
		return m.RunResponseLine
	}
	return nil
}

func (x *StarlarkRunResponseLine) GetInstruction() *StarlarkInstruction {
	if x, ok := x.GetRunResponseLine().(*StarlarkRunResponseLine_Instruction); ok {
		return x.Instruction
	}
	return nil
}

func (x *StarlarkRunResponseLine) GetError() *StarlarkError {
	if x, ok := x.GetRunResponseLine().(*StarlarkRunResponseLine_Error); ok {
		return x.Error
	}
	return nil
}

func (x *StarlarkRunResponseLine) GetProgressInfo() *StarlarkRunProgress {
	if x, ok := x.GetRunResponseLine().(*StarlarkRunResponseLine_ProgressInfo); ok {
		return x.ProgressInfo
	}
	return nil
}

func (x *StarlarkRunResponseLine) GetInstructionResult() *StarlarkInstructionResult {
	if x, ok := x.GetRunResponseLine().(*StarlarkRunResponseLine_InstructionResult); ok {
		return x.InstructionResult
	}
	return nil
}

func (x *StarlarkRunResponseLine) GetRunFinishedEvent() *StarlarkRunFinishedEvent {
	if x, ok := x.GetRunResponseLine().(*StarlarkRunResponseLine_RunFinishedEvent); ok {
		return x.RunFinishedEvent
	}
	return nil
}

func (x *StarlarkRunResponseLine) GetWarning() *StarlarkWarning {
	if x, ok := x.GetRunResponseLine().(*StarlarkRunResponseLine_Warning); ok {
		return x.Warning
	}
	return nil
}

func (x *StarlarkRunResponseLine) GetInfo() *StarlarkInfo {
	if x, ok := x.GetRunResponseLine().(*StarlarkRunResponseLine_Info); ok {
		return x.Info
	}
	return nil
}

type isStarlarkRunResponseLine_RunResponseLine interface {
	isStarlarkRunResponseLine_RunResponseLine()
}

type StarlarkRunResponseLine_Instruction struct {
	Instruction *StarlarkInstruction `protobuf:"bytes,1,opt,name=instruction,proto3,oneof"`
}

type StarlarkRunResponseLine_Error struct {
	Error *StarlarkError `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

type StarlarkRunResponseLine_ProgressInfo struct {
	ProgressInfo *StarlarkRunProgress `protobuf:"bytes,3,opt,name=progress_info,json=progressInfo,proto3,oneof"`
}

type StarlarkRunResponseLine_InstructionResult struct {
	InstructionResult *StarlarkInstructionResult `protobuf:"bytes,4,opt,name=instruction_result,json=instructionResult,proto3,oneof"`
}

type StarlarkRunResponseLine_RunFinishedEvent struct {
	RunFinishedEvent *StarlarkRunFinishedEvent `protobuf:"bytes,5,opt,name=run_finished_event,json=runFinishedEvent,proto3,oneof"`
}

type StarlarkRunResponseLine_Warning struct {
	Warning *StarlarkWarning `protobuf:"bytes,6,opt,name=warning,proto3,oneof"`
}

type StarlarkRunResponseLine_Info struct {
	Info *StarlarkInfo `protobuf:"bytes,7,opt,name=info,proto3,oneof"`
}

func (*StarlarkRunResponseLine_Instruction) isStarlarkRunResponseLine_RunResponseLine() {}

func (*StarlarkRunResponseLine_Error) isStarlarkRunResponseLine_RunResponseLine() {}

func (*StarlarkRunResponseLine_ProgressInfo) isStarlarkRunResponseLine_RunResponseLine() {}

func (*StarlarkRunResponseLine_InstructionResult) isStarlarkRunResponseLine_RunResponseLine() {}

func (*StarlarkRunResponseLine_RunFinishedEvent) isStarlarkRunResponseLine_RunResponseLine() {}

func (*StarlarkRunResponseLine_Warning) isStarlarkRunResponseLine_RunResponseLine() {}

func (*StarlarkRunResponseLine_Info) isStarlarkRunResponseLine_RunResponseLine() {}

type StarlarkInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InfoMessage string `protobuf:"bytes,1,opt,name=info_message,json=infoMessage,proto3" json:"info_message,omitempty"`
}

func (x *StarlarkInfo) Reset() {
	*x = StarlarkInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarlarkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarlarkInfo) ProtoMessage() {}

func (x *StarlarkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarlarkInfo.ProtoReflect.Descriptor instead.
func (*StarlarkInfo) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{6}
}

func (x *StarlarkInfo) GetInfoMessage() string {
	if x != nil {
		return x.InfoMessage
	}
	return ""
}

type StarlarkWarning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WarningMessage string `protobuf:"bytes,1,opt,name=warning_message,json=warningMessage,proto3" json:"warning_message,omitempty"`
}

func (x *StarlarkWarning) Reset() {
	*x = StarlarkWarning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarlarkWarning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarlarkWarning) ProtoMessage() {}

func (x *StarlarkWarning) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarlarkWarning.ProtoReflect.Descriptor instead.
func (*StarlarkWarning) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{7}
}

func (x *StarlarkWarning) GetWarningMessage() string {
	if x != nil {
		return x.WarningMessage
	}
	return ""
}

type StarlarkInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position              *StarlarkInstructionPosition `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	InstructionName       string                       `protobuf:"bytes,2,opt,name=instruction_name,json=instructionName,proto3" json:"instruction_name,omitempty"`
	Arguments             []*StarlarkInstructionArg    `protobuf:"bytes,3,rep,name=arguments,proto3" json:"arguments,omitempty"`
	ExecutableInstruction string                       `protobuf:"bytes,4,opt,name=executable_instruction,json=executableInstruction,proto3" json:"executable_instruction,omitempty"`
	IsSkipped             bool                         `protobuf:"varint,5,opt,name=is_skipped,json=isSkipped,proto3" json:"is_skipped,omitempty"`
}

func (x *StarlarkInstruction) Reset() {
	*x = StarlarkInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarlarkInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarlarkInstruction) ProtoMessage() {}

func (x *StarlarkInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarlarkInstruction.ProtoReflect.Descriptor instead.
func (*StarlarkInstruction) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{8}
}

func (x *StarlarkInstruction) GetPosition() *StarlarkInstructionPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *StarlarkInstruction) GetInstructionName() string {
	if x != nil {
		return x.InstructionName
	}
	return ""
}

func (x *StarlarkInstruction) GetArguments() []*StarlarkInstructionArg {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *StarlarkInstruction) GetExecutableInstruction() string {
	if x != nil {
		return x.ExecutableInstruction
	}
	return ""
}

func (x *StarlarkInstruction) GetIsSkipped() bool {
	if x != nil {
		return x.IsSkipped
	}
	return false
}

type StarlarkInstructionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerializedInstructionResult string `protobuf:"bytes,1,opt,name=serialized_instruction_result,json=serializedInstructionResult,proto3" json:"serialized_instruction_result,omitempty"`
}

func (x *StarlarkInstructionResult) Reset() {
	*x = StarlarkInstructionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarlarkInstructionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarlarkInstructionResult) ProtoMessage() {}

func (x *StarlarkInstructionResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarlarkInstructionResult.ProtoReflect.Descriptor instead.
func (*StarlarkInstructionResult) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{9}
}

func (x *StarlarkInstructionResult) GetSerializedInstructionResult() string {
	if x != nil {
		return x.SerializedInstructionResult
	}
	return ""
}

type StarlarkInstructionArg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerializedArgValue string  `protobuf:"bytes,1,opt,name=serialized_arg_value,json=serializedArgValue,proto3" json:"serialized_arg_value,omitempty"`
	ArgName            *string `protobuf:"bytes,2,opt,name=arg_name,json=argName,proto3,oneof" json:"arg_name,omitempty"`
	IsRepresentative   bool    `protobuf:"varint,3,opt,name=is_representative,json=isRepresentative,proto3" json:"is_representative,omitempty"`
}

func (x *StarlarkInstructionArg) Reset() {
	*x = StarlarkInstructionArg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarlarkInstructionArg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarlarkInstructionArg) ProtoMessage() {}

func (x *StarlarkInstructionArg) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarlarkInstructionArg.ProtoReflect.Descriptor instead.
func (*StarlarkInstructionArg) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{10}
}

func (x *StarlarkInstructionArg) GetSerializedArgValue() string {
	if x != nil {
		return x.SerializedArgValue
	}
	return ""
}

func (x *StarlarkInstructionArg) GetArgName() string {
	if x != nil && x.ArgName != nil {
		return *x.ArgName
	}
	return ""
}

func (x *StarlarkInstructionArg) GetIsRepresentative() bool {
	if x != nil {
		return x.IsRepresentative
	}
	return false
}

type StarlarkInstructionPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Line     int32  `protobuf:"varint,2,opt,name=line,proto3" json:"line,omitempty"`
	Column   int32  `protobuf:"varint,3,opt,name=column,proto3" json:"column,omitempty"`
}

func (x *StarlarkInstructionPosition) Reset() {
	*x = StarlarkInstructionPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarlarkInstructionPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarlarkInstructionPosition) ProtoMessage() {}

func (x *StarlarkInstructionPosition) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarlarkInstructionPosition.ProtoReflect.Descriptor instead.
func (*StarlarkInstructionPosition) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{11}
}

func (x *StarlarkInstructionPosition) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StarlarkInstructionPosition) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *StarlarkInstructionPosition) GetColumn() int32 {
	if x != nil {
		return x.Column
	}
	return 0
}

type StarlarkError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Error:
	//
	//	*StarlarkError_InterpretationError
	//	*StarlarkError_ValidationError
	//	*StarlarkError_ExecutionError
	Error isStarlarkError_Error `protobuf_oneof:"error"`
}

func (x *StarlarkError) Reset() {
	*x = StarlarkError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarlarkError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarlarkError) ProtoMessage() {}

func (x *StarlarkError) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarlarkError.ProtoReflect.Descriptor instead.
func (*StarlarkError) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{12}
}

func (m *StarlarkError) GetError() isStarlarkError_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (x *StarlarkError) GetInterpretationError() *StarlarkInterpretationError {
	if x, ok := x.GetError().(*StarlarkError_InterpretationError); ok {
		return x.InterpretationError
	}
	return nil
}

func (x *StarlarkError) GetValidationError() *StarlarkValidationError {
	if x, ok := x.GetError().(*StarlarkError_ValidationError); ok {
		return x.ValidationError
	}
	return nil
}

func (x *StarlarkError) GetExecutionError() *StarlarkExecutionError {
	if x, ok := x.GetError().(*StarlarkError_ExecutionError); ok {
		return x.ExecutionError
	}
	return nil
}

type isStarlarkError_Error interface {
	isStarlarkError_Error()
}

type StarlarkError_InterpretationError struct {
	InterpretationError *StarlarkInterpretationError `protobuf:"bytes,1,opt,name=interpretation_error,json=interpretationError,proto3,oneof"`
}

type StarlarkError_ValidationError struct {
	ValidationError *StarlarkValidationError `protobuf:"bytes,2,opt,name=validation_error,json=validationError,proto3,oneof"`
}

type StarlarkError_ExecutionError struct {
	ExecutionError *StarlarkExecutionError `protobuf:"bytes,3,opt,name=execution_error,json=executionError,proto3,oneof"`
}

func (*StarlarkError_InterpretationError) isStarlarkError_Error() {}

func (*StarlarkError_ValidationError) isStarlarkError_Error() {}

func (*StarlarkError_ExecutionError) isStarlarkError_Error() {}

type StarlarkInterpretationError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorMessage string `protobuf:"bytes,1,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *StarlarkInterpretationError) Reset() {
	*x = StarlarkInterpretationError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarlarkInterpretationError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarlarkInterpretationError) ProtoMessage() {}

func (x *StarlarkInterpretationError) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarlarkInterpretationError.ProtoReflect.Descriptor instead.
func (*StarlarkInterpretationError) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{13}
}

func (x *StarlarkInterpretationError) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type StarlarkValidationError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorMessage string `protobuf:"bytes,1,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *StarlarkValidationError) Reset() {
	*x = StarlarkValidationError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarlarkValidationError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarlarkValidationError) ProtoMessage() {}

func (x *StarlarkValidationError) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarlarkValidationError.ProtoReflect.Descriptor instead.
func (*StarlarkValidationError) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{14}
}

func (x *StarlarkValidationError) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type StarlarkExecutionError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorMessage string `protobuf:"bytes,1,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *StarlarkExecutionError) Reset() {
	*x = StarlarkExecutionError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarlarkExecutionError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarlarkExecutionError) ProtoMessage() {}

func (x *StarlarkExecutionError) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarlarkExecutionError.ProtoReflect.Descriptor instead.
func (*StarlarkExecutionError) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{15}
}

func (x *StarlarkExecutionError) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type StarlarkRunProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentStepInfo   []string `protobuf:"bytes,1,rep,name=current_step_info,json=currentStepInfo,proto3" json:"current_step_info,omitempty"`
	TotalSteps        uint32   `protobuf:"varint,2,opt,name=total_steps,json=totalSteps,proto3" json:"total_steps,omitempty"`
	CurrentStepNumber uint32   `protobuf:"varint,3,opt,name=current_step_number,json=currentStepNumber,proto3" json:"current_step_number,omitempty"`
}

func (x *StarlarkRunProgress) Reset() {
	*x = StarlarkRunProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarlarkRunProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarlarkRunProgress) ProtoMessage() {}

func (x *StarlarkRunProgress) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarlarkRunProgress.ProtoReflect.Descriptor instead.
func (*StarlarkRunProgress) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{16}
}

func (x *StarlarkRunProgress) GetCurrentStepInfo() []string {
	if x != nil {
		return x.CurrentStepInfo
	}
	return nil
}

func (x *StarlarkRunProgress) GetTotalSteps() uint32 {
	if x != nil {
		return x.TotalSteps
	}
	return 0
}

func (x *StarlarkRunProgress) GetCurrentStepNumber() uint32 {
	if x != nil {
		return x.CurrentStepNumber
	}
	return 0
}

type StarlarkRunFinishedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsRunSuccessful  bool    `protobuf:"varint,1,opt,name=is_run_successful,json=isRunSuccessful,proto3" json:"is_run_successful,omitempty"`
	SerializedOutput *string `protobuf:"bytes,2,opt,name=serialized_output,json=serializedOutput,proto3,oneof" json:"serialized_output,omitempty"`
}

func (x *StarlarkRunFinishedEvent) Reset() {
	*x = StarlarkRunFinishedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarlarkRunFinishedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarlarkRunFinishedEvent) ProtoMessage() {}

func (x *StarlarkRunFinishedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarlarkRunFinishedEvent.ProtoReflect.Descriptor instead.
func (*StarlarkRunFinishedEvent) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{17}
}

func (x *StarlarkRunFinishedEvent) GetIsRunSuccessful() bool {
	if x != nil {
		return x.IsRunSuccessful
	}
	return false
}

func (x *StarlarkRunFinishedEvent) GetSerializedOutput() string {
	if x != nil && x.SerializedOutput != nil {
		return *x.SerializedOutput
	}
	return ""
}

// ==============================================================================================
//
//	Get Services
//
// ==============================================================================================
type GetServicesArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// "Set" of identifiers to fetch info for
	// If empty, will fetch info for all services
	ServiceIdentifiers map[string]bool `protobuf:"bytes,1,rep,name=service_identifiers,json=serviceIdentifiers,proto3" json:"service_identifiers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GetServicesArgs) Reset() {
	*x = GetServicesArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServicesArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServicesArgs) ProtoMessage() {}

func (x *GetServicesArgs) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServicesArgs.ProtoReflect.Descriptor instead.
func (*GetServicesArgs) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{18}
}

func (x *GetServicesArgs) GetServiceIdentifiers() map[string]bool {
	if x != nil {
		return x.ServiceIdentifiers
	}
	return nil
}

type GetServicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// "Set" from identifiers -> info about the service
	ServiceInfo map[string]*ServiceInfo `protobuf:"bytes,1,rep,name=service_info,json=serviceInfo,proto3" json:"service_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetServicesResponse) Reset() {
	*x = GetServicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServicesResponse) ProtoMessage() {}

func (x *GetServicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServicesResponse.ProtoReflect.Descriptor instead.
func (*GetServicesResponse) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{19}
}

func (x *GetServicesResponse) GetServiceInfo() map[string]*ServiceInfo {
	if x != nil {
		return x.ServiceInfo
	}
	return nil
}

// An service identifier is a collection of uuid, name and shortened uuid
type ServiceIdentifiers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the service
	ServiceUuid string `protobuf:"bytes,1,opt,name=service_uuid,json=serviceUuid,proto3" json:"service_uuid,omitempty"`
	// Name of the service
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The shortened uuid of the service
	ShortenedUuid string `protobuf:"bytes,3,opt,name=shortened_uuid,json=shortenedUuid,proto3" json:"shortened_uuid,omitempty"`
}

func (x *ServiceIdentifiers) Reset() {
	*x = ServiceIdentifiers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceIdentifiers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceIdentifiers) ProtoMessage() {}

func (x *ServiceIdentifiers) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceIdentifiers.ProtoReflect.Descriptor instead.
func (*ServiceIdentifiers) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{20}
}

func (x *ServiceIdentifiers) GetServiceUuid() string {
	if x != nil {
		return x.ServiceUuid
	}
	return ""
}

func (x *ServiceIdentifiers) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceIdentifiers) GetShortenedUuid() string {
	if x != nil {
		return x.ShortenedUuid
	}
	return ""
}

type GetExistingAndHistoricalServiceIdentifiersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllIdentifiers []*ServiceIdentifiers `protobuf:"bytes,1,rep,name=allIdentifiers,proto3" json:"allIdentifiers,omitempty"`
}

func (x *GetExistingAndHistoricalServiceIdentifiersResponse) Reset() {
	*x = GetExistingAndHistoricalServiceIdentifiersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExistingAndHistoricalServiceIdentifiersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExistingAndHistoricalServiceIdentifiersResponse) ProtoMessage() {}

func (x *GetExistingAndHistoricalServiceIdentifiersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExistingAndHistoricalServiceIdentifiersResponse.ProtoReflect.Descriptor instead.
func (*GetExistingAndHistoricalServiceIdentifiersResponse) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{21}
}

func (x *GetExistingAndHistoricalServiceIdentifiersResponse) GetAllIdentifiers() []*ServiceIdentifiers {
	if x != nil {
		return x.AllIdentifiers
	}
	return nil
}

// ==============================================================================================
//
//	Exec Command
//
// ==============================================================================================
type ExecCommandArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The service identifier of the container that the command should be executed in
	ServiceIdentifier string   `protobuf:"bytes,1,opt,name=service_identifier,json=serviceIdentifier,proto3" json:"service_identifier,omitempty"`
	CommandArgs       []string `protobuf:"bytes,2,rep,name=command_args,json=commandArgs,proto3" json:"command_args,omitempty"`
}

func (x *ExecCommandArgs) Reset() {
	*x = ExecCommandArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecCommandArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecCommandArgs) ProtoMessage() {}

func (x *ExecCommandArgs) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecCommandArgs.ProtoReflect.Descriptor instead.
func (*ExecCommandArgs) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{22}
}

func (x *ExecCommandArgs) GetServiceIdentifier() string {
	if x != nil {
		return x.ServiceIdentifier
	}
	return ""
}

func (x *ExecCommandArgs) GetCommandArgs() []string {
	if x != nil {
		return x.CommandArgs
	}
	return nil
}

type ExecCommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExitCode int32 `protobuf:"varint,1,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	// Assumes UTF-8 encoding
	LogOutput string `protobuf:"bytes,2,opt,name=log_output,json=logOutput,proto3" json:"log_output,omitempty"`
}

func (x *ExecCommandResponse) Reset() {
	*x = ExecCommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecCommandResponse) ProtoMessage() {}

func (x *ExecCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecCommandResponse.ProtoReflect.Descriptor instead.
func (*ExecCommandResponse) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{23}
}

func (x *ExecCommandResponse) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *ExecCommandResponse) GetLogOutput() string {
	if x != nil {
		return x.LogOutput
	}
	return ""
}

// ==============================================================================================
//
//	Wait For HTTP Get Endpoint Availability
//
// ==============================================================================================
type WaitForHttpGetEndpointAvailabilityArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of the service to check.
	ServiceIdentifier string `protobuf:"bytes,1,opt,name=service_identifier,json=serviceIdentifier,proto3" json:"service_identifier,omitempty"`
	// The port of the service to check. For instance 8080
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// The path of the service to check. It mustn't start with the first slash. For instance `service/health`
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// The number of milliseconds to wait until executing the first HTTP call
	InitialDelayMilliseconds uint32 `protobuf:"varint,4,opt,name=initial_delay_milliseconds,json=initialDelayMilliseconds,proto3" json:"initial_delay_milliseconds,omitempty"`
	// Max number of HTTP call attempts that this will execute until giving up and returning an error
	Retries uint32 `protobuf:"varint,5,opt,name=retries,proto3" json:"retries,omitempty"`
	// Number of milliseconds to wait between retries
	RetriesDelayMilliseconds uint32 `protobuf:"varint,6,opt,name=retries_delay_milliseconds,json=retriesDelayMilliseconds,proto3" json:"retries_delay_milliseconds,omitempty"`
	// If the endpoint returns this value, the service will be marked as available (e.g. Hello World).
	BodyText string `protobuf:"bytes,7,opt,name=body_text,json=bodyText,proto3" json:"body_text,omitempty"`
}

func (x *WaitForHttpGetEndpointAvailabilityArgs) Reset() {
	*x = WaitForHttpGetEndpointAvailabilityArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForHttpGetEndpointAvailabilityArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForHttpGetEndpointAvailabilityArgs) ProtoMessage() {}

func (x *WaitForHttpGetEndpointAvailabilityArgs) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForHttpGetEndpointAvailabilityArgs.ProtoReflect.Descriptor instead.
func (*WaitForHttpGetEndpointAvailabilityArgs) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{24}
}

func (x *WaitForHttpGetEndpointAvailabilityArgs) GetServiceIdentifier() string {
	if x != nil {
		return x.ServiceIdentifier
	}
	return ""
}

func (x *WaitForHttpGetEndpointAvailabilityArgs) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *WaitForHttpGetEndpointAvailabilityArgs) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *WaitForHttpGetEndpointAvailabilityArgs) GetInitialDelayMilliseconds() uint32 {
	if x != nil {
		return x.InitialDelayMilliseconds
	}
	return 0
}

func (x *WaitForHttpGetEndpointAvailabilityArgs) GetRetries() uint32 {
	if x != nil {
		return x.Retries
	}
	return 0
}

func (x *WaitForHttpGetEndpointAvailabilityArgs) GetRetriesDelayMilliseconds() uint32 {
	if x != nil {
		return x.RetriesDelayMilliseconds
	}
	return 0
}

func (x *WaitForHttpGetEndpointAvailabilityArgs) GetBodyText() string {
	if x != nil {
		return x.BodyText
	}
	return ""
}

// ==============================================================================================
//
//	Wait For HTTP Post Endpoint Availability
//
// ==============================================================================================
type WaitForHttpPostEndpointAvailabilityArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of the service to check.
	ServiceIdentifier string `protobuf:"bytes,1,opt,name=service_identifier,json=serviceIdentifier,proto3" json:"service_identifier,omitempty"`
	// The port of the service to check. For instance 8080
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// The path of the service to check. It mustn't start with the first slash. For instance `service/health`
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// The content of the request body.
	RequestBody string `protobuf:"bytes,4,opt,name=request_body,json=requestBody,proto3" json:"request_body,omitempty"`
	// The number of milliseconds to wait until executing the first HTTP call
	InitialDelayMilliseconds uint32 `protobuf:"varint,5,opt,name=initial_delay_milliseconds,json=initialDelayMilliseconds,proto3" json:"initial_delay_milliseconds,omitempty"`
	// Max number of HTTP call attempts that this will execute until giving up and returning an error
	Retries uint32 `protobuf:"varint,6,opt,name=retries,proto3" json:"retries,omitempty"`
	// Number of milliseconds to wait between retries
	RetriesDelayMilliseconds uint32 `protobuf:"varint,7,opt,name=retries_delay_milliseconds,json=retriesDelayMilliseconds,proto3" json:"retries_delay_milliseconds,omitempty"`
	// If the endpoint returns this value, the service will be marked as available (e.g. Hello World).
	BodyText string `protobuf:"bytes,8,opt,name=body_text,json=bodyText,proto3" json:"body_text,omitempty"`
}

func (x *WaitForHttpPostEndpointAvailabilityArgs) Reset() {
	*x = WaitForHttpPostEndpointAvailabilityArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForHttpPostEndpointAvailabilityArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForHttpPostEndpointAvailabilityArgs) ProtoMessage() {}

func (x *WaitForHttpPostEndpointAvailabilityArgs) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForHttpPostEndpointAvailabilityArgs.ProtoReflect.Descriptor instead.
func (*WaitForHttpPostEndpointAvailabilityArgs) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{25}
}

func (x *WaitForHttpPostEndpointAvailabilityArgs) GetServiceIdentifier() string {
	if x != nil {
		return x.ServiceIdentifier
	}
	return ""
}

func (x *WaitForHttpPostEndpointAvailabilityArgs) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *WaitForHttpPostEndpointAvailabilityArgs) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *WaitForHttpPostEndpointAvailabilityArgs) GetRequestBody() string {
	if x != nil {
		return x.RequestBody
	}
	return ""
}

func (x *WaitForHttpPostEndpointAvailabilityArgs) GetInitialDelayMilliseconds() uint32 {
	if x != nil {
		return x.InitialDelayMilliseconds
	}
	return 0
}

func (x *WaitForHttpPostEndpointAvailabilityArgs) GetRetries() uint32 {
	if x != nil {
		return x.Retries
	}
	return 0
}

func (x *WaitForHttpPostEndpointAvailabilityArgs) GetRetriesDelayMilliseconds() uint32 {
	if x != nil {
		return x.RetriesDelayMilliseconds
	}
	return 0
}

func (x *WaitForHttpPostEndpointAvailabilityArgs) GetBodyText() string {
	if x != nil {
		return x.BodyText
	}
	return ""
}

// ==============================================================================================
//
//	Streamed Data Chunk
//
// ==============================================================================================
type StreamedDataChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Chunk of the overall files artifact bytes
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Hash of the PREVIOUS chunk, or empty string is this is the first chunk
	// Referencing the previous chunk via its hash allows Kurtosis to validate
	// the consistency of the data in case some chunk were not received
	PreviousChunkHash string `protobuf:"bytes,2,opt,name=previous_chunk_hash,json=previousChunkHash,proto3" json:"previous_chunk_hash,omitempty"`
	// Additional metadata about the item being streamed
	Metadata *DataChunkMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *StreamedDataChunk) Reset() {
	*x = StreamedDataChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamedDataChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamedDataChunk) ProtoMessage() {}

func (x *StreamedDataChunk) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamedDataChunk.ProtoReflect.Descriptor instead.
func (*StreamedDataChunk) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{26}
}

func (x *StreamedDataChunk) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *StreamedDataChunk) GetPreviousChunkHash() string {
	if x != nil {
		return x.PreviousChunkHash
	}
	return ""
}

func (x *StreamedDataChunk) GetMetadata() *DataChunkMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type DataChunkMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DataChunkMetadata) Reset() {
	*x = DataChunkMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataChunkMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataChunkMetadata) ProtoMessage() {}

func (x *DataChunkMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataChunkMetadata.ProtoReflect.Descriptor instead.
func (*DataChunkMetadata) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{27}
}

func (x *DataChunkMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// ==============================================================================================
//
//	Upload Files Artifact
//
// ==============================================================================================
type UploadFilesArtifactResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the files artifact, for use when referencing it in the future
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// UUID of the files artifact, for use when referencing it in the future
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UploadFilesArtifactResponse) Reset() {
	*x = UploadFilesArtifactResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadFilesArtifactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadFilesArtifactResponse) ProtoMessage() {}

func (x *UploadFilesArtifactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadFilesArtifactResponse.ProtoReflect.Descriptor instead.
func (*UploadFilesArtifactResponse) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{28}
}

func (x *UploadFilesArtifactResponse) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *UploadFilesArtifactResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// ==============================================================================================
//
//	Download Files Artifact
//
// ==============================================================================================
type DownloadFilesArtifactArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Files identifier to get bytes for
	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
}

func (x *DownloadFilesArtifactArgs) Reset() {
	*x = DownloadFilesArtifactArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadFilesArtifactArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadFilesArtifactArgs) ProtoMessage() {}

func (x *DownloadFilesArtifactArgs) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadFilesArtifactArgs.ProtoReflect.Descriptor instead.
func (*DownloadFilesArtifactArgs) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{29}
}

func (x *DownloadFilesArtifactArgs) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

// ==============================================================================================
//
//	Store Web Files Artifact
//
// ==============================================================================================
type StoreWebFilesArtifactArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL to download the artifact from
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// The name of the files artifact
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *StoreWebFilesArtifactArgs) Reset() {
	*x = StoreWebFilesArtifactArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreWebFilesArtifactArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreWebFilesArtifactArgs) ProtoMessage() {}

func (x *StoreWebFilesArtifactArgs) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreWebFilesArtifactArgs.ProtoReflect.Descriptor instead.
func (*StoreWebFilesArtifactArgs) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{30}
}

func (x *StoreWebFilesArtifactArgs) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *StoreWebFilesArtifactArgs) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type StoreWebFilesArtifactResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the files artifact, for use when referencing it in the future
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *StoreWebFilesArtifactResponse) Reset() {
	*x = StoreWebFilesArtifactResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreWebFilesArtifactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreWebFilesArtifactResponse) ProtoMessage() {}

func (x *StoreWebFilesArtifactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreWebFilesArtifactResponse.ProtoReflect.Descriptor instead.
func (*StoreWebFilesArtifactResponse) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{31}
}

func (x *StoreWebFilesArtifactResponse) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type StoreFilesArtifactFromServiceArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier that will be used to identify the service where the source files will be copied from
	ServiceIdentifier string `protobuf:"bytes,1,opt,name=service_identifier,json=serviceIdentifier,proto3" json:"service_identifier,omitempty"`
	// The absolute source path where the source files will be copied from
	SourcePath string `protobuf:"bytes,2,opt,name=source_path,json=sourcePath,proto3" json:"source_path,omitempty"`
	// The name of the files artifact
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *StoreFilesArtifactFromServiceArgs) Reset() {
	*x = StoreFilesArtifactFromServiceArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreFilesArtifactFromServiceArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreFilesArtifactFromServiceArgs) ProtoMessage() {}

func (x *StoreFilesArtifactFromServiceArgs) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreFilesArtifactFromServiceArgs.ProtoReflect.Descriptor instead.
func (*StoreFilesArtifactFromServiceArgs) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{32}
}

func (x *StoreFilesArtifactFromServiceArgs) GetServiceIdentifier() string {
	if x != nil {
		return x.ServiceIdentifier
	}
	return ""
}

func (x *StoreFilesArtifactFromServiceArgs) GetSourcePath() string {
	if x != nil {
		return x.SourcePath
	}
	return ""
}

func (x *StoreFilesArtifactFromServiceArgs) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type StoreFilesArtifactFromServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the files artifact, for use when referencing it in the future
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *StoreFilesArtifactFromServiceResponse) Reset() {
	*x = StoreFilesArtifactFromServiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreFilesArtifactFromServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreFilesArtifactFromServiceResponse) ProtoMessage() {}

func (x *StoreFilesArtifactFromServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreFilesArtifactFromServiceResponse.ProtoReflect.Descriptor instead.
func (*StoreFilesArtifactFromServiceResponse) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{33}
}

func (x *StoreFilesArtifactFromServiceResponse) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type FilesArtifactNameAndUuid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A string representing the name of the file
	FileName string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
	// A string representing the uuid of the file
	FileUuid string `protobuf:"bytes,2,opt,name=fileUuid,proto3" json:"fileUuid,omitempty"`
}

func (x *FilesArtifactNameAndUuid) Reset() {
	*x = FilesArtifactNameAndUuid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesArtifactNameAndUuid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesArtifactNameAndUuid) ProtoMessage() {}

func (x *FilesArtifactNameAndUuid) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesArtifactNameAndUuid.ProtoReflect.Descriptor instead.
func (*FilesArtifactNameAndUuid) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{34}
}

func (x *FilesArtifactNameAndUuid) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FilesArtifactNameAndUuid) GetFileUuid() string {
	if x != nil {
		return x.FileUuid
	}
	return ""
}

type ListFilesArtifactNamesAndUuidsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileNamesAndUuids []*FilesArtifactNameAndUuid `protobuf:"bytes,1,rep,name=file_names_and_uuids,json=fileNamesAndUuids,proto3" json:"file_names_and_uuids,omitempty"`
}

func (x *ListFilesArtifactNamesAndUuidsResponse) Reset() {
	*x = ListFilesArtifactNamesAndUuidsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFilesArtifactNamesAndUuidsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFilesArtifactNamesAndUuidsResponse) ProtoMessage() {}

func (x *ListFilesArtifactNamesAndUuidsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFilesArtifactNamesAndUuidsResponse.ProtoReflect.Descriptor instead.
func (*ListFilesArtifactNamesAndUuidsResponse) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{35}
}

func (x *ListFilesArtifactNamesAndUuidsResponse) GetFileNamesAndUuids() []*FilesArtifactNameAndUuid {
	if x != nil {
		return x.FileNamesAndUuids
	}
	return nil
}

type InspectFilesArtifactContentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileNamesAndUuid *FilesArtifactNameAndUuid `protobuf:"bytes,1,opt,name=file_names_and_uuid,json=fileNamesAndUuid,proto3" json:"file_names_and_uuid,omitempty"`
}

func (x *InspectFilesArtifactContentsRequest) Reset() {
	*x = InspectFilesArtifactContentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectFilesArtifactContentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectFilesArtifactContentsRequest) ProtoMessage() {}

func (x *InspectFilesArtifactContentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectFilesArtifactContentsRequest.ProtoReflect.Descriptor instead.
func (*InspectFilesArtifactContentsRequest) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{36}
}

func (x *InspectFilesArtifactContentsRequest) GetFileNamesAndUuid() *FilesArtifactNameAndUuid {
	if x != nil {
		return x.FileNamesAndUuid
	}
	return nil
}

type InspectFilesArtifactContentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileDescriptions []*FileArtifactContentsFileDescription `protobuf:"bytes,1,rep,name=file_descriptions,json=fileDescriptions,proto3" json:"file_descriptions,omitempty"`
}

func (x *InspectFilesArtifactContentsResponse) Reset() {
	*x = InspectFilesArtifactContentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectFilesArtifactContentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectFilesArtifactContentsResponse) ProtoMessage() {}

func (x *InspectFilesArtifactContentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectFilesArtifactContentsResponse.ProtoReflect.Descriptor instead.
func (*InspectFilesArtifactContentsResponse) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{37}
}

func (x *InspectFilesArtifactContentsResponse) GetFileDescriptions() []*FileArtifactContentsFileDescription {
	if x != nil {
		return x.FileDescriptions
	}
	return nil
}

type FileArtifactContentsFileDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path relative to the file artifact
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Size of the file, in bytes
	Size uint64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	// A bit of text content, if the file allows (similar to UNIX's 'head')
	TextPreview *string `protobuf:"bytes,3,opt,name=text_preview,json=textPreview,proto3,oneof" json:"text_preview,omitempty"`
}

func (x *FileArtifactContentsFileDescription) Reset() {
	*x = FileArtifactContentsFileDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileArtifactContentsFileDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileArtifactContentsFileDescription) ProtoMessage() {}

func (x *FileArtifactContentsFileDescription) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileArtifactContentsFileDescription.ProtoReflect.Descriptor instead.
func (*FileArtifactContentsFileDescription) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{38}
}

func (x *FileArtifactContentsFileDescription) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileArtifactContentsFileDescription) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileArtifactContentsFileDescription) GetTextPreview() string {
	if x != nil && x.TextPreview != nil {
		return *x.TextPreview
	}
	return ""
}

type ConnectServicesArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connect Connect `protobuf:"varint,1,opt,name=connect,proto3,enum=api_container_api.Connect" json:"connect,omitempty"`
}

func (x *ConnectServicesArgs) Reset() {
	*x = ConnectServicesArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectServicesArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectServicesArgs) ProtoMessage() {}

func (x *ConnectServicesArgs) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectServicesArgs.ProtoReflect.Descriptor instead.
func (*ConnectServicesArgs) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{39}
}

func (x *ConnectServicesArgs) GetConnect() Connect {
	if x != nil {
		return x.Connect
	}
	return Connect_CONNECT
}

type ConnectServicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConnectServicesResponse) Reset() {
	*x = ConnectServicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectServicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectServicesResponse) ProtoMessage() {}

func (x *ConnectServicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectServicesResponse.ProtoReflect.Descriptor instead.
func (*ConnectServicesResponse) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{40}
}

type GetStarlarkRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageId              string                `protobuf:"bytes,1,opt,name=package_id,json=packageId,proto3" json:"package_id,omitempty"`
	SerializedScript       string                `protobuf:"bytes,2,opt,name=serialized_script,json=serializedScript,proto3" json:"serialized_script,omitempty"`
	SerializedParams       string                `protobuf:"bytes,3,opt,name=serialized_params,json=serializedParams,proto3" json:"serialized_params,omitempty"`
	Parallelism            int32                 `protobuf:"varint,4,opt,name=parallelism,proto3" json:"parallelism,omitempty"`
	RelativePathToMainFile string                `protobuf:"bytes,5,opt,name=relative_path_to_main_file,json=relativePathToMainFile,proto3" json:"relative_path_to_main_file,omitempty"`
	MainFunctionName       string                `protobuf:"bytes,6,opt,name=main_function_name,json=mainFunctionName,proto3" json:"main_function_name,omitempty"`
	ExperimentalFeatures   []KurtosisFeatureFlag `protobuf:"varint,7,rep,packed,name=experimental_features,json=experimentalFeatures,proto3,enum=api_container_api.KurtosisFeatureFlag" json:"experimental_features,omitempty"`
	RestartPolicy          RestartPolicy         `protobuf:"varint,8,opt,name=restart_policy,json=restartPolicy,proto3,enum=api_container_api.RestartPolicy" json:"restart_policy,omitempty"`
}

func (x *GetStarlarkRunResponse) Reset() {
	*x = GetStarlarkRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStarlarkRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStarlarkRunResponse) ProtoMessage() {}

func (x *GetStarlarkRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStarlarkRunResponse.ProtoReflect.Descriptor instead.
func (*GetStarlarkRunResponse) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{41}
}

func (x *GetStarlarkRunResponse) GetPackageId() string {
	if x != nil {
		return x.PackageId
	}
	return ""
}

func (x *GetStarlarkRunResponse) GetSerializedScript() string {
	if x != nil {
		return x.SerializedScript
	}
	return ""
}

func (x *GetStarlarkRunResponse) GetSerializedParams() string {
	if x != nil {
		return x.SerializedParams
	}
	return ""
}

func (x *GetStarlarkRunResponse) GetParallelism() int32 {
	if x != nil {
		return x.Parallelism
	}
	return 0
}

func (x *GetStarlarkRunResponse) GetRelativePathToMainFile() string {
	if x != nil {
		return x.RelativePathToMainFile
	}
	return ""
}

func (x *GetStarlarkRunResponse) GetMainFunctionName() string {
	if x != nil {
		return x.MainFunctionName
	}
	return ""
}

func (x *GetStarlarkRunResponse) GetExperimentalFeatures() []KurtosisFeatureFlag {
	if x != nil {
		return x.ExperimentalFeatures
	}
	return nil
}

func (x *GetStarlarkRunResponse) GetRestartPolicy() RestartPolicy {
	if x != nil {
		return x.RestartPolicy
	}
	return RestartPolicy_NEVER
}

var File_api_container_service_proto protoreflect.FileDescriptor

var file_api_container_service_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x61,
	0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x95, 0x02,
	0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x58,
	0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x3c, 0x0a, 0x1a, 0x6d, 0x61, 0x79, 0x62,
	0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6d, 0x61,
	0x79, 0x62, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x79, 0x62, 0x65, 0x5f,
	0x77, 0x61, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x6d, 0x61, 0x79, 0x62, 0x65, 0x57, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x22, 0x2f, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x43, 0x50,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x43, 0x54, 0x50, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x55, 0x44, 0x50, 0x10, 0x02, 0x22, 0xde, 0x02, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x72,
	0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x41, 0x72, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6d, 0x64, 0x5f,
	0x61, 0x72, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x41,
	0x72, 0x67, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x65, 0x6e, 0x76, 0x5f, 0x76, 0x61, 0x72, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x65, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x45, 0x6e, 0x76,
	0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2f, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x22, 0xbc, 0x05, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x55, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x61, 0x79, 0x62,
	0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x61, 0x79, 0x62, 0x65, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x62, 0x0a, 0x12, 0x6d, 0x61, 0x79,
	0x62, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x61, 0x79, 0x62, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x6d, 0x61, 0x79,
	0x62, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x6e, 0x65, 0x64, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x65, 0x6e, 0x65, 0x64, 0x55, 0x75, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x3a, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x1a, 0x58, 0x0a,
	0x11, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a, 0x15, 0x4d, 0x61, 0x79, 0x62, 0x65,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd2, 0x04, 0x0a, 0x15, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61,
	0x72, 0x6c, 0x61, 0x72, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x41, 0x72, 0x67, 0x73, 0x12,
	0x2b, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x2b, 0x0a, 0x11,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x07, 0x64, 0x72, 0x79,
	0x5f, 0x72, 0x75, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x64, 0x72,
	0x79, 0x52, 0x75, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6c,
	0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0b,
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2c,
	0x0a, 0x12, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x61, 0x69, 0x6e,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x15,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x61, 0x70,
	0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x4b, 0x75, 0x72, 0x74, 0x6f, 0x73, 0x69, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x52, 0x14, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x11, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x13, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x04, 0x52, 0x11, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x8b, 0x06, 0x0a, 0x16, 0x52,
	0x75, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c,
	0x65, 0x6c, 0x69, 0x73, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x6e,
	0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x03, 0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x3a, 0x0a, 0x1a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x54, 0x6f, 0x4d, 0x61, 0x69, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x61, 0x69, 0x6e,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x15,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x61, 0x70,
	0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x4b, 0x75, 0x72, 0x74, 0x6f, 0x73, 0x69, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x52, 0x14, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x11, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x13, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x06, 0x52, 0x11, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x1a,
	0x0a, 0x18, 0x73, 0x74, 0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64,
	0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c,
	0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6c, 0x6f, 0x6e, 0x65,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xb6, 0x04, 0x0a, 0x17, 0x53, 0x74, 0x61,
	0x72, 0x6c, 0x61, 0x72, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4c, 0x69, 0x6e, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74,
	0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x38, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4d, 0x0a, 0x0d, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b, 0x52, 0x75,
	0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5d, 0x0a, 0x12, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x6c, 0x61,
	0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x11, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5b, 0x0a, 0x12, 0x72, 0x75, 0x6e, 0x5f,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x6c, 0x61, 0x72,
	0x6b, 0x52, 0x75, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x10, 0x72, 0x75, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x6c,
	0x61, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x07, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x13, 0x0a, 0x11,
	0x72, 0x75, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x22, 0x31, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b,
	0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0xab, 0x02, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x70, 0x69,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x47, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x52, 0x09, 0x61,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x16, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x22, 0x5f,
	0x0a, 0x19, 0x53, 0x74, 0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x42, 0x0a, 0x1d, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1b, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0xa4, 0x01, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x67, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x41, 0x72, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x08,
	0x61, 0x72, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x07, 0x61, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x11,
	0x69, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x52, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x72,
	0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x65, 0x0a, 0x1b, 0x53, 0x74, 0x61, 0x72, 0x6c, 0x61,
	0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0xac, 0x02,
	0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x63, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x57, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x54, 0x0a,
	0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x6c,
	0x61, 0x72, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x42, 0x0a, 0x1b,
	0x53, 0x74, 0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x3e, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x3d, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x92, 0x01, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b, 0x52, 0x75, 0x6e, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x65, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x65,
	0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x74, 0x65, 0x70, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x65, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x65, 0x70, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0x8e, 0x01, 0x0a, 0x18, 0x53, 0x74, 0x61, 0x72, 0x6c, 0x61, 0x72,
	0x6b, 0x52, 0x75, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73,
	0x52, 0x75, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x12, 0x30, 0x0a,
	0x11, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xc5, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x41, 0x72, 0x67, 0x73, 0x12, 0x6b, 0x0a, 0x13, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x41, 0x72, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x1a, 0x45, 0x0a, 0x17, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd1, 0x01,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x70,
	0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x1a, 0x5e, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x72, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x6e, 0x65, 0x64, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x6e, 0x65,
	0x64, 0x55, 0x75, 0x69, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x32, 0x47, 0x65, 0x74, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63,
	0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0e,
	0x61, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x61, 0x6c, 0x6c,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x22, 0x63, 0x0a, 0x0f, 0x45,
	0x78, 0x65, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x67, 0x73, 0x12, 0x2d,
	0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x67, 0x73,
	0x22, 0x51, 0x0a, 0x13, 0x45, 0x78, 0x65, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x5f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x22, 0xb2, 0x02, 0x0a, 0x26, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x48,
	0x74, 0x74, 0x70, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x72, 0x67, 0x73, 0x12, 0x2d,
	0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x3c, 0x0a, 0x1a, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3c, 0x0a,
	0x1a, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6d,
	0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x18, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d,
	0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x6f, 0x64, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x6f, 0x64, 0x79, 0x54, 0x65, 0x78, 0x74, 0x22, 0xd6, 0x02, 0x0a, 0x27, 0x57, 0x61, 0x69,
	0x74, 0x46, 0x6f, 0x72, 0x48, 0x74, 0x74, 0x70, 0x50, 0x6f, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x41, 0x72, 0x67, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x3c,
	0x0a, 0x1a, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f,
	0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x18, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x72, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x54, 0x65, 0x78,
	0x74, 0x22, 0x99, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x13, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x40, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x27, 0x0a,
	0x11, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x45, 0x0a, 0x1b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3b, 0x0a,
	0x19, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x41, 0x0a, 0x19, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x57, 0x65, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x41, 0x72, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x33, 0x0a,
	0x1d, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x57, 0x65, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x22, 0x87, 0x01, 0x0a, 0x21, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3b, 0x0a, 0x25,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x52, 0x0a, 0x18, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e,
	0x64, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x75, 0x69, 0x64, 0x22, 0x86, 0x01,
	0x0a, 0x26, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x55, 0x75, 0x69, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x14, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x55,
	0x75, 0x69, 0x64, 0x52, 0x11, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x41, 0x6e,
	0x64, 0x55, 0x75, 0x69, 0x64, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x23, 0x49, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a,
	0x0a, 0x13, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70,
	0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x41, 0x6e, 0x64, 0x55, 0x75, 0x69, 0x64, 0x52, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x55, 0x75, 0x69, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x24, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x23, 0x46, 0x69, 0x6c,
	0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x88, 0x01, 0x01,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x22, 0x4b, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x41, 0x72, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x22, 0x19,
	0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc3, 0x03, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x12,
	0x3a, 0x0a, 0x1a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x54, 0x6f, 0x4d, 0x61, 0x69, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x61, 0x69, 0x6e, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x15, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x75, 0x72,
	0x74, 0x6f, 0x73, 0x69, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x52, 0x14, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2a,
	0x36, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x2a, 0x2c, 0x0a, 0x11, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0a, 0x0a, 0x06,
	0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x10, 0x01, 0x2a, 0x26, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x01, 0x2a, 0x32, 0x0a,
	0x13, 0x4b, 0x75, 0x72, 0x74, 0x6f, 0x73, 0x69, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x4f, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52,
	0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x10,
	0x00, 0x2a, 0x26, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x45, 0x56, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x4c, 0x57, 0x41, 0x59, 0x53, 0x10, 0x01, 0x32, 0xce, 0x0e, 0x0a, 0x13, 0x41, 0x70,
	0x69, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x6d, 0x0a, 0x11, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x75, 0x6e, 0x53, 0x74,
	0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x41, 0x72, 0x67, 0x73,
	0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b, 0x52, 0x75, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x59, 0x0a, 0x15, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x72, 0x6c, 0x61,
	0x72, 0x6b, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x28, 0x01, 0x12, 0x6f, 0x0a, 0x12, 0x52,
	0x75, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x6c, 0x61, 0x72,
	0x6b, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x2a, 0x2e, 0x61,
	0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x5b, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x61, 0x70,
	0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x41, 0x72, 0x67, 0x73, 0x1a,
	0x26, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x2a, 0x47, 0x65,
	0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x45, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x41, 0x6e, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0b, 0x45, 0x78, 0x65,
	0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x26, 0x2e, 0x61,
	0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x22, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f,
	0x72, 0x48, 0x74, 0x74, 0x70, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x39, 0x2e, 0x61,
	0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x48, 0x74, 0x74, 0x70, 0x47, 0x65, 0x74, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x7b, 0x0a, 0x23, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x48, 0x74, 0x74, 0x70,
	0x50, 0x6f, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3a, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x61, 0x69,
	0x74, 0x46, 0x6f, 0x72, 0x48, 0x74, 0x74, 0x70, 0x50, 0x6f, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x41, 0x72, 0x67, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6f,
	0x0a, 0x13, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x2e, 0x2e, 0x61, 0x70,
	0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12,
	0x6f, 0x0a, 0x15, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x79, 0x0a, 0x15, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x57, 0x65, 0x62, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x57, 0x65, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x57, 0x65, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x91, 0x01, 0x0a, 0x1d,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x34, 0x2e,
	0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x72, 0x67, 0x73, 0x1a, 0x38, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x75, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x55, 0x75, 0x69, 0x64,
	0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x39, 0x2e, 0x61, 0x70, 0x69, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x55, 0x75, 0x69, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x91, 0x01, 0x0a, 0x1c, 0x49, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x37, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x0f, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x26, 0x2e,
	0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x6c, 0x61,
	0x72, 0x6b, 0x52, 0x75, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x29, 0x2e,
	0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b, 0x52, 0x75, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x52, 0x5a, 0x50, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x75, 0x72, 0x74, 0x6f, 0x73, 0x69,
	0x73, 0x2d, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x6b, 0x75, 0x72, 0x74, 0x6f, 0x73, 0x69, 0x73, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x6b, 0x75, 0x72, 0x74, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x70,
	0x63, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_container_service_proto_rawDescOnce sync.Once
	file_api_container_service_proto_rawDescData = file_api_container_service_proto_rawDesc
)

func file_api_container_service_proto_rawDescGZIP() []byte {
	file_api_container_service_proto_rawDescOnce.Do(func() {
		file_api_container_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_container_service_proto_rawDescData)
	})
	return file_api_container_service_proto_rawDescData
}

var file_api_container_service_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_api_container_service_proto_msgTypes = make([]protoimpl.MessageInfo, 47)
var file_api_container_service_proto_goTypes = []interface{}{
	(ServiceStatus)(0),                                         // 0: api_container_api.ServiceStatus
	(ImageDownloadMode)(0),                                     // 1: api_container_api.ImageDownloadMode
	(Connect)(0),                                               // 2: api_container_api.Connect
	(KurtosisFeatureFlag)(0),                                   // 3: api_container_api.KurtosisFeatureFlag
	(RestartPolicy)(0),                                         // 4: api_container_api.RestartPolicy
	(Port_TransportProtocol)(0),                                // 5: api_container_api.Port.TransportProtocol
	(Container_Status)(0),                                      // 6: api_container_api.Container.Status
	(*Port)(nil),                                               // 7: api_container_api.Port
	(*Container)(nil),                                          // 8: api_container_api.Container
	(*ServiceInfo)(nil),                                        // 9: api_container_api.ServiceInfo
	(*RunStarlarkScriptArgs)(nil),                              // 10: api_container_api.RunStarlarkScriptArgs
	(*RunStarlarkPackageArgs)(nil),                             // 11: api_container_api.RunStarlarkPackageArgs
	(*StarlarkRunResponseLine)(nil),                            // 12: api_container_api.StarlarkRunResponseLine
	(*StarlarkInfo)(nil),                                       // 13: api_container_api.StarlarkInfo
	(*StarlarkWarning)(nil),                                    // 14: api_container_api.StarlarkWarning
	(*StarlarkInstruction)(nil),                                // 15: api_container_api.StarlarkInstruction
	(*StarlarkInstructionResult)(nil),                          // 16: api_container_api.StarlarkInstructionResult
	(*StarlarkInstructionArg)(nil),                             // 17: api_container_api.StarlarkInstructionArg
	(*StarlarkInstructionPosition)(nil),                        // 18: api_container_api.StarlarkInstructionPosition
	(*StarlarkError)(nil),                                      // 19: api_container_api.StarlarkError
	(*StarlarkInterpretationError)(nil),                        // 20: api_container_api.StarlarkInterpretationError
	(*StarlarkValidationError)(nil),                            // 21: api_container_api.StarlarkValidationError
	(*StarlarkExecutionError)(nil),                             // 22: api_container_api.StarlarkExecutionError
	(*StarlarkRunProgress)(nil),                                // 23: api_container_api.StarlarkRunProgress
	(*StarlarkRunFinishedEvent)(nil),                           // 24: api_container_api.StarlarkRunFinishedEvent
	(*GetServicesArgs)(nil),                                    // 25: api_container_api.GetServicesArgs
	(*GetServicesResponse)(nil),                                // 26: api_container_api.GetServicesResponse
	(*ServiceIdentifiers)(nil),                                 // 27: api_container_api.ServiceIdentifiers
	(*GetExistingAndHistoricalServiceIdentifiersResponse)(nil), // 28: api_container_api.GetExistingAndHistoricalServiceIdentifiersResponse
	(*ExecCommandArgs)(nil),                                    // 29: api_container_api.ExecCommandArgs
	(*ExecCommandResponse)(nil),                                // 30: api_container_api.ExecCommandResponse
	(*WaitForHttpGetEndpointAvailabilityArgs)(nil),             // 31: api_container_api.WaitForHttpGetEndpointAvailabilityArgs
	(*WaitForHttpPostEndpointAvailabilityArgs)(nil),            // 32: api_container_api.WaitForHttpPostEndpointAvailabilityArgs
	(*StreamedDataChunk)(nil),                                  // 33: api_container_api.StreamedDataChunk
	(*DataChunkMetadata)(nil),                                  // 34: api_container_api.DataChunkMetadata
	(*UploadFilesArtifactResponse)(nil),                        // 35: api_container_api.UploadFilesArtifactResponse
	(*DownloadFilesArtifactArgs)(nil),                          // 36: api_container_api.DownloadFilesArtifactArgs
	(*StoreWebFilesArtifactArgs)(nil),                          // 37: api_container_api.StoreWebFilesArtifactArgs
	(*StoreWebFilesArtifactResponse)(nil),                      // 38: api_container_api.StoreWebFilesArtifactResponse
	(*StoreFilesArtifactFromServiceArgs)(nil),                  // 39: api_container_api.StoreFilesArtifactFromServiceArgs
	(*StoreFilesArtifactFromServiceResponse)(nil),              // 40: api_container_api.StoreFilesArtifactFromServiceResponse
	(*FilesArtifactNameAndUuid)(nil),                           // 41: api_container_api.FilesArtifactNameAndUuid
	(*ListFilesArtifactNamesAndUuidsResponse)(nil),             // 42: api_container_api.ListFilesArtifactNamesAndUuidsResponse
	(*InspectFilesArtifactContentsRequest)(nil),                // 43: api_container_api.InspectFilesArtifactContentsRequest
	(*InspectFilesArtifactContentsResponse)(nil),               // 44: api_container_api.InspectFilesArtifactContentsResponse
	(*FileArtifactContentsFileDescription)(nil),                // 45: api_container_api.FileArtifactContentsFileDescription
	(*ConnectServicesArgs)(nil),                                // 46: api_container_api.ConnectServicesArgs
	(*ConnectServicesResponse)(nil),                            // 47: api_container_api.ConnectServicesResponse
	(*GetStarlarkRunResponse)(nil),                             // 48: api_container_api.GetStarlarkRunResponse
	nil,                                                        // 49: api_container_api.Container.EnvVarsEntry
	nil,                                                        // 50: api_container_api.ServiceInfo.PrivatePortsEntry
	nil,                                                        // 51: api_container_api.ServiceInfo.MaybePublicPortsEntry
	nil,                                                        // 52: api_container_api.GetServicesArgs.ServiceIdentifiersEntry
	nil,                                                        // 53: api_container_api.GetServicesResponse.ServiceInfoEntry
	(*emptypb.Empty)(nil),                                      // 54: google.protobuf.Empty
}
var file_api_container_service_proto_depIdxs = []int32{
	5,  // 0: api_container_api.Port.transport_protocol:type_name -> api_container_api.Port.TransportProtocol
	6,  // 1: api_container_api.Container.status:type_name -> api_container_api.Container.Status
	49, // 2: api_container_api.Container.env_vars:type_name -> api_container_api.Container.EnvVarsEntry
	50, // 3: api_container_api.ServiceInfo.private_ports:type_name -> api_container_api.ServiceInfo.PrivatePortsEntry
	51, // 4: api_container_api.ServiceInfo.maybe_public_ports:type_name -> api_container_api.ServiceInfo.MaybePublicPortsEntry
	0,  // 5: api_container_api.ServiceInfo.service_status:type_name -> api_container_api.ServiceStatus
	8,  // 6: api_container_api.ServiceInfo.container:type_name -> api_container_api.Container
	3,  // 7: api_container_api.RunStarlarkScriptArgs.experimental_features:type_name -> api_container_api.KurtosisFeatureFlag
	1,  // 8: api_container_api.RunStarlarkScriptArgs.image_download_mode:type_name -> api_container_api.ImageDownloadMode
	3,  // 9: api_container_api.RunStarlarkPackageArgs.experimental_features:type_name -> api_container_api.KurtosisFeatureFlag
	1,  // 10: api_container_api.RunStarlarkPackageArgs.image_download_mode:type_name -> api_container_api.ImageDownloadMode
	15, // 11: api_container_api.StarlarkRunResponseLine.instruction:type_name -> api_container_api.StarlarkInstruction
	19, // 12: api_container_api.StarlarkRunResponseLine.error:type_name -> api_container_api.StarlarkError
	23, // 13: api_container_api.StarlarkRunResponseLine.progress_info:type_name -> api_container_api.StarlarkRunProgress
	16, // 14: api_container_api.StarlarkRunResponseLine.instruction_result:type_name -> api_container_api.StarlarkInstructionResult
	24, // 15: api_container_api.StarlarkRunResponseLine.run_finished_event:type_name -> api_container_api.StarlarkRunFinishedEvent
	14, // 16: api_container_api.StarlarkRunResponseLine.warning:type_name -> api_container_api.StarlarkWarning
	13, // 17: api_container_api.StarlarkRunResponseLine.info:type_name -> api_container_api.StarlarkInfo
	18, // 18: api_container_api.StarlarkInstruction.position:type_name -> api_container_api.StarlarkInstructionPosition
	17, // 19: api_container_api.StarlarkInstruction.arguments:type_name -> api_container_api.StarlarkInstructionArg
	20, // 20: api_container_api.StarlarkError.interpretation_error:type_name -> api_container_api.StarlarkInterpretationError
	21, // 21: api_container_api.StarlarkError.validation_error:type_name -> api_container_api.StarlarkValidationError
	22, // 22: api_container_api.StarlarkError.execution_error:type_name -> api_container_api.StarlarkExecutionError
	52, // 23: api_container_api.GetServicesArgs.service_identifiers:type_name -> api_container_api.GetServicesArgs.ServiceIdentifiersEntry
	53, // 24: api_container_api.GetServicesResponse.service_info:type_name -> api_container_api.GetServicesResponse.ServiceInfoEntry
	27, // 25: api_container_api.GetExistingAndHistoricalServiceIdentifiersResponse.allIdentifiers:type_name -> api_container_api.ServiceIdentifiers
	34, // 26: api_container_api.StreamedDataChunk.metadata:type_name -> api_container_api.DataChunkMetadata
	41, // 27: api_container_api.ListFilesArtifactNamesAndUuidsResponse.file_names_and_uuids:type_name -> api_container_api.FilesArtifactNameAndUuid
	41, // 28: api_container_api.InspectFilesArtifactContentsRequest.file_names_and_uuid:type_name -> api_container_api.FilesArtifactNameAndUuid
	45, // 29: api_container_api.InspectFilesArtifactContentsResponse.file_descriptions:type_name -> api_container_api.FileArtifactContentsFileDescription
	2,  // 30: api_container_api.ConnectServicesArgs.connect:type_name -> api_container_api.Connect
	3,  // 31: api_container_api.GetStarlarkRunResponse.experimental_features:type_name -> api_container_api.KurtosisFeatureFlag
	4,  // 32: api_container_api.GetStarlarkRunResponse.restart_policy:type_name -> api_container_api.RestartPolicy
	7,  // 33: api_container_api.ServiceInfo.PrivatePortsEntry.value:type_name -> api_container_api.Port
	7,  // 34: api_container_api.ServiceInfo.MaybePublicPortsEntry.value:type_name -> api_container_api.Port
	9,  // 35: api_container_api.GetServicesResponse.ServiceInfoEntry.value:type_name -> api_container_api.ServiceInfo
	10, // 36: api_container_api.ApiContainerService.RunStarlarkScript:input_type -> api_container_api.RunStarlarkScriptArgs
	33, // 37: api_container_api.ApiContainerService.UploadStarlarkPackage:input_type -> api_container_api.StreamedDataChunk
	11, // 38: api_container_api.ApiContainerService.RunStarlarkPackage:input_type -> api_container_api.RunStarlarkPackageArgs
	25, // 39: api_container_api.ApiContainerService.GetServices:input_type -> api_container_api.GetServicesArgs
	54, // 40: api_container_api.ApiContainerService.GetExistingAndHistoricalServiceIdentifiers:input_type -> google.protobuf.Empty
	29, // 41: api_container_api.ApiContainerService.ExecCommand:input_type -> api_container_api.ExecCommandArgs
	31, // 42: api_container_api.ApiContainerService.WaitForHttpGetEndpointAvailability:input_type -> api_container_api.WaitForHttpGetEndpointAvailabilityArgs
	32, // 43: api_container_api.ApiContainerService.WaitForHttpPostEndpointAvailability:input_type -> api_container_api.WaitForHttpPostEndpointAvailabilityArgs
	33, // 44: api_container_api.ApiContainerService.UploadFilesArtifact:input_type -> api_container_api.StreamedDataChunk
	36, // 45: api_container_api.ApiContainerService.DownloadFilesArtifact:input_type -> api_container_api.DownloadFilesArtifactArgs
	37, // 46: api_container_api.ApiContainerService.StoreWebFilesArtifact:input_type -> api_container_api.StoreWebFilesArtifactArgs
	39, // 47: api_container_api.ApiContainerService.StoreFilesArtifactFromService:input_type -> api_container_api.StoreFilesArtifactFromServiceArgs
	54, // 48: api_container_api.ApiContainerService.ListFilesArtifactNamesAndUuids:input_type -> google.protobuf.Empty
	43, // 49: api_container_api.ApiContainerService.InspectFilesArtifactContents:input_type -> api_container_api.InspectFilesArtifactContentsRequest
	46, // 50: api_container_api.ApiContainerService.ConnectServices:input_type -> api_container_api.ConnectServicesArgs
	54, // 51: api_container_api.ApiContainerService.GetStarlarkRun:input_type -> google.protobuf.Empty
	12, // 52: api_container_api.ApiContainerService.RunStarlarkScript:output_type -> api_container_api.StarlarkRunResponseLine
	54, // 53: api_container_api.ApiContainerService.UploadStarlarkPackage:output_type -> google.protobuf.Empty
	12, // 54: api_container_api.ApiContainerService.RunStarlarkPackage:output_type -> api_container_api.StarlarkRunResponseLine
	26, // 55: api_container_api.ApiContainerService.GetServices:output_type -> api_container_api.GetServicesResponse
	28, // 56: api_container_api.ApiContainerService.GetExistingAndHistoricalServiceIdentifiers:output_type -> api_container_api.GetExistingAndHistoricalServiceIdentifiersResponse
	30, // 57: api_container_api.ApiContainerService.ExecCommand:output_type -> api_container_api.ExecCommandResponse
	54, // 58: api_container_api.ApiContainerService.WaitForHttpGetEndpointAvailability:output_type -> google.protobuf.Empty
	54, // 59: api_container_api.ApiContainerService.WaitForHttpPostEndpointAvailability:output_type -> google.protobuf.Empty
	35, // 60: api_container_api.ApiContainerService.UploadFilesArtifact:output_type -> api_container_api.UploadFilesArtifactResponse
	33, // 61: api_container_api.ApiContainerService.DownloadFilesArtifact:output_type -> api_container_api.StreamedDataChunk
	38, // 62: api_container_api.ApiContainerService.StoreWebFilesArtifact:output_type -> api_container_api.StoreWebFilesArtifactResponse
	40, // 63: api_container_api.ApiContainerService.StoreFilesArtifactFromService:output_type -> api_container_api.StoreFilesArtifactFromServiceResponse
	42, // 64: api_container_api.ApiContainerService.ListFilesArtifactNamesAndUuids:output_type -> api_container_api.ListFilesArtifactNamesAndUuidsResponse
	44, // 65: api_container_api.ApiContainerService.InspectFilesArtifactContents:output_type -> api_container_api.InspectFilesArtifactContentsResponse
	47, // 66: api_container_api.ApiContainerService.ConnectServices:output_type -> api_container_api.ConnectServicesResponse
	48, // 67: api_container_api.ApiContainerService.GetStarlarkRun:output_type -> api_container_api.GetStarlarkRunResponse
	52, // [52:68] is the sub-list for method output_type
	36, // [36:52] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_api_container_service_proto_init() }
func file_api_container_service_proto_init() {
	if File_api_container_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_container_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Port); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Container); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunStarlarkScriptArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunStarlarkPackageArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StarlarkRunResponseLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StarlarkInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StarlarkWarning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StarlarkInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StarlarkInstructionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StarlarkInstructionArg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StarlarkInstructionPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StarlarkError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StarlarkInterpretationError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StarlarkValidationError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StarlarkExecutionError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StarlarkRunProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StarlarkRunFinishedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServicesArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceIdentifiers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExistingAndHistoricalServiceIdentifiersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecCommandArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecCommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForHttpGetEndpointAvailabilityArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForHttpPostEndpointAvailabilityArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamedDataChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataChunkMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadFilesArtifactResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadFilesArtifactArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreWebFilesArtifactArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreWebFilesArtifactResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreFilesArtifactFromServiceArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreFilesArtifactFromServiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesArtifactNameAndUuid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFilesArtifactNamesAndUuidsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectFilesArtifactContentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectFilesArtifactContentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileArtifactContentsFileDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectServicesArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectServicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStarlarkRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_container_service_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_api_container_service_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*RunStarlarkPackageArgs_Local)(nil),
		(*RunStarlarkPackageArgs_Remote)(nil),
	}
	file_api_container_service_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*StarlarkRunResponseLine_Instruction)(nil),
		(*StarlarkRunResponseLine_Error)(nil),
		(*StarlarkRunResponseLine_ProgressInfo)(nil),
		(*StarlarkRunResponseLine_InstructionResult)(nil),
		(*StarlarkRunResponseLine_RunFinishedEvent)(nil),
		(*StarlarkRunResponseLine_Warning)(nil),
		(*StarlarkRunResponseLine_Info)(nil),
	}
	file_api_container_service_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_api_container_service_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*StarlarkError_InterpretationError)(nil),
		(*StarlarkError_ValidationError)(nil),
		(*StarlarkError_ExecutionError)(nil),
	}
	file_api_container_service_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_api_container_service_proto_msgTypes[38].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_container_service_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   47,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_container_service_proto_goTypes,
		DependencyIndexes: file_api_container_service_proto_depIdxs,
		EnumInfos:         file_api_container_service_proto_enumTypes,
		MessageInfos:      file_api_container_service_proto_msgTypes,
	}.Build()
	File_api_container_service_proto = out.File
	file_api_container_service_proto_rawDesc = nil
	file_api_container_service_proto_goTypes = nil
	file_api_container_service_proto_depIdxs = nil
}
