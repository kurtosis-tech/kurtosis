// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: portal_daemon_service.proto

package kurtosis_portal_rpc_api_bindingsconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	kurtosis_portal_rpc_api_bindings "github.com/kurtosis-tech/kurtosis/api/golang/portal/kurtosis_portal_rpc_api_bindings"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// KurtosisPortalDaemonName is the fully-qualified name of the KurtosisPortalDaemon service.
	KurtosisPortalDaemonName = "portal_daemon_api.KurtosisPortalDaemon"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// KurtosisPortalDaemonPingProcedure is the fully-qualified name of the KurtosisPortalDaemon's Ping
	// RPC.
	KurtosisPortalDaemonPingProcedure = "/portal_daemon_api.KurtosisPortalDaemon/Ping"
	// KurtosisPortalDaemonCreateUserServicePortForwardProcedure is the fully-qualified name of the
	// KurtosisPortalDaemon's CreateUserServicePortForward RPC.
	KurtosisPortalDaemonCreateUserServicePortForwardProcedure = "/portal_daemon_api.KurtosisPortalDaemon/CreateUserServicePortForward"
	// KurtosisPortalDaemonRemoveUserServicePortForwardProcedure is the fully-qualified name of the
	// KurtosisPortalDaemon's RemoveUserServicePortForward RPC.
	KurtosisPortalDaemonRemoveUserServicePortForwardProcedure = "/portal_daemon_api.KurtosisPortalDaemon/RemoveUserServicePortForward"
)

// KurtosisPortalDaemonClient is a client for the portal_daemon_api.KurtosisPortalDaemon service.
type KurtosisPortalDaemonClient interface {
	// To check availability
	Ping(context.Context, *connect.Request[kurtosis_portal_rpc_api_bindings.PortalPing]) (*connect.Response[kurtosis_portal_rpc_api_bindings.PortalPong], error)
	CreateUserServicePortForward(context.Context, *connect.Request[kurtosis_portal_rpc_api_bindings.CreateUserServicePortForwardArgs]) (*connect.Response[kurtosis_portal_rpc_api_bindings.CreateUserServicePortForwardResponse], error)
	RemoveUserServicePortForward(context.Context, *connect.Request[kurtosis_portal_rpc_api_bindings.EnclaveServicePortId]) (*connect.Response[kurtosis_portal_rpc_api_bindings.RemoveUserServicePortForwardResponse], error)
}

// NewKurtosisPortalDaemonClient constructs a client for the portal_daemon_api.KurtosisPortalDaemon
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKurtosisPortalDaemonClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) KurtosisPortalDaemonClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &kurtosisPortalDaemonClient{
		ping: connect.NewClient[kurtosis_portal_rpc_api_bindings.PortalPing, kurtosis_portal_rpc_api_bindings.PortalPong](
			httpClient,
			baseURL+KurtosisPortalDaemonPingProcedure,
			opts...,
		),
		createUserServicePortForward: connect.NewClient[kurtosis_portal_rpc_api_bindings.CreateUserServicePortForwardArgs, kurtosis_portal_rpc_api_bindings.CreateUserServicePortForwardResponse](
			httpClient,
			baseURL+KurtosisPortalDaemonCreateUserServicePortForwardProcedure,
			opts...,
		),
		removeUserServicePortForward: connect.NewClient[kurtosis_portal_rpc_api_bindings.EnclaveServicePortId, kurtosis_portal_rpc_api_bindings.RemoveUserServicePortForwardResponse](
			httpClient,
			baseURL+KurtosisPortalDaemonRemoveUserServicePortForwardProcedure,
			opts...,
		),
	}
}

// kurtosisPortalDaemonClient implements KurtosisPortalDaemonClient.
type kurtosisPortalDaemonClient struct {
	ping                         *connect.Client[kurtosis_portal_rpc_api_bindings.PortalPing, kurtosis_portal_rpc_api_bindings.PortalPong]
	createUserServicePortForward *connect.Client[kurtosis_portal_rpc_api_bindings.CreateUserServicePortForwardArgs, kurtosis_portal_rpc_api_bindings.CreateUserServicePortForwardResponse]
	removeUserServicePortForward *connect.Client[kurtosis_portal_rpc_api_bindings.EnclaveServicePortId, kurtosis_portal_rpc_api_bindings.RemoveUserServicePortForwardResponse]
}

// Ping calls portal_daemon_api.KurtosisPortalDaemon.Ping.
func (c *kurtosisPortalDaemonClient) Ping(ctx context.Context, req *connect.Request[kurtosis_portal_rpc_api_bindings.PortalPing]) (*connect.Response[kurtosis_portal_rpc_api_bindings.PortalPong], error) {
	return c.ping.CallUnary(ctx, req)
}

// CreateUserServicePortForward calls
// portal_daemon_api.KurtosisPortalDaemon.CreateUserServicePortForward.
func (c *kurtosisPortalDaemonClient) CreateUserServicePortForward(ctx context.Context, req *connect.Request[kurtosis_portal_rpc_api_bindings.CreateUserServicePortForwardArgs]) (*connect.Response[kurtosis_portal_rpc_api_bindings.CreateUserServicePortForwardResponse], error) {
	return c.createUserServicePortForward.CallUnary(ctx, req)
}

// RemoveUserServicePortForward calls
// portal_daemon_api.KurtosisPortalDaemon.RemoveUserServicePortForward.
func (c *kurtosisPortalDaemonClient) RemoveUserServicePortForward(ctx context.Context, req *connect.Request[kurtosis_portal_rpc_api_bindings.EnclaveServicePortId]) (*connect.Response[kurtosis_portal_rpc_api_bindings.RemoveUserServicePortForwardResponse], error) {
	return c.removeUserServicePortForward.CallUnary(ctx, req)
}

// KurtosisPortalDaemonHandler is an implementation of the portal_daemon_api.KurtosisPortalDaemon
// service.
type KurtosisPortalDaemonHandler interface {
	// To check availability
	Ping(context.Context, *connect.Request[kurtosis_portal_rpc_api_bindings.PortalPing]) (*connect.Response[kurtosis_portal_rpc_api_bindings.PortalPong], error)
	CreateUserServicePortForward(context.Context, *connect.Request[kurtosis_portal_rpc_api_bindings.CreateUserServicePortForwardArgs]) (*connect.Response[kurtosis_portal_rpc_api_bindings.CreateUserServicePortForwardResponse], error)
	RemoveUserServicePortForward(context.Context, *connect.Request[kurtosis_portal_rpc_api_bindings.EnclaveServicePortId]) (*connect.Response[kurtosis_portal_rpc_api_bindings.RemoveUserServicePortForwardResponse], error)
}

// NewKurtosisPortalDaemonHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKurtosisPortalDaemonHandler(svc KurtosisPortalDaemonHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	kurtosisPortalDaemonPingHandler := connect.NewUnaryHandler(
		KurtosisPortalDaemonPingProcedure,
		svc.Ping,
		opts...,
	)
	kurtosisPortalDaemonCreateUserServicePortForwardHandler := connect.NewUnaryHandler(
		KurtosisPortalDaemonCreateUserServicePortForwardProcedure,
		svc.CreateUserServicePortForward,
		opts...,
	)
	kurtosisPortalDaemonRemoveUserServicePortForwardHandler := connect.NewUnaryHandler(
		KurtosisPortalDaemonRemoveUserServicePortForwardProcedure,
		svc.RemoveUserServicePortForward,
		opts...,
	)
	return "/portal_daemon_api.KurtosisPortalDaemon/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case KurtosisPortalDaemonPingProcedure:
			kurtosisPortalDaemonPingHandler.ServeHTTP(w, r)
		case KurtosisPortalDaemonCreateUserServicePortForwardProcedure:
			kurtosisPortalDaemonCreateUserServicePortForwardHandler.ServeHTTP(w, r)
		case KurtosisPortalDaemonRemoveUserServicePortForwardProcedure:
			kurtosisPortalDaemonRemoveUserServicePortForwardHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedKurtosisPortalDaemonHandler returns CodeUnimplemented from all methods.
type UnimplementedKurtosisPortalDaemonHandler struct{}

func (UnimplementedKurtosisPortalDaemonHandler) Ping(context.Context, *connect.Request[kurtosis_portal_rpc_api_bindings.PortalPing]) (*connect.Response[kurtosis_portal_rpc_api_bindings.PortalPong], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("portal_daemon_api.KurtosisPortalDaemon.Ping is not implemented"))
}

func (UnimplementedKurtosisPortalDaemonHandler) CreateUserServicePortForward(context.Context, *connect.Request[kurtosis_portal_rpc_api_bindings.CreateUserServicePortForwardArgs]) (*connect.Response[kurtosis_portal_rpc_api_bindings.CreateUserServicePortForwardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("portal_daemon_api.KurtosisPortalDaemon.CreateUserServicePortForward is not implemented"))
}

func (UnimplementedKurtosisPortalDaemonHandler) RemoveUserServicePortForward(context.Context, *connect.Request[kurtosis_portal_rpc_api_bindings.EnclaveServicePortId]) (*connect.Response[kurtosis_portal_rpc_api_bindings.RemoveUserServicePortForwardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("portal_daemon_api.KurtosisPortalDaemon.RemoveUserServicePortForward is not implemented"))
}
