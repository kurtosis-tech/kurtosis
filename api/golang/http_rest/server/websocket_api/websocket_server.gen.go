// Package websocket_api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package websocket_api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	. "github.com/kurtosis-tech/kurtosis/api/golang/http_rest/api_types"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get enclave's services logs
	// (GET /enclaves/{enclave_identifier}/logs)
	GetEnclavesEnclaveIdentifierLogs(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, params GetEnclavesEnclaveIdentifierLogsParams) error
	// Get service logs
	// (GET /enclaves/{enclave_identifier}/services/{service_identifier}/logs)
	GetEnclavesEnclaveIdentifierServicesServiceIdentifierLogs(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, serviceIdentifier ServiceIdentifier, params GetEnclavesEnclaveIdentifierServicesServiceIdentifierLogsParams) error
	// Get Starlark execution logs
	// (GET /starlark/executions/{starlark_execution_uuid}/logs)
	GetStarlarkExecutionsStarlarkExecutionUuidLogs(ctx echo.Context, starlarkExecutionUuid StarlarkExecutionUuid) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetEnclavesEnclaveIdentifierLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEnclavesEnclaveIdentifierLogsParams
	// ------------- Required query parameter "service_uuid_set" -------------

	err = runtime.BindQueryParameter("form", true, true, "service_uuid_set", ctx.QueryParams(), &params.ServiceUuidSet)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_uuid_set: %s", err))
	}

	// ------------- Optional query parameter "follow_logs" -------------

	err = runtime.BindQueryParameter("form", true, false, "follow_logs", ctx.QueryParams(), &params.FollowLogs)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter follow_logs: %s", err))
	}

	// ------------- Optional query parameter "conjunctive_filters" -------------

	err = runtime.BindQueryParameter("form", true, false, "conjunctive_filters", ctx.QueryParams(), &params.ConjunctiveFilters)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter conjunctive_filters: %s", err))
	}

	// ------------- Optional query parameter "return_all_logs" -------------

	err = runtime.BindQueryParameter("form", true, false, "return_all_logs", ctx.QueryParams(), &params.ReturnAllLogs)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter return_all_logs: %s", err))
	}

	// ------------- Optional query parameter "num_log_lines" -------------

	err = runtime.BindQueryParameter("form", true, false, "num_log_lines", ctx.QueryParams(), &params.NumLogLines)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter num_log_lines: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierLogs(ctx, enclaveIdentifier, params)
	return err
}

// GetEnclavesEnclaveIdentifierServicesServiceIdentifierLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierServicesServiceIdentifierLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// ------------- Path parameter "service_identifier" -------------
	var serviceIdentifier ServiceIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "service_identifier", runtime.ParamLocationPath, ctx.Param("service_identifier"), &serviceIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_identifier: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEnclavesEnclaveIdentifierServicesServiceIdentifierLogsParams
	// ------------- Optional query parameter "follow_logs" -------------

	err = runtime.BindQueryParameter("form", true, false, "follow_logs", ctx.QueryParams(), &params.FollowLogs)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter follow_logs: %s", err))
	}

	// ------------- Optional query parameter "conjunctive_filters" -------------

	err = runtime.BindQueryParameter("form", true, false, "conjunctive_filters", ctx.QueryParams(), &params.ConjunctiveFilters)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter conjunctive_filters: %s", err))
	}

	// ------------- Optional query parameter "return_all_logs" -------------

	err = runtime.BindQueryParameter("form", true, false, "return_all_logs", ctx.QueryParams(), &params.ReturnAllLogs)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter return_all_logs: %s", err))
	}

	// ------------- Optional query parameter "num_log_lines" -------------

	err = runtime.BindQueryParameter("form", true, false, "num_log_lines", ctx.QueryParams(), &params.NumLogLines)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter num_log_lines: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierServicesServiceIdentifierLogs(ctx, enclaveIdentifier, serviceIdentifier, params)
	return err
}

// GetStarlarkExecutionsStarlarkExecutionUuidLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetStarlarkExecutionsStarlarkExecutionUuidLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "starlark_execution_uuid" -------------
	var starlarkExecutionUuid StarlarkExecutionUuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "starlark_execution_uuid", runtime.ParamLocationPath, ctx.Param("starlark_execution_uuid"), &starlarkExecutionUuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter starlark_execution_uuid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStarlarkExecutionsStarlarkExecutionUuidLogs(ctx, starlarkExecutionUuid)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/enclaves/:enclave_identifier/logs", wrapper.GetEnclavesEnclaveIdentifierLogs)
	router.GET(baseURL+"/enclaves/:enclave_identifier/services/:service_identifier/logs", wrapper.GetEnclavesEnclaveIdentifierServicesServiceIdentifierLogs)
	router.GET(baseURL+"/starlark/executions/:starlark_execution_uuid/logs", wrapper.GetStarlarkExecutionsStarlarkExecutionUuidLogs)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Y8dXCwZfBToCqTmGIrvdfwIAAP//rrgHHYUlAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
