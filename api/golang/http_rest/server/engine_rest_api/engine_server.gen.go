// Package engine_rest_api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package engine_rest_api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	. "github.com/kurtosis-tech/kurtosis/api/golang/http_rest/api_types"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete enclaves
	// (DELETE /enclaves)
	DeleteEnclaves(ctx echo.Context, params DeleteEnclavesParams) error
	// List enclaves
	// (GET /enclaves)
	GetEnclaves(ctx echo.Context) error
	// Create enclave
	// (POST /enclaves)
	PostEnclaves(ctx echo.Context) error
	// List all enclave identifiers
	// (GET /enclaves/history)
	GetEnclavesHistory(ctx echo.Context) error
	// Destroy enclave
	// (DELETE /enclaves/{enclave_identifier})
	DeleteEnclavesEnclaveIdentifier(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error
	// Get enclave detailed info
	// (GET /enclaves/{enclave_identifier})
	GetEnclavesEnclaveIdentifier(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error
	// Get enclave status
	// (GET /enclaves/{enclave_identifier}/status)
	GetEnclavesEnclaveIdentifierStatus(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error
	// Set enclave status
	// (POST /enclaves/{enclave_identifier}/status)
	PostEnclavesEnclaveIdentifierStatus(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error
	// Get engine info
	// (GET /engine/info)
	GetEngineInfo(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DeleteEnclaves converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteEnclaves(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteEnclavesParams
	// ------------- Optional query parameter "remove_all" -------------

	err = runtime.BindQueryParameter("form", true, false, "remove_all", ctx.QueryParams(), &params.RemoveAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter remove_all: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteEnclaves(ctx, params)
	return err
}

// GetEnclaves converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclaves(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEnclaves(ctx)
	return err
}

// PostEnclaves converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclaves(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostEnclaves(ctx)
	return err
}

// GetEnclavesHistory converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesHistory(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEnclavesHistory(ctx)
	return err
}

// DeleteEnclavesEnclaveIdentifier converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteEnclavesEnclaveIdentifier(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteEnclavesEnclaveIdentifier(ctx, enclaveIdentifier)
	return err
}

// GetEnclavesEnclaveIdentifier converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifier(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifier(ctx, enclaveIdentifier)
	return err
}

// GetEnclavesEnclaveIdentifierStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierStatus(ctx, enclaveIdentifier)
	return err
}

// PostEnclavesEnclaveIdentifierStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierStatus(ctx, enclaveIdentifier)
	return err
}

// GetEngineInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetEngineInfo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEngineInfo(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/enclaves", wrapper.DeleteEnclaves)
	router.GET(baseURL+"/enclaves", wrapper.GetEnclaves)
	router.POST(baseURL+"/enclaves", wrapper.PostEnclaves)
	router.GET(baseURL+"/enclaves/history", wrapper.GetEnclavesHistory)
	router.DELETE(baseURL+"/enclaves/:enclave_identifier", wrapper.DeleteEnclavesEnclaveIdentifier)
	router.GET(baseURL+"/enclaves/:enclave_identifier", wrapper.GetEnclavesEnclaveIdentifier)
	router.GET(baseURL+"/enclaves/:enclave_identifier/status", wrapper.GetEnclavesEnclaveIdentifierStatus)
	router.POST(baseURL+"/enclaves/:enclave_identifier/status", wrapper.PostEnclavesEnclaveIdentifierStatus)
	router.GET(baseURL+"/engine/info", wrapper.GetEngineInfo)

}

type NotOkJSONResponse ResponseInfo

type DeleteEnclavesRequestObject struct {
	Params DeleteEnclavesParams
}

type DeleteEnclavesResponseObject interface {
	VisitDeleteEnclavesResponse(w http.ResponseWriter) error
}

type DeleteEnclaves200JSONResponse DeletionSummary

func (response DeleteEnclaves200JSONResponse) VisitDeleteEnclavesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteEnclavesdefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response DeleteEnclavesdefaultJSONResponse) VisitDeleteEnclavesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetEnclavesRequestObject struct {
}

type GetEnclavesResponseObject interface {
	VisitGetEnclavesResponse(w http.ResponseWriter) error
}

type GetEnclaves200JSONResponse map[string]EnclaveInfo

func (response GetEnclaves200JSONResponse) VisitGetEnclavesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEnclavesdefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response GetEnclavesdefaultJSONResponse) VisitGetEnclavesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostEnclavesRequestObject struct {
	Body *PostEnclavesJSONRequestBody
}

type PostEnclavesResponseObject interface {
	VisitPostEnclavesResponse(w http.ResponseWriter) error
}

type PostEnclaves200JSONResponse EnclaveInfo

func (response PostEnclaves200JSONResponse) VisitPostEnclavesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostEnclavesdefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response PostEnclavesdefaultJSONResponse) VisitPostEnclavesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetEnclavesHistoryRequestObject struct {
}

type GetEnclavesHistoryResponseObject interface {
	VisitGetEnclavesHistoryResponse(w http.ResponseWriter) error
}

type GetEnclavesHistory200JSONResponse []EnclaveIdentifiers

func (response GetEnclavesHistory200JSONResponse) VisitGetEnclavesHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEnclavesHistorydefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response GetEnclavesHistorydefaultJSONResponse) VisitGetEnclavesHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteEnclavesEnclaveIdentifierRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
}

type DeleteEnclavesEnclaveIdentifierResponseObject interface {
	VisitDeleteEnclavesEnclaveIdentifierResponse(w http.ResponseWriter) error
}

type DeleteEnclavesEnclaveIdentifier200Response struct {
}

func (response DeleteEnclavesEnclaveIdentifier200Response) VisitDeleteEnclavesEnclaveIdentifierResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteEnclavesEnclaveIdentifierdefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response DeleteEnclavesEnclaveIdentifierdefaultJSONResponse) VisitDeleteEnclavesEnclaveIdentifierResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetEnclavesEnclaveIdentifierRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
}

type GetEnclavesEnclaveIdentifierResponseObject interface {
	VisitGetEnclavesEnclaveIdentifierResponse(w http.ResponseWriter) error
}

type GetEnclavesEnclaveIdentifier200JSONResponse EnclaveInfo

func (response GetEnclavesEnclaveIdentifier200JSONResponse) VisitGetEnclavesEnclaveIdentifierResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEnclavesEnclaveIdentifierdefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response GetEnclavesEnclaveIdentifierdefaultJSONResponse) VisitGetEnclavesEnclaveIdentifierResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetEnclavesEnclaveIdentifierStatusRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
}

type GetEnclavesEnclaveIdentifierStatusResponseObject interface {
	VisitGetEnclavesEnclaveIdentifierStatusResponse(w http.ResponseWriter) error
}

type GetEnclavesEnclaveIdentifierStatus200JSONResponse EnclaveStatus

func (response GetEnclavesEnclaveIdentifierStatus200JSONResponse) VisitGetEnclavesEnclaveIdentifierStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEnclavesEnclaveIdentifierStatusdefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response GetEnclavesEnclaveIdentifierStatusdefaultJSONResponse) VisitGetEnclavesEnclaveIdentifierStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostEnclavesEnclaveIdentifierStatusRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	Body              *PostEnclavesEnclaveIdentifierStatusJSONRequestBody
}

type PostEnclavesEnclaveIdentifierStatusResponseObject interface {
	VisitPostEnclavesEnclaveIdentifierStatusResponse(w http.ResponseWriter) error
}

type PostEnclavesEnclaveIdentifierStatus200Response struct {
}

func (response PostEnclavesEnclaveIdentifierStatus200Response) VisitPostEnclavesEnclaveIdentifierStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostEnclavesEnclaveIdentifierStatusdefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response PostEnclavesEnclaveIdentifierStatusdefaultJSONResponse) VisitPostEnclavesEnclaveIdentifierStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetEngineInfoRequestObject struct {
}

type GetEngineInfoResponseObject interface {
	VisitGetEngineInfoResponse(w http.ResponseWriter) error
}

type GetEngineInfo200JSONResponse EngineInfo

func (response GetEngineInfo200JSONResponse) VisitGetEngineInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEngineInfodefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response GetEngineInfodefaultJSONResponse) VisitGetEngineInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Delete enclaves
	// (DELETE /enclaves)
	DeleteEnclaves(ctx context.Context, request DeleteEnclavesRequestObject) (DeleteEnclavesResponseObject, error)
	// List enclaves
	// (GET /enclaves)
	GetEnclaves(ctx context.Context, request GetEnclavesRequestObject) (GetEnclavesResponseObject, error)
	// Create enclave
	// (POST /enclaves)
	PostEnclaves(ctx context.Context, request PostEnclavesRequestObject) (PostEnclavesResponseObject, error)
	// List all enclave identifiers
	// (GET /enclaves/history)
	GetEnclavesHistory(ctx context.Context, request GetEnclavesHistoryRequestObject) (GetEnclavesHistoryResponseObject, error)
	// Destroy enclave
	// (DELETE /enclaves/{enclave_identifier})
	DeleteEnclavesEnclaveIdentifier(ctx context.Context, request DeleteEnclavesEnclaveIdentifierRequestObject) (DeleteEnclavesEnclaveIdentifierResponseObject, error)
	// Get enclave detailed info
	// (GET /enclaves/{enclave_identifier})
	GetEnclavesEnclaveIdentifier(ctx context.Context, request GetEnclavesEnclaveIdentifierRequestObject) (GetEnclavesEnclaveIdentifierResponseObject, error)
	// Get enclave status
	// (GET /enclaves/{enclave_identifier}/status)
	GetEnclavesEnclaveIdentifierStatus(ctx context.Context, request GetEnclavesEnclaveIdentifierStatusRequestObject) (GetEnclavesEnclaveIdentifierStatusResponseObject, error)
	// Set enclave status
	// (POST /enclaves/{enclave_identifier}/status)
	PostEnclavesEnclaveIdentifierStatus(ctx context.Context, request PostEnclavesEnclaveIdentifierStatusRequestObject) (PostEnclavesEnclaveIdentifierStatusResponseObject, error)
	// Get engine info
	// (GET /engine/info)
	GetEngineInfo(ctx context.Context, request GetEngineInfoRequestObject) (GetEngineInfoResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// DeleteEnclaves operation middleware
func (sh *strictHandler) DeleteEnclaves(ctx echo.Context, params DeleteEnclavesParams) error {
	var request DeleteEnclavesRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteEnclaves(ctx.Request().Context(), request.(DeleteEnclavesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteEnclaves")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteEnclavesResponseObject); ok {
		return validResponse.VisitDeleteEnclavesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetEnclaves operation middleware
func (sh *strictHandler) GetEnclaves(ctx echo.Context) error {
	var request GetEnclavesRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclaves(ctx.Request().Context(), request.(GetEnclavesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclaves")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesResponseObject); ok {
		return validResponse.VisitGetEnclavesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostEnclaves operation middleware
func (sh *strictHandler) PostEnclaves(ctx echo.Context) error {
	var request PostEnclavesRequestObject

	var body PostEnclavesJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclaves(ctx.Request().Context(), request.(PostEnclavesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclaves")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesResponseObject); ok {
		return validResponse.VisitPostEnclavesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetEnclavesHistory operation middleware
func (sh *strictHandler) GetEnclavesHistory(ctx echo.Context) error {
	var request GetEnclavesHistoryRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclavesHistory(ctx.Request().Context(), request.(GetEnclavesHistoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclavesHistory")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesHistoryResponseObject); ok {
		return validResponse.VisitGetEnclavesHistoryResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteEnclavesEnclaveIdentifier operation middleware
func (sh *strictHandler) DeleteEnclavesEnclaveIdentifier(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error {
	var request DeleteEnclavesEnclaveIdentifierRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteEnclavesEnclaveIdentifier(ctx.Request().Context(), request.(DeleteEnclavesEnclaveIdentifierRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteEnclavesEnclaveIdentifier")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteEnclavesEnclaveIdentifierResponseObject); ok {
		return validResponse.VisitDeleteEnclavesEnclaveIdentifierResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetEnclavesEnclaveIdentifier operation middleware
func (sh *strictHandler) GetEnclavesEnclaveIdentifier(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error {
	var request GetEnclavesEnclaveIdentifierRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclavesEnclaveIdentifier(ctx.Request().Context(), request.(GetEnclavesEnclaveIdentifierRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclavesEnclaveIdentifier")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesEnclaveIdentifierResponseObject); ok {
		return validResponse.VisitGetEnclavesEnclaveIdentifierResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetEnclavesEnclaveIdentifierStatus operation middleware
func (sh *strictHandler) GetEnclavesEnclaveIdentifierStatus(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error {
	var request GetEnclavesEnclaveIdentifierStatusRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclavesEnclaveIdentifierStatus(ctx.Request().Context(), request.(GetEnclavesEnclaveIdentifierStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclavesEnclaveIdentifierStatus")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesEnclaveIdentifierStatusResponseObject); ok {
		return validResponse.VisitGetEnclavesEnclaveIdentifierStatusResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostEnclavesEnclaveIdentifierStatus operation middleware
func (sh *strictHandler) PostEnclavesEnclaveIdentifierStatus(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error {
	var request PostEnclavesEnclaveIdentifierStatusRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	var body PostEnclavesEnclaveIdentifierStatusJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclavesEnclaveIdentifierStatus(ctx.Request().Context(), request.(PostEnclavesEnclaveIdentifierStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclavesEnclaveIdentifierStatus")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesEnclaveIdentifierStatusResponseObject); ok {
		return validResponse.VisitPostEnclavesEnclaveIdentifierStatusResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetEngineInfo operation middleware
func (sh *strictHandler) GetEngineInfo(ctx echo.Context) error {
	var request GetEngineInfoRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEngineInfo(ctx.Request().Context(), request.(GetEngineInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEngineInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEngineInfoResponseObject); ok {
		return validResponse.VisitGetEngineInfoResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
