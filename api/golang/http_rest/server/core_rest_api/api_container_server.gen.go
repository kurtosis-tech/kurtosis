// Package core_rest_api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package core_rest_api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"mime/multipart"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	. "github.com/kurtosis-tech/kurtosis/api/golang/http_rest/api_types"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all files artifacts
	// (GET /enclaves/{enclave_identifier}/artifacts)
	GetEnclavesEnclaveIdentifierArtifacts(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error
	// Uploads local file artifact to the Kurtosis File System
	// (POST /enclaves/{enclave_identifier}/artifacts/local-file)
	PostEnclavesEnclaveIdentifierArtifactsLocalFile(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error
	// Add remote file to Kurtosis File System
	// (POST /enclaves/{enclave_identifier}/artifacts/remote-file)
	PostEnclavesEnclaveIdentifierArtifactsRemoteFile(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error
	// Add service's file to Kurtosis File System
	// (POST /enclaves/{enclave_identifier}/artifacts/services/{service_identifier})
	PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, serviceIdentifier ServiceIdentifier) error
	// Inspect the content of a file artifact
	// (GET /enclaves/{enclave_identifier}/artifacts/{artifact_identifier})
	GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, artifactIdentifier ArtifactIdentifier) error
	// Downloads a files artifact from the Kurtosis File System
	// (GET /enclaves/{enclave_identifier}/artifacts/{artifact_identifier}/download)
	GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, artifactIdentifier ArtifactIdentifier) error
	// Returns detailed information about alls services within the enclave
	// (GET /enclaves/{enclave_identifier}/services)
	GetEnclavesEnclaveIdentifierServices(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, params GetEnclavesEnclaveIdentifierServicesParams) error
	// User services port forwarding
	// (POST /enclaves/{enclave_identifier}/services/connection)
	PostEnclavesEnclaveIdentifierServicesConnection(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error
	// Returns information about all existing & historical services
	// (GET /enclaves/{enclave_identifier}/services/history)
	GetEnclavesEnclaveIdentifierServicesHistory(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error
	// Returns detailed information about a specific service
	// (GET /enclaves/{enclave_identifier}/services/{service_identifier})
	GetEnclavesEnclaveIdentifierServicesServiceIdentifier(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, serviceIdentifier ServiceIdentifier) error
	// Executes the given command inside a running service's container
	// (POST /enclaves/{enclave_identifier}/services/{service_identifier}/command)
	PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, serviceIdentifier ServiceIdentifier) error
	// Check for service availability
	// (GET /enclaves/{enclave_identifier}/services/{service_identifier}/endpoints/{port_number}/availability)
	GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, serviceIdentifier ServiceIdentifier, portNumber PortNumber, params GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityParams) error
	// Get last Starlark run
	// (GET /enclaves/{enclave_identifier}/starlark)
	GetEnclavesEnclaveIdentifierStarlark(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error
	// Uploads a Starlark package
	// (POST /enclaves/{enclave_identifier}/starlark/packages)
	PostEnclavesEnclaveIdentifierStarlarkPackages(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error
	// Executes a Starlark package on the user's behalf
	// (POST /enclaves/{enclave_identifier}/starlark/packages/{package_id})
	PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, packageId PackageId, params PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdParams) error
	// Executes a Starlark script on the user's behalf
	// (POST /enclaves/{enclave_identifier}/starlark/scripts)
	PostEnclavesEnclaveIdentifierStarlarkScripts(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, params PostEnclavesEnclaveIdentifierStarlarkScriptsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetEnclavesEnclaveIdentifierArtifacts converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierArtifacts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierArtifacts(ctx, enclaveIdentifier)
	return err
}

// PostEnclavesEnclaveIdentifierArtifactsLocalFile converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierArtifactsLocalFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierArtifactsLocalFile(ctx, enclaveIdentifier)
	return err
}

// PostEnclavesEnclaveIdentifierArtifactsRemoteFile converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierArtifactsRemoteFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierArtifactsRemoteFile(ctx, enclaveIdentifier)
	return err
}

// PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// ------------- Path parameter "service_identifier" -------------
	var serviceIdentifier ServiceIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "service_identifier", runtime.ParamLocationPath, ctx.Param("service_identifier"), &serviceIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier(ctx, enclaveIdentifier, serviceIdentifier)
	return err
}

// GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// ------------- Path parameter "artifact_identifier" -------------
	var artifactIdentifier ArtifactIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "artifact_identifier", runtime.ParamLocationPath, ctx.Param("artifact_identifier"), &artifactIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter artifact_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier(ctx, enclaveIdentifier, artifactIdentifier)
	return err
}

// GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// ------------- Path parameter "artifact_identifier" -------------
	var artifactIdentifier ArtifactIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "artifact_identifier", runtime.ParamLocationPath, ctx.Param("artifact_identifier"), &artifactIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter artifact_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload(ctx, enclaveIdentifier, artifactIdentifier)
	return err
}

// GetEnclavesEnclaveIdentifierServices converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierServices(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEnclavesEnclaveIdentifierServicesParams
	// ------------- Optional query parameter "services" -------------

	err = runtime.BindQueryParameter("form", true, false, "services", ctx.QueryParams(), &params.Services)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter services: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierServices(ctx, enclaveIdentifier, params)
	return err
}

// PostEnclavesEnclaveIdentifierServicesConnection converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierServicesConnection(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierServicesConnection(ctx, enclaveIdentifier)
	return err
}

// GetEnclavesEnclaveIdentifierServicesHistory converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierServicesHistory(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierServicesHistory(ctx, enclaveIdentifier)
	return err
}

// GetEnclavesEnclaveIdentifierServicesServiceIdentifier converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierServicesServiceIdentifier(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// ------------- Path parameter "service_identifier" -------------
	var serviceIdentifier ServiceIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "service_identifier", runtime.ParamLocationPath, ctx.Param("service_identifier"), &serviceIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierServicesServiceIdentifier(ctx, enclaveIdentifier, serviceIdentifier)
	return err
}

// PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// ------------- Path parameter "service_identifier" -------------
	var serviceIdentifier ServiceIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "service_identifier", runtime.ParamLocationPath, ctx.Param("service_identifier"), &serviceIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand(ctx, enclaveIdentifier, serviceIdentifier)
	return err
}

// GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// ------------- Path parameter "service_identifier" -------------
	var serviceIdentifier ServiceIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "service_identifier", runtime.ParamLocationPath, ctx.Param("service_identifier"), &serviceIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_identifier: %s", err))
	}

	// ------------- Path parameter "port_number" -------------
	var portNumber PortNumber

	err = runtime.BindStyledParameterWithLocation("simple", false, "port_number", runtime.ParamLocationPath, ctx.Param("port_number"), &portNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter port_number: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityParams
	// ------------- Optional query parameter "http_method" -------------

	err = runtime.BindQueryParameter("form", true, false, "http_method", ctx.QueryParams(), &params.HttpMethod)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter http_method: %s", err))
	}

	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "initial_delay_milliseconds" -------------

	err = runtime.BindQueryParameter("form", true, false, "initial_delay_milliseconds", ctx.QueryParams(), &params.InitialDelayMilliseconds)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter initial_delay_milliseconds: %s", err))
	}

	// ------------- Optional query parameter "retries" -------------

	err = runtime.BindQueryParameter("form", true, false, "retries", ctx.QueryParams(), &params.Retries)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter retries: %s", err))
	}

	// ------------- Optional query parameter "retries_delay_milliseconds" -------------

	err = runtime.BindQueryParameter("form", true, false, "retries_delay_milliseconds", ctx.QueryParams(), &params.RetriesDelayMilliseconds)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter retries_delay_milliseconds: %s", err))
	}

	// ------------- Optional query parameter "expected_response" -------------

	err = runtime.BindQueryParameter("form", true, false, "expected_response", ctx.QueryParams(), &params.ExpectedResponse)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter expected_response: %s", err))
	}

	// ------------- Optional query parameter "request_body" -------------

	err = runtime.BindQueryParameter("form", true, false, "request_body", ctx.QueryParams(), &params.RequestBody)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter request_body: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability(ctx, enclaveIdentifier, serviceIdentifier, portNumber, params)
	return err
}

// GetEnclavesEnclaveIdentifierStarlark converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclavesEnclaveIdentifierStarlark(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEnclavesEnclaveIdentifierStarlark(ctx, enclaveIdentifier)
	return err
}

// PostEnclavesEnclaveIdentifierStarlarkPackages converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierStarlarkPackages(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierStarlarkPackages(ctx, enclaveIdentifier)
	return err
}

// PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// ------------- Path parameter "package_id" -------------
	var packageId PackageId

	err = runtime.BindStyledParameterWithLocation("simple", false, "package_id", runtime.ParamLocationPath, ctx.Param("package_id"), &packageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter package_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdParams
	// ------------- Optional query parameter "retrieve_logs_async" -------------

	err = runtime.BindQueryParameter("form", true, false, "retrieve_logs_async", ctx.QueryParams(), &params.RetrieveLogsAsync)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter retrieve_logs_async: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId(ctx, enclaveIdentifier, packageId, params)
	return err
}

// PostEnclavesEnclaveIdentifierStarlarkScripts converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclavesEnclaveIdentifierStarlarkScripts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclave_identifier" -------------
	var enclaveIdentifier EnclaveIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "enclave_identifier", runtime.ParamLocationPath, ctx.Param("enclave_identifier"), &enclaveIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclave_identifier: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostEnclavesEnclaveIdentifierStarlarkScriptsParams
	// ------------- Optional query parameter "retrieve_logs_async" -------------

	err = runtime.BindQueryParameter("form", true, false, "retrieve_logs_async", ctx.QueryParams(), &params.RetrieveLogsAsync)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter retrieve_logs_async: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostEnclavesEnclaveIdentifierStarlarkScripts(ctx, enclaveIdentifier, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/enclaves/:enclave_identifier/artifacts", wrapper.GetEnclavesEnclaveIdentifierArtifacts)
	router.POST(baseURL+"/enclaves/:enclave_identifier/artifacts/local-file", wrapper.PostEnclavesEnclaveIdentifierArtifactsLocalFile)
	router.POST(baseURL+"/enclaves/:enclave_identifier/artifacts/remote-file", wrapper.PostEnclavesEnclaveIdentifierArtifactsRemoteFile)
	router.POST(baseURL+"/enclaves/:enclave_identifier/artifacts/services/:service_identifier", wrapper.PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier)
	router.GET(baseURL+"/enclaves/:enclave_identifier/artifacts/:artifact_identifier", wrapper.GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier)
	router.GET(baseURL+"/enclaves/:enclave_identifier/artifacts/:artifact_identifier/download", wrapper.GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload)
	router.GET(baseURL+"/enclaves/:enclave_identifier/services", wrapper.GetEnclavesEnclaveIdentifierServices)
	router.POST(baseURL+"/enclaves/:enclave_identifier/services/connection", wrapper.PostEnclavesEnclaveIdentifierServicesConnection)
	router.GET(baseURL+"/enclaves/:enclave_identifier/services/history", wrapper.GetEnclavesEnclaveIdentifierServicesHistory)
	router.GET(baseURL+"/enclaves/:enclave_identifier/services/:service_identifier", wrapper.GetEnclavesEnclaveIdentifierServicesServiceIdentifier)
	router.POST(baseURL+"/enclaves/:enclave_identifier/services/:service_identifier/command", wrapper.PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand)
	router.GET(baseURL+"/enclaves/:enclave_identifier/services/:service_identifier/endpoints/:port_number/availability", wrapper.GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability)
	router.GET(baseURL+"/enclaves/:enclave_identifier/starlark", wrapper.GetEnclavesEnclaveIdentifierStarlark)
	router.POST(baseURL+"/enclaves/:enclave_identifier/starlark/packages", wrapper.PostEnclavesEnclaveIdentifierStarlarkPackages)
	router.POST(baseURL+"/enclaves/:enclave_identifier/starlark/packages/:package_id", wrapper.PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId)
	router.POST(baseURL+"/enclaves/:enclave_identifier/starlark/scripts", wrapper.PostEnclavesEnclaveIdentifierStarlarkScripts)

}

type NotOkJSONResponse ResponseInfo

type GetEnclavesEnclaveIdentifierArtifactsRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
}

type GetEnclavesEnclaveIdentifierArtifactsResponseObject interface {
	VisitGetEnclavesEnclaveIdentifierArtifactsResponse(w http.ResponseWriter) error
}

type GetEnclavesEnclaveIdentifierArtifacts200JSONResponse []FileArtifactReference

func (response GetEnclavesEnclaveIdentifierArtifacts200JSONResponse) VisitGetEnclavesEnclaveIdentifierArtifactsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEnclavesEnclaveIdentifierArtifactsdefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response GetEnclavesEnclaveIdentifierArtifactsdefaultJSONResponse) VisitGetEnclavesEnclaveIdentifierArtifactsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostEnclavesEnclaveIdentifierArtifactsLocalFileRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	Body              *multipart.Reader
}

type PostEnclavesEnclaveIdentifierArtifactsLocalFileResponseObject interface {
	VisitPostEnclavesEnclaveIdentifierArtifactsLocalFileResponse(w http.ResponseWriter) error
}

type PostEnclavesEnclaveIdentifierArtifactsLocalFile200JSONResponse map[string]FileArtifactUploadResult

func (response PostEnclavesEnclaveIdentifierArtifactsLocalFile200JSONResponse) VisitPostEnclavesEnclaveIdentifierArtifactsLocalFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostEnclavesEnclaveIdentifierArtifactsLocalFiledefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response PostEnclavesEnclaveIdentifierArtifactsLocalFiledefaultJSONResponse) VisitPostEnclavesEnclaveIdentifierArtifactsLocalFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostEnclavesEnclaveIdentifierArtifactsRemoteFileRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	Body              *PostEnclavesEnclaveIdentifierArtifactsRemoteFileJSONRequestBody
}

type PostEnclavesEnclaveIdentifierArtifactsRemoteFileResponseObject interface {
	VisitPostEnclavesEnclaveIdentifierArtifactsRemoteFileResponse(w http.ResponseWriter) error
}

type PostEnclavesEnclaveIdentifierArtifactsRemoteFile200JSONResponse FileArtifactReference

func (response PostEnclavesEnclaveIdentifierArtifactsRemoteFile200JSONResponse) VisitPostEnclavesEnclaveIdentifierArtifactsRemoteFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostEnclavesEnclaveIdentifierArtifactsRemoteFiledefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response PostEnclavesEnclaveIdentifierArtifactsRemoteFiledefaultJSONResponse) VisitPostEnclavesEnclaveIdentifierArtifactsRemoteFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	ServiceIdentifier ServiceIdentifier `json:"service_identifier"`
	Body              *PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierJSONRequestBody
}

type PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierResponseObject interface {
	VisitPostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierResponse(w http.ResponseWriter) error
}

type PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier200JSONResponse FileArtifactReference

func (response PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier200JSONResponse) VisitPostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierdefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierdefaultJSONResponse) VisitPostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierRequestObject struct {
	EnclaveIdentifier  EnclaveIdentifier  `json:"enclave_identifier"`
	ArtifactIdentifier ArtifactIdentifier `json:"artifact_identifier"`
}

type GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierResponseObject interface {
	VisitGetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierResponse(w http.ResponseWriter) error
}

type GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier200JSONResponse []FileArtifactDescription

func (response GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier200JSONResponse) VisitGetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierdefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierdefaultJSONResponse) VisitGetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadRequestObject struct {
	EnclaveIdentifier  EnclaveIdentifier  `json:"enclave_identifier"`
	ArtifactIdentifier ArtifactIdentifier `json:"artifact_identifier"`
}

type GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadResponseObject interface {
	VisitGetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadResponse(w http.ResponseWriter) error
}

type GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload200ApplicationoctetStreamResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload200ApplicationoctetStreamResponse) VisitGetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/octet-stream")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloaddefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloaddefaultJSONResponse) VisitGetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetEnclavesEnclaveIdentifierServicesRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	Params            GetEnclavesEnclaveIdentifierServicesParams
}

type GetEnclavesEnclaveIdentifierServicesResponseObject interface {
	VisitGetEnclavesEnclaveIdentifierServicesResponse(w http.ResponseWriter) error
}

type GetEnclavesEnclaveIdentifierServices200JSONResponse map[string]ServiceInfo

func (response GetEnclavesEnclaveIdentifierServices200JSONResponse) VisitGetEnclavesEnclaveIdentifierServicesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEnclavesEnclaveIdentifierServicesdefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response GetEnclavesEnclaveIdentifierServicesdefaultJSONResponse) VisitGetEnclavesEnclaveIdentifierServicesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostEnclavesEnclaveIdentifierServicesConnectionRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	Body              *PostEnclavesEnclaveIdentifierServicesConnectionJSONRequestBody
}

type PostEnclavesEnclaveIdentifierServicesConnectionResponseObject interface {
	VisitPostEnclavesEnclaveIdentifierServicesConnectionResponse(w http.ResponseWriter) error
}

type PostEnclavesEnclaveIdentifierServicesConnection200Response struct {
}

func (response PostEnclavesEnclaveIdentifierServicesConnection200Response) VisitPostEnclavesEnclaveIdentifierServicesConnectionResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostEnclavesEnclaveIdentifierServicesConnectiondefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response PostEnclavesEnclaveIdentifierServicesConnectiondefaultJSONResponse) VisitPostEnclavesEnclaveIdentifierServicesConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetEnclavesEnclaveIdentifierServicesHistoryRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
}

type GetEnclavesEnclaveIdentifierServicesHistoryResponseObject interface {
	VisitGetEnclavesEnclaveIdentifierServicesHistoryResponse(w http.ResponseWriter) error
}

type GetEnclavesEnclaveIdentifierServicesHistory200JSONResponse []ServiceIdentifiers

func (response GetEnclavesEnclaveIdentifierServicesHistory200JSONResponse) VisitGetEnclavesEnclaveIdentifierServicesHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEnclavesEnclaveIdentifierServicesHistorydefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response GetEnclavesEnclaveIdentifierServicesHistorydefaultJSONResponse) VisitGetEnclavesEnclaveIdentifierServicesHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetEnclavesEnclaveIdentifierServicesServiceIdentifierRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	ServiceIdentifier ServiceIdentifier `json:"service_identifier"`
}

type GetEnclavesEnclaveIdentifierServicesServiceIdentifierResponseObject interface {
	VisitGetEnclavesEnclaveIdentifierServicesServiceIdentifierResponse(w http.ResponseWriter) error
}

type GetEnclavesEnclaveIdentifierServicesServiceIdentifier200JSONResponse ServiceInfo

func (response GetEnclavesEnclaveIdentifierServicesServiceIdentifier200JSONResponse) VisitGetEnclavesEnclaveIdentifierServicesServiceIdentifierResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEnclavesEnclaveIdentifierServicesServiceIdentifierdefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response GetEnclavesEnclaveIdentifierServicesServiceIdentifierdefaultJSONResponse) VisitGetEnclavesEnclaveIdentifierServicesServiceIdentifierResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	ServiceIdentifier ServiceIdentifier `json:"service_identifier"`
	Body              *PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandJSONRequestBody
}

type PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandResponseObject interface {
	VisitPostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandResponse(w http.ResponseWriter) error
}

type PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand200JSONResponse ExecCommandResult

func (response PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand200JSONResponse) VisitPostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommanddefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommanddefaultJSONResponse) VisitPostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	ServiceIdentifier ServiceIdentifier `json:"service_identifier"`
	PortNumber        PortNumber        `json:"port_number"`
	Params            GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityParams
}

type GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityResponseObject interface {
	VisitGetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityResponse(w http.ResponseWriter) error
}

type GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability200Response struct {
}

func (response GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability200Response) VisitGetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilitydefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilitydefaultJSONResponse) VisitGetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetEnclavesEnclaveIdentifierStarlarkRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
}

type GetEnclavesEnclaveIdentifierStarlarkResponseObject interface {
	VisitGetEnclavesEnclaveIdentifierStarlarkResponse(w http.ResponseWriter) error
}

type GetEnclavesEnclaveIdentifierStarlark200JSONResponse StarlarkDescription

func (response GetEnclavesEnclaveIdentifierStarlark200JSONResponse) VisitGetEnclavesEnclaveIdentifierStarlarkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEnclavesEnclaveIdentifierStarlarkdefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response GetEnclavesEnclaveIdentifierStarlarkdefaultJSONResponse) VisitGetEnclavesEnclaveIdentifierStarlarkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostEnclavesEnclaveIdentifierStarlarkPackagesRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	Body              *multipart.Reader
}

type PostEnclavesEnclaveIdentifierStarlarkPackagesResponseObject interface {
	VisitPostEnclavesEnclaveIdentifierStarlarkPackagesResponse(w http.ResponseWriter) error
}

type PostEnclavesEnclaveIdentifierStarlarkPackages200Response struct {
}

func (response PostEnclavesEnclaveIdentifierStarlarkPackages200Response) VisitPostEnclavesEnclaveIdentifierStarlarkPackagesResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostEnclavesEnclaveIdentifierStarlarkPackagesdefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response PostEnclavesEnclaveIdentifierStarlarkPackagesdefaultJSONResponse) VisitPostEnclavesEnclaveIdentifierStarlarkPackagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	PackageId         PackageId         `json:"package_id"`
	Params            PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdParams
	Body              *PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdJSONRequestBody
}

type PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdResponseObject interface {
	VisitPostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdResponse(w http.ResponseWriter) error
}

type PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId200JSONResponse StarlarkRunResponse

func (response PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId200JSONResponse) VisitPostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIddefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIddefaultJSONResponse) VisitPostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostEnclavesEnclaveIdentifierStarlarkScriptsRequestObject struct {
	EnclaveIdentifier EnclaveIdentifier `json:"enclave_identifier"`
	Params            PostEnclavesEnclaveIdentifierStarlarkScriptsParams
	Body              *PostEnclavesEnclaveIdentifierStarlarkScriptsJSONRequestBody
}

type PostEnclavesEnclaveIdentifierStarlarkScriptsResponseObject interface {
	VisitPostEnclavesEnclaveIdentifierStarlarkScriptsResponse(w http.ResponseWriter) error
}

type PostEnclavesEnclaveIdentifierStarlarkScripts200JSONResponse StarlarkRunResponse

func (response PostEnclavesEnclaveIdentifierStarlarkScripts200JSONResponse) VisitPostEnclavesEnclaveIdentifierStarlarkScriptsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostEnclavesEnclaveIdentifierStarlarkScriptsdefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response PostEnclavesEnclaveIdentifierStarlarkScriptsdefaultJSONResponse) VisitPostEnclavesEnclaveIdentifierStarlarkScriptsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all files artifacts
	// (GET /enclaves/{enclave_identifier}/artifacts)
	GetEnclavesEnclaveIdentifierArtifacts(ctx context.Context, request GetEnclavesEnclaveIdentifierArtifactsRequestObject) (GetEnclavesEnclaveIdentifierArtifactsResponseObject, error)
	// Uploads local file artifact to the Kurtosis File System
	// (POST /enclaves/{enclave_identifier}/artifacts/local-file)
	PostEnclavesEnclaveIdentifierArtifactsLocalFile(ctx context.Context, request PostEnclavesEnclaveIdentifierArtifactsLocalFileRequestObject) (PostEnclavesEnclaveIdentifierArtifactsLocalFileResponseObject, error)
	// Add remote file to Kurtosis File System
	// (POST /enclaves/{enclave_identifier}/artifacts/remote-file)
	PostEnclavesEnclaveIdentifierArtifactsRemoteFile(ctx context.Context, request PostEnclavesEnclaveIdentifierArtifactsRemoteFileRequestObject) (PostEnclavesEnclaveIdentifierArtifactsRemoteFileResponseObject, error)
	// Add service's file to Kurtosis File System
	// (POST /enclaves/{enclave_identifier}/artifacts/services/{service_identifier})
	PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier(ctx context.Context, request PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierRequestObject) (PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierResponseObject, error)
	// Inspect the content of a file artifact
	// (GET /enclaves/{enclave_identifier}/artifacts/{artifact_identifier})
	GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier(ctx context.Context, request GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierRequestObject) (GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierResponseObject, error)
	// Downloads a files artifact from the Kurtosis File System
	// (GET /enclaves/{enclave_identifier}/artifacts/{artifact_identifier}/download)
	GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload(ctx context.Context, request GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadRequestObject) (GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadResponseObject, error)
	// Returns detailed information about alls services within the enclave
	// (GET /enclaves/{enclave_identifier}/services)
	GetEnclavesEnclaveIdentifierServices(ctx context.Context, request GetEnclavesEnclaveIdentifierServicesRequestObject) (GetEnclavesEnclaveIdentifierServicesResponseObject, error)
	// User services port forwarding
	// (POST /enclaves/{enclave_identifier}/services/connection)
	PostEnclavesEnclaveIdentifierServicesConnection(ctx context.Context, request PostEnclavesEnclaveIdentifierServicesConnectionRequestObject) (PostEnclavesEnclaveIdentifierServicesConnectionResponseObject, error)
	// Returns information about all existing & historical services
	// (GET /enclaves/{enclave_identifier}/services/history)
	GetEnclavesEnclaveIdentifierServicesHistory(ctx context.Context, request GetEnclavesEnclaveIdentifierServicesHistoryRequestObject) (GetEnclavesEnclaveIdentifierServicesHistoryResponseObject, error)
	// Returns detailed information about a specific service
	// (GET /enclaves/{enclave_identifier}/services/{service_identifier})
	GetEnclavesEnclaveIdentifierServicesServiceIdentifier(ctx context.Context, request GetEnclavesEnclaveIdentifierServicesServiceIdentifierRequestObject) (GetEnclavesEnclaveIdentifierServicesServiceIdentifierResponseObject, error)
	// Executes the given command inside a running service's container
	// (POST /enclaves/{enclave_identifier}/services/{service_identifier}/command)
	PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand(ctx context.Context, request PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandRequestObject) (PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandResponseObject, error)
	// Check for service availability
	// (GET /enclaves/{enclave_identifier}/services/{service_identifier}/endpoints/{port_number}/availability)
	GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability(ctx context.Context, request GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityRequestObject) (GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityResponseObject, error)
	// Get last Starlark run
	// (GET /enclaves/{enclave_identifier}/starlark)
	GetEnclavesEnclaveIdentifierStarlark(ctx context.Context, request GetEnclavesEnclaveIdentifierStarlarkRequestObject) (GetEnclavesEnclaveIdentifierStarlarkResponseObject, error)
	// Uploads a Starlark package
	// (POST /enclaves/{enclave_identifier}/starlark/packages)
	PostEnclavesEnclaveIdentifierStarlarkPackages(ctx context.Context, request PostEnclavesEnclaveIdentifierStarlarkPackagesRequestObject) (PostEnclavesEnclaveIdentifierStarlarkPackagesResponseObject, error)
	// Executes a Starlark package on the user's behalf
	// (POST /enclaves/{enclave_identifier}/starlark/packages/{package_id})
	PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId(ctx context.Context, request PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdRequestObject) (PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdResponseObject, error)
	// Executes a Starlark script on the user's behalf
	// (POST /enclaves/{enclave_identifier}/starlark/scripts)
	PostEnclavesEnclaveIdentifierStarlarkScripts(ctx context.Context, request PostEnclavesEnclaveIdentifierStarlarkScriptsRequestObject) (PostEnclavesEnclaveIdentifierStarlarkScriptsResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetEnclavesEnclaveIdentifierArtifacts operation middleware
func (sh *strictHandler) GetEnclavesEnclaveIdentifierArtifacts(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error {
	var request GetEnclavesEnclaveIdentifierArtifactsRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclavesEnclaveIdentifierArtifacts(ctx.Request().Context(), request.(GetEnclavesEnclaveIdentifierArtifactsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclavesEnclaveIdentifierArtifacts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesEnclaveIdentifierArtifactsResponseObject); ok {
		return validResponse.VisitGetEnclavesEnclaveIdentifierArtifactsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostEnclavesEnclaveIdentifierArtifactsLocalFile operation middleware
func (sh *strictHandler) PostEnclavesEnclaveIdentifierArtifactsLocalFile(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error {
	var request PostEnclavesEnclaveIdentifierArtifactsLocalFileRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	if reader, err := ctx.Request().MultipartReader(); err != nil {
		return err
	} else {
		request.Body = reader
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclavesEnclaveIdentifierArtifactsLocalFile(ctx.Request().Context(), request.(PostEnclavesEnclaveIdentifierArtifactsLocalFileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclavesEnclaveIdentifierArtifactsLocalFile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesEnclaveIdentifierArtifactsLocalFileResponseObject); ok {
		return validResponse.VisitPostEnclavesEnclaveIdentifierArtifactsLocalFileResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostEnclavesEnclaveIdentifierArtifactsRemoteFile operation middleware
func (sh *strictHandler) PostEnclavesEnclaveIdentifierArtifactsRemoteFile(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error {
	var request PostEnclavesEnclaveIdentifierArtifactsRemoteFileRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	var body PostEnclavesEnclaveIdentifierArtifactsRemoteFileJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclavesEnclaveIdentifierArtifactsRemoteFile(ctx.Request().Context(), request.(PostEnclavesEnclaveIdentifierArtifactsRemoteFileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclavesEnclaveIdentifierArtifactsRemoteFile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesEnclaveIdentifierArtifactsRemoteFileResponseObject); ok {
		return validResponse.VisitPostEnclavesEnclaveIdentifierArtifactsRemoteFileResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier operation middleware
func (sh *strictHandler) PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, serviceIdentifier ServiceIdentifier) error {
	var request PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierRequestObject

	request.EnclaveIdentifier = enclaveIdentifier
	request.ServiceIdentifier = serviceIdentifier

	var body PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier(ctx.Request().Context(), request.(PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifier")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierResponseObject); ok {
		return validResponse.VisitPostEnclavesEnclaveIdentifierArtifactsServicesServiceIdentifierResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier operation middleware
func (sh *strictHandler) GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, artifactIdentifier ArtifactIdentifier) error {
	var request GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierRequestObject

	request.EnclaveIdentifier = enclaveIdentifier
	request.ArtifactIdentifier = artifactIdentifier

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier(ctx.Request().Context(), request.(GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifier")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierResponseObject); ok {
		return validResponse.VisitGetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload operation middleware
func (sh *strictHandler) GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, artifactIdentifier ArtifactIdentifier) error {
	var request GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadRequestObject

	request.EnclaveIdentifier = enclaveIdentifier
	request.ArtifactIdentifier = artifactIdentifier

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload(ctx.Request().Context(), request.(GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownload")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadResponseObject); ok {
		return validResponse.VisitGetEnclavesEnclaveIdentifierArtifactsArtifactIdentifierDownloadResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetEnclavesEnclaveIdentifierServices operation middleware
func (sh *strictHandler) GetEnclavesEnclaveIdentifierServices(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, params GetEnclavesEnclaveIdentifierServicesParams) error {
	var request GetEnclavesEnclaveIdentifierServicesRequestObject

	request.EnclaveIdentifier = enclaveIdentifier
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclavesEnclaveIdentifierServices(ctx.Request().Context(), request.(GetEnclavesEnclaveIdentifierServicesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclavesEnclaveIdentifierServices")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesEnclaveIdentifierServicesResponseObject); ok {
		return validResponse.VisitGetEnclavesEnclaveIdentifierServicesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostEnclavesEnclaveIdentifierServicesConnection operation middleware
func (sh *strictHandler) PostEnclavesEnclaveIdentifierServicesConnection(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error {
	var request PostEnclavesEnclaveIdentifierServicesConnectionRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	var body PostEnclavesEnclaveIdentifierServicesConnectionJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclavesEnclaveIdentifierServicesConnection(ctx.Request().Context(), request.(PostEnclavesEnclaveIdentifierServicesConnectionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclavesEnclaveIdentifierServicesConnection")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesEnclaveIdentifierServicesConnectionResponseObject); ok {
		return validResponse.VisitPostEnclavesEnclaveIdentifierServicesConnectionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetEnclavesEnclaveIdentifierServicesHistory operation middleware
func (sh *strictHandler) GetEnclavesEnclaveIdentifierServicesHistory(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error {
	var request GetEnclavesEnclaveIdentifierServicesHistoryRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclavesEnclaveIdentifierServicesHistory(ctx.Request().Context(), request.(GetEnclavesEnclaveIdentifierServicesHistoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclavesEnclaveIdentifierServicesHistory")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesEnclaveIdentifierServicesHistoryResponseObject); ok {
		return validResponse.VisitGetEnclavesEnclaveIdentifierServicesHistoryResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetEnclavesEnclaveIdentifierServicesServiceIdentifier operation middleware
func (sh *strictHandler) GetEnclavesEnclaveIdentifierServicesServiceIdentifier(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, serviceIdentifier ServiceIdentifier) error {
	var request GetEnclavesEnclaveIdentifierServicesServiceIdentifierRequestObject

	request.EnclaveIdentifier = enclaveIdentifier
	request.ServiceIdentifier = serviceIdentifier

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclavesEnclaveIdentifierServicesServiceIdentifier(ctx.Request().Context(), request.(GetEnclavesEnclaveIdentifierServicesServiceIdentifierRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclavesEnclaveIdentifierServicesServiceIdentifier")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesEnclaveIdentifierServicesServiceIdentifierResponseObject); ok {
		return validResponse.VisitGetEnclavesEnclaveIdentifierServicesServiceIdentifierResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand operation middleware
func (sh *strictHandler) PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, serviceIdentifier ServiceIdentifier) error {
	var request PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandRequestObject

	request.EnclaveIdentifier = enclaveIdentifier
	request.ServiceIdentifier = serviceIdentifier

	var body PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand(ctx.Request().Context(), request.(PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommand")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandResponseObject); ok {
		return validResponse.VisitPostEnclavesEnclaveIdentifierServicesServiceIdentifierCommandResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability operation middleware
func (sh *strictHandler) GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, serviceIdentifier ServiceIdentifier, portNumber PortNumber, params GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityParams) error {
	var request GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityRequestObject

	request.EnclaveIdentifier = enclaveIdentifier
	request.ServiceIdentifier = serviceIdentifier
	request.PortNumber = portNumber
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability(ctx.Request().Context(), request.(GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailability")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityResponseObject); ok {
		return validResponse.VisitGetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetEnclavesEnclaveIdentifierStarlark operation middleware
func (sh *strictHandler) GetEnclavesEnclaveIdentifierStarlark(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error {
	var request GetEnclavesEnclaveIdentifierStarlarkRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnclavesEnclaveIdentifierStarlark(ctx.Request().Context(), request.(GetEnclavesEnclaveIdentifierStarlarkRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnclavesEnclaveIdentifierStarlark")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetEnclavesEnclaveIdentifierStarlarkResponseObject); ok {
		return validResponse.VisitGetEnclavesEnclaveIdentifierStarlarkResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostEnclavesEnclaveIdentifierStarlarkPackages operation middleware
func (sh *strictHandler) PostEnclavesEnclaveIdentifierStarlarkPackages(ctx echo.Context, enclaveIdentifier EnclaveIdentifier) error {
	var request PostEnclavesEnclaveIdentifierStarlarkPackagesRequestObject

	request.EnclaveIdentifier = enclaveIdentifier

	if reader, err := ctx.Request().MultipartReader(); err != nil {
		return err
	} else {
		request.Body = reader
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclavesEnclaveIdentifierStarlarkPackages(ctx.Request().Context(), request.(PostEnclavesEnclaveIdentifierStarlarkPackagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclavesEnclaveIdentifierStarlarkPackages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesEnclaveIdentifierStarlarkPackagesResponseObject); ok {
		return validResponse.VisitPostEnclavesEnclaveIdentifierStarlarkPackagesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId operation middleware
func (sh *strictHandler) PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, packageId PackageId, params PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdParams) error {
	var request PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdRequestObject

	request.EnclaveIdentifier = enclaveIdentifier
	request.PackageId = packageId
	request.Params = params

	var body PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId(ctx.Request().Context(), request.(PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclavesEnclaveIdentifierStarlarkPackagesPackageId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdResponseObject); ok {
		return validResponse.VisitPostEnclavesEnclaveIdentifierStarlarkPackagesPackageIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostEnclavesEnclaveIdentifierStarlarkScripts operation middleware
func (sh *strictHandler) PostEnclavesEnclaveIdentifierStarlarkScripts(ctx echo.Context, enclaveIdentifier EnclaveIdentifier, params PostEnclavesEnclaveIdentifierStarlarkScriptsParams) error {
	var request PostEnclavesEnclaveIdentifierStarlarkScriptsRequestObject

	request.EnclaveIdentifier = enclaveIdentifier
	request.Params = params

	var body PostEnclavesEnclaveIdentifierStarlarkScriptsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostEnclavesEnclaveIdentifierStarlarkScripts(ctx.Request().Context(), request.(PostEnclavesEnclaveIdentifierStarlarkScriptsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEnclavesEnclaveIdentifierStarlarkScripts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostEnclavesEnclaveIdentifierStarlarkScriptsResponseObject); ok {
		return validResponse.VisitPostEnclavesEnclaveIdentifierStarlarkScriptsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"+/8BAAD//z+MtuXcZQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
