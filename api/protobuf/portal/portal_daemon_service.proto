syntax = "proto3";
package portal_daemon_api;

// NOTE: It sucks that we have this Go-specific logic inside this file (which should be language-agnostic). However, the Protobuf team have
// taken a hard stance on this being the way it should be done, so we have to do it this way.
option go_package = "github.com/kurtosis-tech/kurtosis/api/golang/portal/kurtosis_portal_rpc_api_bindings";

service KurtosisPortalDaemon {
  // To check availability
  rpc Ping(PortalPing) returns (PortalPong) {}

  rpc CreateUserServicePortForward(CreateUserServicePortForwardArgs) returns (CreateUserServicePortForwardResponse) {};

  rpc RemoveUserServicePortForward(EnclaveServicePortId) returns (RemoveUserServicePortForwardResponse) {};
}

// may specify a specific port, or an entire enclave's worth of services and ports
message EnclaveServicePortId {
  string enclave_id = 1;

  optional string service_id = 2;

  optional string port_id = 3;
}

message ForwardedServicePort {
  string enclave_id = 1;

  string service_id = 2;

  string port_id = 3;

  uint32 local_port_number = 4;
}

message CreateUserServicePortForwardArgs {
  EnclaveServicePortId enclaveServicePortId = 1;

  optional uint32 local_port_number = 2;
}

message CreateUserServicePortForwardResponse {
  repeated ForwardedServicePort forwarded_port_numbers = 1;
}

message RemoveUserServicePortForwardResponse {

}

message PortalPing {
}

message PortalPong {
}
