/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: engine_service.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/empty";
import * as dependency_2 from "./google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace engine_api {
    export enum EnclaveMode {
        TEST = 0,
        PRODUCTION = 1
    }
    export enum EnclaveContainersStatus {
        EnclaveContainersStatus_EMPTY = 0,
        EnclaveContainersStatus_RUNNING = 1,
        EnclaveContainersStatus_STOPPED = 2
    }
    export enum EnclaveAPIContainerStatus {
        EnclaveAPIContainerStatus_NONEXISTENT = 0,
        EnclaveAPIContainerStatus_RUNNING = 1,
        EnclaveAPIContainerStatus_STOPPED = 2
    }
    export enum LogLineOperator {
        LogLineOperator_DOES_CONTAIN_TEXT = 0,
        LogLineOperator_DOES_NOT_CONTAIN_TEXT = 1,
        LogLineOperator_DOES_CONTAIN_MATCH_REGEX = 2,
        LogLineOperator_DOES_NOT_CONTAIN_MATCH_REGEX = 3
    }
    export class GetEngineInfoResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            engine_version?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("engine_version" in data && data.engine_version != undefined) {
                    this.engine_version = data.engine_version;
                }
            }
        }
        get engine_version() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set engine_version(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            engine_version?: string;
        }): GetEngineInfoResponse {
            const message = new GetEngineInfoResponse({});
            if (data.engine_version != null) {
                message.engine_version = data.engine_version;
            }
            return message;
        }
        toObject() {
            const data: {
                engine_version?: string;
            } = {};
            if (this.engine_version != null) {
                data.engine_version = this.engine_version;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.engine_version.length)
                writer.writeString(1, this.engine_version);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetEngineInfoResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetEngineInfoResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.engine_version = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetEngineInfoResponse {
            return GetEngineInfoResponse.deserialize(bytes);
        }
    }
    export class CreateEnclaveArgs extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2], [3], [4], [5]];
        constructor(data?: any[] | ({} & (({
            enclave_name?: string;
        }) | ({
            api_container_version_tag?: string;
        }) | ({
            api_container_log_level?: string;
        }) | ({
            mode?: EnclaveMode;
        }) | ({
            should_apic_run_in_debug_mode?: boolean;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("enclave_name" in data && data.enclave_name != undefined) {
                    this.enclave_name = data.enclave_name;
                }
                if ("api_container_version_tag" in data && data.api_container_version_tag != undefined) {
                    this.api_container_version_tag = data.api_container_version_tag;
                }
                if ("api_container_log_level" in data && data.api_container_log_level != undefined) {
                    this.api_container_log_level = data.api_container_log_level;
                }
                if ("mode" in data && data.mode != undefined) {
                    this.mode = data.mode;
                }
                if ("should_apic_run_in_debug_mode" in data && data.should_apic_run_in_debug_mode != undefined) {
                    this.should_apic_run_in_debug_mode = data.should_apic_run_in_debug_mode;
                }
            }
        }
        get enclave_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set enclave_name(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_enclave_name() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get api_container_version_tag() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set api_container_version_tag(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_api_container_version_tag() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get api_container_log_level() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set api_container_log_level(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[2], value);
        }
        get has_api_container_log_level() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get mode() {
            return pb_1.Message.getFieldWithDefault(this, 4, EnclaveMode.TEST) as EnclaveMode;
        }
        set mode(value: EnclaveMode) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[3], value);
        }
        get has_mode() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get should_apic_run_in_debug_mode() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set should_apic_run_in_debug_mode(value: boolean) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[4], value);
        }
        get has_should_apic_run_in_debug_mode() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get _enclave_name() {
            const cases: {
                [index: number]: "none" | "enclave_name";
            } = {
                0: "none",
                1: "enclave_name"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _api_container_version_tag() {
            const cases: {
                [index: number]: "none" | "api_container_version_tag";
            } = {
                0: "none",
                2: "api_container_version_tag"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _api_container_log_level() {
            const cases: {
                [index: number]: "none" | "api_container_log_level";
            } = {
                0: "none",
                3: "api_container_log_level"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _mode() {
            const cases: {
                [index: number]: "none" | "mode";
            } = {
                0: "none",
                4: "mode"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        get _should_apic_run_in_debug_mode() {
            const cases: {
                [index: number]: "none" | "should_apic_run_in_debug_mode";
            } = {
                0: "none",
                5: "should_apic_run_in_debug_mode"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        static fromObject(data: {
            enclave_name?: string;
            api_container_version_tag?: string;
            api_container_log_level?: string;
            mode?: EnclaveMode;
            should_apic_run_in_debug_mode?: boolean;
        }): CreateEnclaveArgs {
            const message = new CreateEnclaveArgs({});
            if (data.enclave_name != null) {
                message.enclave_name = data.enclave_name;
            }
            if (data.api_container_version_tag != null) {
                message.api_container_version_tag = data.api_container_version_tag;
            }
            if (data.api_container_log_level != null) {
                message.api_container_log_level = data.api_container_log_level;
            }
            if (data.mode != null) {
                message.mode = data.mode;
            }
            if (data.should_apic_run_in_debug_mode != null) {
                message.should_apic_run_in_debug_mode = data.should_apic_run_in_debug_mode;
            }
            return message;
        }
        toObject() {
            const data: {
                enclave_name?: string;
                api_container_version_tag?: string;
                api_container_log_level?: string;
                mode?: EnclaveMode;
                should_apic_run_in_debug_mode?: boolean;
            } = {};
            if (this.enclave_name != null) {
                data.enclave_name = this.enclave_name;
            }
            if (this.api_container_version_tag != null) {
                data.api_container_version_tag = this.api_container_version_tag;
            }
            if (this.api_container_log_level != null) {
                data.api_container_log_level = this.api_container_log_level;
            }
            if (this.mode != null) {
                data.mode = this.mode;
            }
            if (this.should_apic_run_in_debug_mode != null) {
                data.should_apic_run_in_debug_mode = this.should_apic_run_in_debug_mode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_enclave_name)
                writer.writeString(1, this.enclave_name);
            if (this.has_api_container_version_tag)
                writer.writeString(2, this.api_container_version_tag);
            if (this.has_api_container_log_level)
                writer.writeString(3, this.api_container_log_level);
            if (this.has_mode)
                writer.writeEnum(4, this.mode);
            if (this.has_should_apic_run_in_debug_mode)
                writer.writeBool(5, this.should_apic_run_in_debug_mode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateEnclaveArgs {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateEnclaveArgs();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.enclave_name = reader.readString();
                        break;
                    case 2:
                        message.api_container_version_tag = reader.readString();
                        break;
                    case 3:
                        message.api_container_log_level = reader.readString();
                        break;
                    case 4:
                        message.mode = reader.readEnum();
                        break;
                    case 5:
                        message.should_apic_run_in_debug_mode = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateEnclaveArgs {
            return CreateEnclaveArgs.deserialize(bytes);
        }
    }
    export class CreateEnclaveResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            enclave_info?: EnclaveInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("enclave_info" in data && data.enclave_info != undefined) {
                    this.enclave_info = data.enclave_info;
                }
            }
        }
        get enclave_info() {
            return pb_1.Message.getWrapperField(this, EnclaveInfo, 1) as EnclaveInfo;
        }
        set enclave_info(value: EnclaveInfo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_enclave_info() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            enclave_info?: ReturnType<typeof EnclaveInfo.prototype.toObject>;
        }): CreateEnclaveResponse {
            const message = new CreateEnclaveResponse({});
            if (data.enclave_info != null) {
                message.enclave_info = EnclaveInfo.fromObject(data.enclave_info);
            }
            return message;
        }
        toObject() {
            const data: {
                enclave_info?: ReturnType<typeof EnclaveInfo.prototype.toObject>;
            } = {};
            if (this.enclave_info != null) {
                data.enclave_info = this.enclave_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_enclave_info)
                writer.writeMessage(1, this.enclave_info, () => this.enclave_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateEnclaveResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateEnclaveResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.enclave_info, () => message.enclave_info = EnclaveInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateEnclaveResponse {
            return CreateEnclaveResponse.deserialize(bytes);
        }
    }
    export class EnclaveAPIContainerInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            container_id?: string;
            ip_inside_enclave?: string;
            grpc_port_inside_enclave?: number;
            bridge_ip_address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("container_id" in data && data.container_id != undefined) {
                    this.container_id = data.container_id;
                }
                if ("ip_inside_enclave" in data && data.ip_inside_enclave != undefined) {
                    this.ip_inside_enclave = data.ip_inside_enclave;
                }
                if ("grpc_port_inside_enclave" in data && data.grpc_port_inside_enclave != undefined) {
                    this.grpc_port_inside_enclave = data.grpc_port_inside_enclave;
                }
                if ("bridge_ip_address" in data && data.bridge_ip_address != undefined) {
                    this.bridge_ip_address = data.bridge_ip_address;
                }
            }
        }
        get container_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set container_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get ip_inside_enclave() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set ip_inside_enclave(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get grpc_port_inside_enclave() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set grpc_port_inside_enclave(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get bridge_ip_address() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set bridge_ip_address(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            container_id?: string;
            ip_inside_enclave?: string;
            grpc_port_inside_enclave?: number;
            bridge_ip_address?: string;
        }): EnclaveAPIContainerInfo {
            const message = new EnclaveAPIContainerInfo({});
            if (data.container_id != null) {
                message.container_id = data.container_id;
            }
            if (data.ip_inside_enclave != null) {
                message.ip_inside_enclave = data.ip_inside_enclave;
            }
            if (data.grpc_port_inside_enclave != null) {
                message.grpc_port_inside_enclave = data.grpc_port_inside_enclave;
            }
            if (data.bridge_ip_address != null) {
                message.bridge_ip_address = data.bridge_ip_address;
            }
            return message;
        }
        toObject() {
            const data: {
                container_id?: string;
                ip_inside_enclave?: string;
                grpc_port_inside_enclave?: number;
                bridge_ip_address?: string;
            } = {};
            if (this.container_id != null) {
                data.container_id = this.container_id;
            }
            if (this.ip_inside_enclave != null) {
                data.ip_inside_enclave = this.ip_inside_enclave;
            }
            if (this.grpc_port_inside_enclave != null) {
                data.grpc_port_inside_enclave = this.grpc_port_inside_enclave;
            }
            if (this.bridge_ip_address != null) {
                data.bridge_ip_address = this.bridge_ip_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.container_id.length)
                writer.writeString(1, this.container_id);
            if (this.ip_inside_enclave.length)
                writer.writeString(2, this.ip_inside_enclave);
            if (this.grpc_port_inside_enclave != 0)
                writer.writeUint32(3, this.grpc_port_inside_enclave);
            if (this.bridge_ip_address.length)
                writer.writeString(6, this.bridge_ip_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EnclaveAPIContainerInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EnclaveAPIContainerInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.container_id = reader.readString();
                        break;
                    case 2:
                        message.ip_inside_enclave = reader.readString();
                        break;
                    case 3:
                        message.grpc_port_inside_enclave = reader.readUint32();
                        break;
                    case 6:
                        message.bridge_ip_address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EnclaveAPIContainerInfo {
            return EnclaveAPIContainerInfo.deserialize(bytes);
        }
    }
    export class EnclaveAPIContainerHostMachineInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ip_on_host_machine?: string;
            grpc_port_on_host_machine?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ip_on_host_machine" in data && data.ip_on_host_machine != undefined) {
                    this.ip_on_host_machine = data.ip_on_host_machine;
                }
                if ("grpc_port_on_host_machine" in data && data.grpc_port_on_host_machine != undefined) {
                    this.grpc_port_on_host_machine = data.grpc_port_on_host_machine;
                }
            }
        }
        get ip_on_host_machine() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ip_on_host_machine(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get grpc_port_on_host_machine() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set grpc_port_on_host_machine(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            ip_on_host_machine?: string;
            grpc_port_on_host_machine?: number;
        }): EnclaveAPIContainerHostMachineInfo {
            const message = new EnclaveAPIContainerHostMachineInfo({});
            if (data.ip_on_host_machine != null) {
                message.ip_on_host_machine = data.ip_on_host_machine;
            }
            if (data.grpc_port_on_host_machine != null) {
                message.grpc_port_on_host_machine = data.grpc_port_on_host_machine;
            }
            return message;
        }
        toObject() {
            const data: {
                ip_on_host_machine?: string;
                grpc_port_on_host_machine?: number;
            } = {};
            if (this.ip_on_host_machine != null) {
                data.ip_on_host_machine = this.ip_on_host_machine;
            }
            if (this.grpc_port_on_host_machine != null) {
                data.grpc_port_on_host_machine = this.grpc_port_on_host_machine;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ip_on_host_machine.length)
                writer.writeString(4, this.ip_on_host_machine);
            if (this.grpc_port_on_host_machine != 0)
                writer.writeUint32(5, this.grpc_port_on_host_machine);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EnclaveAPIContainerHostMachineInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EnclaveAPIContainerHostMachineInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 4:
                        message.ip_on_host_machine = reader.readString();
                        break;
                    case 5:
                        message.grpc_port_on_host_machine = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EnclaveAPIContainerHostMachineInfo {
            return EnclaveAPIContainerHostMachineInfo.deserialize(bytes);
        }
    }
    export class EnclaveInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            enclave_uuid?: string;
            name?: string;
            shortened_uuid?: string;
            containers_status?: EnclaveContainersStatus;
            api_container_status?: EnclaveAPIContainerStatus;
            api_container_info?: EnclaveAPIContainerInfo;
            api_container_host_machine_info?: EnclaveAPIContainerHostMachineInfo;
            creation_time?: dependency_2.google.protobuf.Timestamp;
            mode?: EnclaveMode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("enclave_uuid" in data && data.enclave_uuid != undefined) {
                    this.enclave_uuid = data.enclave_uuid;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("shortened_uuid" in data && data.shortened_uuid != undefined) {
                    this.shortened_uuid = data.shortened_uuid;
                }
                if ("containers_status" in data && data.containers_status != undefined) {
                    this.containers_status = data.containers_status;
                }
                if ("api_container_status" in data && data.api_container_status != undefined) {
                    this.api_container_status = data.api_container_status;
                }
                if ("api_container_info" in data && data.api_container_info != undefined) {
                    this.api_container_info = data.api_container_info;
                }
                if ("api_container_host_machine_info" in data && data.api_container_host_machine_info != undefined) {
                    this.api_container_host_machine_info = data.api_container_host_machine_info;
                }
                if ("creation_time" in data && data.creation_time != undefined) {
                    this.creation_time = data.creation_time;
                }
                if ("mode" in data && data.mode != undefined) {
                    this.mode = data.mode;
                }
            }
        }
        get enclave_uuid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set enclave_uuid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get shortened_uuid() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set shortened_uuid(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get containers_status() {
            return pb_1.Message.getFieldWithDefault(this, 4, EnclaveContainersStatus.EnclaveContainersStatus_EMPTY) as EnclaveContainersStatus;
        }
        set containers_status(value: EnclaveContainersStatus) {
            pb_1.Message.setField(this, 4, value);
        }
        get api_container_status() {
            return pb_1.Message.getFieldWithDefault(this, 5, EnclaveAPIContainerStatus.EnclaveAPIContainerStatus_NONEXISTENT) as EnclaveAPIContainerStatus;
        }
        set api_container_status(value: EnclaveAPIContainerStatus) {
            pb_1.Message.setField(this, 5, value);
        }
        get api_container_info() {
            return pb_1.Message.getWrapperField(this, EnclaveAPIContainerInfo, 6) as EnclaveAPIContainerInfo;
        }
        set api_container_info(value: EnclaveAPIContainerInfo) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_api_container_info() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get api_container_host_machine_info() {
            return pb_1.Message.getWrapperField(this, EnclaveAPIContainerHostMachineInfo, 7) as EnclaveAPIContainerHostMachineInfo;
        }
        set api_container_host_machine_info(value: EnclaveAPIContainerHostMachineInfo) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_api_container_host_machine_info() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get creation_time() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 8) as dependency_2.google.protobuf.Timestamp;
        }
        set creation_time(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_creation_time() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get mode() {
            return pb_1.Message.getFieldWithDefault(this, 9, EnclaveMode.TEST) as EnclaveMode;
        }
        set mode(value: EnclaveMode) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            enclave_uuid?: string;
            name?: string;
            shortened_uuid?: string;
            containers_status?: EnclaveContainersStatus;
            api_container_status?: EnclaveAPIContainerStatus;
            api_container_info?: ReturnType<typeof EnclaveAPIContainerInfo.prototype.toObject>;
            api_container_host_machine_info?: ReturnType<typeof EnclaveAPIContainerHostMachineInfo.prototype.toObject>;
            creation_time?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            mode?: EnclaveMode;
        }): EnclaveInfo {
            const message = new EnclaveInfo({});
            if (data.enclave_uuid != null) {
                message.enclave_uuid = data.enclave_uuid;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.shortened_uuid != null) {
                message.shortened_uuid = data.shortened_uuid;
            }
            if (data.containers_status != null) {
                message.containers_status = data.containers_status;
            }
            if (data.api_container_status != null) {
                message.api_container_status = data.api_container_status;
            }
            if (data.api_container_info != null) {
                message.api_container_info = EnclaveAPIContainerInfo.fromObject(data.api_container_info);
            }
            if (data.api_container_host_machine_info != null) {
                message.api_container_host_machine_info = EnclaveAPIContainerHostMachineInfo.fromObject(data.api_container_host_machine_info);
            }
            if (data.creation_time != null) {
                message.creation_time = dependency_2.google.protobuf.Timestamp.fromObject(data.creation_time);
            }
            if (data.mode != null) {
                message.mode = data.mode;
            }
            return message;
        }
        toObject() {
            const data: {
                enclave_uuid?: string;
                name?: string;
                shortened_uuid?: string;
                containers_status?: EnclaveContainersStatus;
                api_container_status?: EnclaveAPIContainerStatus;
                api_container_info?: ReturnType<typeof EnclaveAPIContainerInfo.prototype.toObject>;
                api_container_host_machine_info?: ReturnType<typeof EnclaveAPIContainerHostMachineInfo.prototype.toObject>;
                creation_time?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
                mode?: EnclaveMode;
            } = {};
            if (this.enclave_uuid != null) {
                data.enclave_uuid = this.enclave_uuid;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.shortened_uuid != null) {
                data.shortened_uuid = this.shortened_uuid;
            }
            if (this.containers_status != null) {
                data.containers_status = this.containers_status;
            }
            if (this.api_container_status != null) {
                data.api_container_status = this.api_container_status;
            }
            if (this.api_container_info != null) {
                data.api_container_info = this.api_container_info.toObject();
            }
            if (this.api_container_host_machine_info != null) {
                data.api_container_host_machine_info = this.api_container_host_machine_info.toObject();
            }
            if (this.creation_time != null) {
                data.creation_time = this.creation_time.toObject();
            }
            if (this.mode != null) {
                data.mode = this.mode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.enclave_uuid.length)
                writer.writeString(1, this.enclave_uuid);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.shortened_uuid.length)
                writer.writeString(3, this.shortened_uuid);
            if (this.containers_status != EnclaveContainersStatus.EnclaveContainersStatus_EMPTY)
                writer.writeEnum(4, this.containers_status);
            if (this.api_container_status != EnclaveAPIContainerStatus.EnclaveAPIContainerStatus_NONEXISTENT)
                writer.writeEnum(5, this.api_container_status);
            if (this.has_api_container_info)
                writer.writeMessage(6, this.api_container_info, () => this.api_container_info.serialize(writer));
            if (this.has_api_container_host_machine_info)
                writer.writeMessage(7, this.api_container_host_machine_info, () => this.api_container_host_machine_info.serialize(writer));
            if (this.has_creation_time)
                writer.writeMessage(8, this.creation_time, () => this.creation_time.serialize(writer));
            if (this.mode != EnclaveMode.TEST)
                writer.writeEnum(9, this.mode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EnclaveInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EnclaveInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.enclave_uuid = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.shortened_uuid = reader.readString();
                        break;
                    case 4:
                        message.containers_status = reader.readEnum();
                        break;
                    case 5:
                        message.api_container_status = reader.readEnum();
                        break;
                    case 6:
                        reader.readMessage(message.api_container_info, () => message.api_container_info = EnclaveAPIContainerInfo.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.api_container_host_machine_info, () => message.api_container_host_machine_info = EnclaveAPIContainerHostMachineInfo.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.creation_time, () => message.creation_time = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 9:
                        message.mode = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EnclaveInfo {
            return EnclaveInfo.deserialize(bytes);
        }
    }
    export class GetEnclavesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            enclave_info?: Map<string, EnclaveInfo>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("enclave_info" in data && data.enclave_info != undefined) {
                    this.enclave_info = data.enclave_info;
                }
            }
            if (!this.enclave_info)
                this.enclave_info = new Map();
        }
        get enclave_info() {
            return pb_1.Message.getField(this, 1) as any as Map<string, EnclaveInfo>;
        }
        set enclave_info(value: Map<string, EnclaveInfo>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        static fromObject(data: {
            enclave_info?: {
                [key: string]: ReturnType<typeof EnclaveInfo.prototype.toObject>;
            };
        }): GetEnclavesResponse {
            const message = new GetEnclavesResponse({});
            if (typeof data.enclave_info == "object") {
                message.enclave_info = new Map(Object.entries(data.enclave_info).map(([key, value]) => [key, EnclaveInfo.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                enclave_info?: {
                    [key: string]: ReturnType<typeof EnclaveInfo.prototype.toObject>;
                };
            } = {};
            if (this.enclave_info != null) {
                data.enclave_info = (Object.fromEntries)((Array.from)(this.enclave_info).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.enclave_info) {
                writer.writeMessage(1, this.enclave_info, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetEnclavesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetEnclavesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.enclave_info as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = EnclaveInfo.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetEnclavesResponse {
            return GetEnclavesResponse.deserialize(bytes);
        }
    }
    export class EnclaveIdentifiers extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            enclave_uuid?: string;
            name?: string;
            shortened_uuid?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("enclave_uuid" in data && data.enclave_uuid != undefined) {
                    this.enclave_uuid = data.enclave_uuid;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("shortened_uuid" in data && data.shortened_uuid != undefined) {
                    this.shortened_uuid = data.shortened_uuid;
                }
            }
        }
        get enclave_uuid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set enclave_uuid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get shortened_uuid() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set shortened_uuid(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            enclave_uuid?: string;
            name?: string;
            shortened_uuid?: string;
        }): EnclaveIdentifiers {
            const message = new EnclaveIdentifiers({});
            if (data.enclave_uuid != null) {
                message.enclave_uuid = data.enclave_uuid;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.shortened_uuid != null) {
                message.shortened_uuid = data.shortened_uuid;
            }
            return message;
        }
        toObject() {
            const data: {
                enclave_uuid?: string;
                name?: string;
                shortened_uuid?: string;
            } = {};
            if (this.enclave_uuid != null) {
                data.enclave_uuid = this.enclave_uuid;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.shortened_uuid != null) {
                data.shortened_uuid = this.shortened_uuid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.enclave_uuid.length)
                writer.writeString(1, this.enclave_uuid);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.shortened_uuid.length)
                writer.writeString(3, this.shortened_uuid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EnclaveIdentifiers {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EnclaveIdentifiers();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.enclave_uuid = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.shortened_uuid = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EnclaveIdentifiers {
            return EnclaveIdentifiers.deserialize(bytes);
        }
    }
    export class GetExistingAndHistoricalEnclaveIdentifiersResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            allIdentifiers?: EnclaveIdentifiers[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("allIdentifiers" in data && data.allIdentifiers != undefined) {
                    this.allIdentifiers = data.allIdentifiers;
                }
            }
        }
        get allIdentifiers() {
            return pb_1.Message.getRepeatedWrapperField(this, EnclaveIdentifiers, 1) as EnclaveIdentifiers[];
        }
        set allIdentifiers(value: EnclaveIdentifiers[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            allIdentifiers?: ReturnType<typeof EnclaveIdentifiers.prototype.toObject>[];
        }): GetExistingAndHistoricalEnclaveIdentifiersResponse {
            const message = new GetExistingAndHistoricalEnclaveIdentifiersResponse({});
            if (data.allIdentifiers != null) {
                message.allIdentifiers = data.allIdentifiers.map(item => EnclaveIdentifiers.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                allIdentifiers?: ReturnType<typeof EnclaveIdentifiers.prototype.toObject>[];
            } = {};
            if (this.allIdentifiers != null) {
                data.allIdentifiers = this.allIdentifiers.map((item: EnclaveIdentifiers) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.allIdentifiers.length)
                writer.writeRepeatedMessage(1, this.allIdentifiers, (item: EnclaveIdentifiers) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetExistingAndHistoricalEnclaveIdentifiersResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetExistingAndHistoricalEnclaveIdentifiersResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.allIdentifiers, () => pb_1.Message.addToRepeatedWrapperField(message, 1, EnclaveIdentifiers.deserialize(reader), EnclaveIdentifiers));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetExistingAndHistoricalEnclaveIdentifiersResponse {
            return GetExistingAndHistoricalEnclaveIdentifiersResponse.deserialize(bytes);
        }
    }
    export class StopEnclaveArgs extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            enclave_identifier?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("enclave_identifier" in data && data.enclave_identifier != undefined) {
                    this.enclave_identifier = data.enclave_identifier;
                }
            }
        }
        get enclave_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set enclave_identifier(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            enclave_identifier?: string;
        }): StopEnclaveArgs {
            const message = new StopEnclaveArgs({});
            if (data.enclave_identifier != null) {
                message.enclave_identifier = data.enclave_identifier;
            }
            return message;
        }
        toObject() {
            const data: {
                enclave_identifier?: string;
            } = {};
            if (this.enclave_identifier != null) {
                data.enclave_identifier = this.enclave_identifier;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.enclave_identifier.length)
                writer.writeString(1, this.enclave_identifier);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StopEnclaveArgs {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StopEnclaveArgs();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.enclave_identifier = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StopEnclaveArgs {
            return StopEnclaveArgs.deserialize(bytes);
        }
    }
    export class DestroyEnclaveArgs extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            enclave_identifier?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("enclave_identifier" in data && data.enclave_identifier != undefined) {
                    this.enclave_identifier = data.enclave_identifier;
                }
            }
        }
        get enclave_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set enclave_identifier(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            enclave_identifier?: string;
        }): DestroyEnclaveArgs {
            const message = new DestroyEnclaveArgs({});
            if (data.enclave_identifier != null) {
                message.enclave_identifier = data.enclave_identifier;
            }
            return message;
        }
        toObject() {
            const data: {
                enclave_identifier?: string;
            } = {};
            if (this.enclave_identifier != null) {
                data.enclave_identifier = this.enclave_identifier;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.enclave_identifier.length)
                writer.writeString(1, this.enclave_identifier);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DestroyEnclaveArgs {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DestroyEnclaveArgs();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.enclave_identifier = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DestroyEnclaveArgs {
            return DestroyEnclaveArgs.deserialize(bytes);
        }
    }
    export class CleanArgs extends pb_1.Message {
        #one_of_decls: number[][] = [[1]];
        constructor(data?: any[] | ({} & (({
            should_clean_all?: boolean;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("should_clean_all" in data && data.should_clean_all != undefined) {
                    this.should_clean_all = data.should_clean_all;
                }
            }
        }
        get should_clean_all() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set should_clean_all(value: boolean) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_should_clean_all() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get _should_clean_all() {
            const cases: {
                [index: number]: "none" | "should_clean_all";
            } = {
                0: "none",
                1: "should_clean_all"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        static fromObject(data: {
            should_clean_all?: boolean;
        }): CleanArgs {
            const message = new CleanArgs({});
            if (data.should_clean_all != null) {
                message.should_clean_all = data.should_clean_all;
            }
            return message;
        }
        toObject() {
            const data: {
                should_clean_all?: boolean;
            } = {};
            if (this.should_clean_all != null) {
                data.should_clean_all = this.should_clean_all;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_should_clean_all)
                writer.writeBool(1, this.should_clean_all);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CleanArgs {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CleanArgs();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.should_clean_all = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CleanArgs {
            return CleanArgs.deserialize(bytes);
        }
    }
    export class EnclaveNameAndUuid extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            uuid?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("uuid" in data && data.uuid != undefined) {
                    this.uuid = data.uuid;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get uuid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set uuid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            name?: string;
            uuid?: string;
        }): EnclaveNameAndUuid {
            const message = new EnclaveNameAndUuid({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.uuid != null) {
                message.uuid = data.uuid;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                uuid?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.uuid != null) {
                data.uuid = this.uuid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.uuid.length)
                writer.writeString(2, this.uuid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EnclaveNameAndUuid {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EnclaveNameAndUuid();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.uuid = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EnclaveNameAndUuid {
            return EnclaveNameAndUuid.deserialize(bytes);
        }
    }
    export class CleanResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            removed_enclave_name_and_uuids?: EnclaveNameAndUuid[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("removed_enclave_name_and_uuids" in data && data.removed_enclave_name_and_uuids != undefined) {
                    this.removed_enclave_name_and_uuids = data.removed_enclave_name_and_uuids;
                }
            }
        }
        get removed_enclave_name_and_uuids() {
            return pb_1.Message.getRepeatedWrapperField(this, EnclaveNameAndUuid, 1) as EnclaveNameAndUuid[];
        }
        set removed_enclave_name_and_uuids(value: EnclaveNameAndUuid[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            removed_enclave_name_and_uuids?: ReturnType<typeof EnclaveNameAndUuid.prototype.toObject>[];
        }): CleanResponse {
            const message = new CleanResponse({});
            if (data.removed_enclave_name_and_uuids != null) {
                message.removed_enclave_name_and_uuids = data.removed_enclave_name_and_uuids.map(item => EnclaveNameAndUuid.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                removed_enclave_name_and_uuids?: ReturnType<typeof EnclaveNameAndUuid.prototype.toObject>[];
            } = {};
            if (this.removed_enclave_name_and_uuids != null) {
                data.removed_enclave_name_and_uuids = this.removed_enclave_name_and_uuids.map((item: EnclaveNameAndUuid) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.removed_enclave_name_and_uuids.length)
                writer.writeRepeatedMessage(1, this.removed_enclave_name_and_uuids, (item: EnclaveNameAndUuid) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CleanResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CleanResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.removed_enclave_name_and_uuids, () => pb_1.Message.addToRepeatedWrapperField(message, 1, EnclaveNameAndUuid.deserialize(reader), EnclaveNameAndUuid));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CleanResponse {
            return CleanResponse.deserialize(bytes);
        }
    }
    export class GetServiceLogsArgs extends pb_1.Message {
        #one_of_decls: number[][] = [[3], [5], [6]];
        constructor(data?: any[] | ({
            enclave_identifier?: string;
            service_uuid_set?: Map<string, boolean>;
            conjunctive_filters?: LogLineFilter[];
        } & (({
            follow_logs?: boolean;
        }) | ({
            return_all_logs?: boolean;
        }) | ({
            num_log_lines?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("enclave_identifier" in data && data.enclave_identifier != undefined) {
                    this.enclave_identifier = data.enclave_identifier;
                }
                if ("service_uuid_set" in data && data.service_uuid_set != undefined) {
                    this.service_uuid_set = data.service_uuid_set;
                }
                if ("follow_logs" in data && data.follow_logs != undefined) {
                    this.follow_logs = data.follow_logs;
                }
                if ("conjunctive_filters" in data && data.conjunctive_filters != undefined) {
                    this.conjunctive_filters = data.conjunctive_filters;
                }
                if ("return_all_logs" in data && data.return_all_logs != undefined) {
                    this.return_all_logs = data.return_all_logs;
                }
                if ("num_log_lines" in data && data.num_log_lines != undefined) {
                    this.num_log_lines = data.num_log_lines;
                }
            }
            if (!this.service_uuid_set)
                this.service_uuid_set = new Map();
        }
        get enclave_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set enclave_identifier(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get service_uuid_set() {
            return pb_1.Message.getField(this, 2) as any as Map<string, boolean>;
        }
        set service_uuid_set(value: Map<string, boolean>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        get follow_logs() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set follow_logs(value: boolean) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_follow_logs() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get conjunctive_filters() {
            return pb_1.Message.getRepeatedWrapperField(this, LogLineFilter, 4) as LogLineFilter[];
        }
        set conjunctive_filters(value: LogLineFilter[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get return_all_logs() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set return_all_logs(value: boolean) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[1], value);
        }
        get has_return_all_logs() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get num_log_lines() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set num_log_lines(value: number) {
            pb_1.Message.setOneofField(this, 6, this.#one_of_decls[2], value);
        }
        get has_num_log_lines() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get _follow_logs() {
            const cases: {
                [index: number]: "none" | "follow_logs";
            } = {
                0: "none",
                3: "follow_logs"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _return_all_logs() {
            const cases: {
                [index: number]: "none" | "return_all_logs";
            } = {
                0: "none",
                5: "return_all_logs"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        get _num_log_lines() {
            const cases: {
                [index: number]: "none" | "num_log_lines";
            } = {
                0: "none",
                6: "num_log_lines"
            };
            return cases[pb_1.Message.computeOneofCase(this, [6])];
        }
        static fromObject(data: {
            enclave_identifier?: string;
            service_uuid_set?: {
                [key: string]: boolean;
            };
            follow_logs?: boolean;
            conjunctive_filters?: ReturnType<typeof LogLineFilter.prototype.toObject>[];
            return_all_logs?: boolean;
            num_log_lines?: number;
        }): GetServiceLogsArgs {
            const message = new GetServiceLogsArgs({});
            if (data.enclave_identifier != null) {
                message.enclave_identifier = data.enclave_identifier;
            }
            if (typeof data.service_uuid_set == "object") {
                message.service_uuid_set = new Map(Object.entries(data.service_uuid_set));
            }
            if (data.follow_logs != null) {
                message.follow_logs = data.follow_logs;
            }
            if (data.conjunctive_filters != null) {
                message.conjunctive_filters = data.conjunctive_filters.map(item => LogLineFilter.fromObject(item));
            }
            if (data.return_all_logs != null) {
                message.return_all_logs = data.return_all_logs;
            }
            if (data.num_log_lines != null) {
                message.num_log_lines = data.num_log_lines;
            }
            return message;
        }
        toObject() {
            const data: {
                enclave_identifier?: string;
                service_uuid_set?: {
                    [key: string]: boolean;
                };
                follow_logs?: boolean;
                conjunctive_filters?: ReturnType<typeof LogLineFilter.prototype.toObject>[];
                return_all_logs?: boolean;
                num_log_lines?: number;
            } = {};
            if (this.enclave_identifier != null) {
                data.enclave_identifier = this.enclave_identifier;
            }
            if (this.service_uuid_set != null) {
                data.service_uuid_set = (Object.fromEntries)(this.service_uuid_set);
            }
            if (this.follow_logs != null) {
                data.follow_logs = this.follow_logs;
            }
            if (this.conjunctive_filters != null) {
                data.conjunctive_filters = this.conjunctive_filters.map((item: LogLineFilter) => item.toObject());
            }
            if (this.return_all_logs != null) {
                data.return_all_logs = this.return_all_logs;
            }
            if (this.num_log_lines != null) {
                data.num_log_lines = this.num_log_lines;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.enclave_identifier.length)
                writer.writeString(1, this.enclave_identifier);
            for (const [key, value] of this.service_uuid_set) {
                writer.writeMessage(2, this.service_uuid_set, () => {
                    writer.writeString(1, key);
                    writer.writeBool(2, value);
                });
            }
            if (this.has_follow_logs)
                writer.writeBool(3, this.follow_logs);
            if (this.conjunctive_filters.length)
                writer.writeRepeatedMessage(4, this.conjunctive_filters, (item: LogLineFilter) => item.serialize(writer));
            if (this.has_return_all_logs)
                writer.writeBool(5, this.return_all_logs);
            if (this.has_num_log_lines)
                writer.writeUint32(6, this.num_log_lines);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetServiceLogsArgs {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetServiceLogsArgs();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.enclave_identifier = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.service_uuid_set as any, reader, reader.readString, reader.readBool));
                        break;
                    case 3:
                        message.follow_logs = reader.readBool();
                        break;
                    case 4:
                        reader.readMessage(message.conjunctive_filters, () => pb_1.Message.addToRepeatedWrapperField(message, 4, LogLineFilter.deserialize(reader), LogLineFilter));
                        break;
                    case 5:
                        message.return_all_logs = reader.readBool();
                        break;
                    case 6:
                        message.num_log_lines = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetServiceLogsArgs {
            return GetServiceLogsArgs.deserialize(bytes);
        }
    }
    export class GetServiceLogsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            service_logs_by_service_uuid?: Map<string, LogLine>;
            not_found_service_uuid_set?: Map<string, boolean>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service_logs_by_service_uuid" in data && data.service_logs_by_service_uuid != undefined) {
                    this.service_logs_by_service_uuid = data.service_logs_by_service_uuid;
                }
                if ("not_found_service_uuid_set" in data && data.not_found_service_uuid_set != undefined) {
                    this.not_found_service_uuid_set = data.not_found_service_uuid_set;
                }
            }
            if (!this.service_logs_by_service_uuid)
                this.service_logs_by_service_uuid = new Map();
            if (!this.not_found_service_uuid_set)
                this.not_found_service_uuid_set = new Map();
        }
        get service_logs_by_service_uuid() {
            return pb_1.Message.getField(this, 1) as any as Map<string, LogLine>;
        }
        set service_logs_by_service_uuid(value: Map<string, LogLine>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        get not_found_service_uuid_set() {
            return pb_1.Message.getField(this, 2) as any as Map<string, boolean>;
        }
        set not_found_service_uuid_set(value: Map<string, boolean>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        static fromObject(data: {
            service_logs_by_service_uuid?: {
                [key: string]: ReturnType<typeof LogLine.prototype.toObject>;
            };
            not_found_service_uuid_set?: {
                [key: string]: boolean;
            };
        }): GetServiceLogsResponse {
            const message = new GetServiceLogsResponse({});
            if (typeof data.service_logs_by_service_uuid == "object") {
                message.service_logs_by_service_uuid = new Map(Object.entries(data.service_logs_by_service_uuid).map(([key, value]) => [key, LogLine.fromObject(value)]));
            }
            if (typeof data.not_found_service_uuid_set == "object") {
                message.not_found_service_uuid_set = new Map(Object.entries(data.not_found_service_uuid_set));
            }
            return message;
        }
        toObject() {
            const data: {
                service_logs_by_service_uuid?: {
                    [key: string]: ReturnType<typeof LogLine.prototype.toObject>;
                };
                not_found_service_uuid_set?: {
                    [key: string]: boolean;
                };
            } = {};
            if (this.service_logs_by_service_uuid != null) {
                data.service_logs_by_service_uuid = (Object.fromEntries)((Array.from)(this.service_logs_by_service_uuid).map(([key, value]) => [key, value.toObject()]));
            }
            if (this.not_found_service_uuid_set != null) {
                data.not_found_service_uuid_set = (Object.fromEntries)(this.not_found_service_uuid_set);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.service_logs_by_service_uuid) {
                writer.writeMessage(1, this.service_logs_by_service_uuid, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            for (const [key, value] of this.not_found_service_uuid_set) {
                writer.writeMessage(2, this.not_found_service_uuid_set, () => {
                    writer.writeString(1, key);
                    writer.writeBool(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetServiceLogsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetServiceLogsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.service_logs_by_service_uuid as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = LogLine.deserialize(reader));
                            return value;
                        }));
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.not_found_service_uuid_set as any, reader, reader.readString, reader.readBool));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetServiceLogsResponse {
            return GetServiceLogsResponse.deserialize(bytes);
        }
    }
    export class LogLine extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            line?: string[];
            timestamp?: dependency_2.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("line" in data && data.line != undefined) {
                    this.line = data.line;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
            }
        }
        get line() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set line(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get timestamp() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 2) as dependency_2.google.protobuf.Timestamp;
        }
        set timestamp(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_timestamp() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            line?: string[];
            timestamp?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
        }): LogLine {
            const message = new LogLine({});
            if (data.line != null) {
                message.line = data.line;
            }
            if (data.timestamp != null) {
                message.timestamp = dependency_2.google.protobuf.Timestamp.fromObject(data.timestamp);
            }
            return message;
        }
        toObject() {
            const data: {
                line?: string[];
                timestamp?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.line != null) {
                data.line = this.line;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.line.length)
                writer.writeRepeatedString(1, this.line);
            if (this.has_timestamp)
                writer.writeMessage(2, this.timestamp, () => this.timestamp.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LogLine {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LogLine();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 2:
                        reader.readMessage(message.timestamp, () => message.timestamp = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LogLine {
            return LogLine.deserialize(bytes);
        }
    }
    export class LogLineFilter extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operator?: LogLineOperator;
            text_pattern?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operator" in data && data.operator != undefined) {
                    this.operator = data.operator;
                }
                if ("text_pattern" in data && data.text_pattern != undefined) {
                    this.text_pattern = data.text_pattern;
                }
            }
        }
        get operator() {
            return pb_1.Message.getFieldWithDefault(this, 1, LogLineOperator.LogLineOperator_DOES_CONTAIN_TEXT) as LogLineOperator;
        }
        set operator(value: LogLineOperator) {
            pb_1.Message.setField(this, 1, value);
        }
        get text_pattern() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set text_pattern(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            operator?: LogLineOperator;
            text_pattern?: string;
        }): LogLineFilter {
            const message = new LogLineFilter({});
            if (data.operator != null) {
                message.operator = data.operator;
            }
            if (data.text_pattern != null) {
                message.text_pattern = data.text_pattern;
            }
            return message;
        }
        toObject() {
            const data: {
                operator?: LogLineOperator;
                text_pattern?: string;
            } = {};
            if (this.operator != null) {
                data.operator = this.operator;
            }
            if (this.text_pattern != null) {
                data.text_pattern = this.text_pattern;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.operator != LogLineOperator.LogLineOperator_DOES_CONTAIN_TEXT)
                writer.writeEnum(1, this.operator);
            if (this.text_pattern.length)
                writer.writeString(2, this.text_pattern);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LogLineFilter {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LogLineFilter();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.operator = reader.readEnum();
                        break;
                    case 2:
                        message.text_pattern = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LogLineFilter {
            return LogLineFilter.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedEngineServiceService {
        static definition = {
            GetEngineInfo: {
                path: "/engine_api.EngineService/GetEngineInfo",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetEngineInfoResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetEngineInfoResponse.deserialize(new Uint8Array(bytes))
            },
            CreateEnclave: {
                path: "/engine_api.EngineService/CreateEnclave",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateEnclaveArgs) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateEnclaveArgs.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateEnclaveResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateEnclaveResponse.deserialize(new Uint8Array(bytes))
            },
            GetEnclaves: {
                path: "/engine_api.EngineService/GetEnclaves",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetEnclavesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetEnclavesResponse.deserialize(new Uint8Array(bytes))
            },
            GetExistingAndHistoricalEnclaveIdentifiers: {
                path: "/engine_api.EngineService/GetExistingAndHistoricalEnclaveIdentifiers",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetExistingAndHistoricalEnclaveIdentifiersResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetExistingAndHistoricalEnclaveIdentifiersResponse.deserialize(new Uint8Array(bytes))
            },
            StopEnclave: {
                path: "/engine_api.EngineService/StopEnclave",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: StopEnclaveArgs) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => StopEnclaveArgs.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            DestroyEnclave: {
                path: "/engine_api.EngineService/DestroyEnclave",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DestroyEnclaveArgs) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DestroyEnclaveArgs.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            Clean: {
                path: "/engine_api.EngineService/Clean",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CleanArgs) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CleanArgs.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CleanResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CleanResponse.deserialize(new Uint8Array(bytes))
            },
            GetServiceLogs: {
                path: "/engine_api.EngineService/GetServiceLogs",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: GetServiceLogsArgs) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetServiceLogsArgs.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetServiceLogsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetServiceLogsResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetEngineInfo(call: grpc_1.ServerUnaryCall<dependency_1.google.protobuf.Empty, GetEngineInfoResponse>, callback: grpc_1.sendUnaryData<GetEngineInfoResponse>): void;
        abstract CreateEnclave(call: grpc_1.ServerUnaryCall<CreateEnclaveArgs, CreateEnclaveResponse>, callback: grpc_1.sendUnaryData<CreateEnclaveResponse>): void;
        abstract GetEnclaves(call: grpc_1.ServerUnaryCall<dependency_1.google.protobuf.Empty, GetEnclavesResponse>, callback: grpc_1.sendUnaryData<GetEnclavesResponse>): void;
        abstract GetExistingAndHistoricalEnclaveIdentifiers(call: grpc_1.ServerUnaryCall<dependency_1.google.protobuf.Empty, GetExistingAndHistoricalEnclaveIdentifiersResponse>, callback: grpc_1.sendUnaryData<GetExistingAndHistoricalEnclaveIdentifiersResponse>): void;
        abstract StopEnclave(call: grpc_1.ServerUnaryCall<StopEnclaveArgs, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract DestroyEnclave(call: grpc_1.ServerUnaryCall<DestroyEnclaveArgs, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract Clean(call: grpc_1.ServerUnaryCall<CleanArgs, CleanResponse>, callback: grpc_1.sendUnaryData<CleanResponse>): void;
        abstract GetServiceLogs(call: grpc_1.ServerWritableStream<GetServiceLogsArgs, GetServiceLogsResponse>): void;
    }
    export class EngineServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedEngineServiceService.definition, "EngineService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetEngineInfo: GrpcUnaryServiceInterface<dependency_1.google.protobuf.Empty, GetEngineInfoResponse> = (message: dependency_1.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetEngineInfoResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetEngineInfoResponse>, callback?: grpc_1.requestCallback<GetEngineInfoResponse>): grpc_1.ClientUnaryCall => {
            return super.GetEngineInfo(message, metadata, options, callback);
        };
        CreateEnclave: GrpcUnaryServiceInterface<CreateEnclaveArgs, CreateEnclaveResponse> = (message: CreateEnclaveArgs, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateEnclaveResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateEnclaveResponse>, callback?: grpc_1.requestCallback<CreateEnclaveResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateEnclave(message, metadata, options, callback);
        };
        GetEnclaves: GrpcUnaryServiceInterface<dependency_1.google.protobuf.Empty, GetEnclavesResponse> = (message: dependency_1.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetEnclavesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetEnclavesResponse>, callback?: grpc_1.requestCallback<GetEnclavesResponse>): grpc_1.ClientUnaryCall => {
            return super.GetEnclaves(message, metadata, options, callback);
        };
        GetExistingAndHistoricalEnclaveIdentifiers: GrpcUnaryServiceInterface<dependency_1.google.protobuf.Empty, GetExistingAndHistoricalEnclaveIdentifiersResponse> = (message: dependency_1.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetExistingAndHistoricalEnclaveIdentifiersResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetExistingAndHistoricalEnclaveIdentifiersResponse>, callback?: grpc_1.requestCallback<GetExistingAndHistoricalEnclaveIdentifiersResponse>): grpc_1.ClientUnaryCall => {
            return super.GetExistingAndHistoricalEnclaveIdentifiers(message, metadata, options, callback);
        };
        StopEnclave: GrpcUnaryServiceInterface<StopEnclaveArgs, dependency_1.google.protobuf.Empty> = (message: StopEnclaveArgs, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.StopEnclave(message, metadata, options, callback);
        };
        DestroyEnclave: GrpcUnaryServiceInterface<DestroyEnclaveArgs, dependency_1.google.protobuf.Empty> = (message: DestroyEnclaveArgs, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.DestroyEnclave(message, metadata, options, callback);
        };
        Clean: GrpcUnaryServiceInterface<CleanArgs, CleanResponse> = (message: CleanArgs, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CleanResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CleanResponse>, callback?: grpc_1.requestCallback<CleanResponse>): grpc_1.ClientUnaryCall => {
            return super.Clean(message, metadata, options, callback);
        };
        GetServiceLogs: GrpcStreamServiceInterface<GetServiceLogsArgs, GetServiceLogsResponse> = (message: GetServiceLogsArgs, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<GetServiceLogsResponse> => {
            return super.GetServiceLogs(message, metadata, options);
        };
    }
}
