/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: api_container_service.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/empty";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace api_container_api {
    export enum ServiceStatus {
        STOPPED = 0,
        RUNNING = 1,
        UNKNOWN = 2
    }
    export enum ImageDownloadMode {
        always = 0,
        missing = 1
    }
    export enum Connect {
        CONNECT = 0,
        NO_CONNECT = 1
    }
    export enum KurtosisFeatureFlag {
        NO_INSTRUCTIONS_CACHING = 0
    }
    export enum RestartPolicy {
        NEVER = 0,
        ALWAYS = 1
    }
    export class Port extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            number?: number;
            transport_protocol?: Port.TransportProtocol;
            maybe_application_protocol?: string;
            maybe_wait_timeout?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("number" in data && data.number != undefined) {
                    this.number = data.number;
                }
                if ("transport_protocol" in data && data.transport_protocol != undefined) {
                    this.transport_protocol = data.transport_protocol;
                }
                if ("maybe_application_protocol" in data && data.maybe_application_protocol != undefined) {
                    this.maybe_application_protocol = data.maybe_application_protocol;
                }
                if ("maybe_wait_timeout" in data && data.maybe_wait_timeout != undefined) {
                    this.maybe_wait_timeout = data.maybe_wait_timeout;
                }
            }
        }
        get number() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set number(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get transport_protocol() {
            return pb_1.Message.getFieldWithDefault(this, 2, Port.TransportProtocol.TCP) as Port.TransportProtocol;
        }
        set transport_protocol(value: Port.TransportProtocol) {
            pb_1.Message.setField(this, 2, value);
        }
        get maybe_application_protocol() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set maybe_application_protocol(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get maybe_wait_timeout() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set maybe_wait_timeout(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            number?: number;
            transport_protocol?: Port.TransportProtocol;
            maybe_application_protocol?: string;
            maybe_wait_timeout?: string;
        }): Port {
            const message = new Port({});
            if (data.number != null) {
                message.number = data.number;
            }
            if (data.transport_protocol != null) {
                message.transport_protocol = data.transport_protocol;
            }
            if (data.maybe_application_protocol != null) {
                message.maybe_application_protocol = data.maybe_application_protocol;
            }
            if (data.maybe_wait_timeout != null) {
                message.maybe_wait_timeout = data.maybe_wait_timeout;
            }
            return message;
        }
        toObject() {
            const data: {
                number?: number;
                transport_protocol?: Port.TransportProtocol;
                maybe_application_protocol?: string;
                maybe_wait_timeout?: string;
            } = {};
            if (this.number != null) {
                data.number = this.number;
            }
            if (this.transport_protocol != null) {
                data.transport_protocol = this.transport_protocol;
            }
            if (this.maybe_application_protocol != null) {
                data.maybe_application_protocol = this.maybe_application_protocol;
            }
            if (this.maybe_wait_timeout != null) {
                data.maybe_wait_timeout = this.maybe_wait_timeout;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.number != 0)
                writer.writeUint32(1, this.number);
            if (this.transport_protocol != Port.TransportProtocol.TCP)
                writer.writeEnum(2, this.transport_protocol);
            if (this.maybe_application_protocol.length)
                writer.writeString(3, this.maybe_application_protocol);
            if (this.maybe_wait_timeout.length)
                writer.writeString(4, this.maybe_wait_timeout);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Port {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Port();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.number = reader.readUint32();
                        break;
                    case 2:
                        message.transport_protocol = reader.readEnum();
                        break;
                    case 3:
                        message.maybe_application_protocol = reader.readString();
                        break;
                    case 4:
                        message.maybe_wait_timeout = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Port {
            return Port.deserialize(bytes);
        }
    }
    export namespace Port {
        export enum TransportProtocol {
            TCP = 0,
            SCTP = 1,
            UDP = 2
        }
    }
    export class Container extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: Container.Status;
            image_name?: string;
            entrypoint_args?: string[];
            cmd_args?: string[];
            env_vars?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("image_name" in data && data.image_name != undefined) {
                    this.image_name = data.image_name;
                }
                if ("entrypoint_args" in data && data.entrypoint_args != undefined) {
                    this.entrypoint_args = data.entrypoint_args;
                }
                if ("cmd_args" in data && data.cmd_args != undefined) {
                    this.cmd_args = data.cmd_args;
                }
                if ("env_vars" in data && data.env_vars != undefined) {
                    this.env_vars = data.env_vars;
                }
            }
            if (!this.env_vars)
                this.env_vars = new Map();
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, Container.Status.STOPPED) as Container.Status;
        }
        set status(value: Container.Status) {
            pb_1.Message.setField(this, 1, value);
        }
        get image_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set image_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get entrypoint_args() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set entrypoint_args(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get cmd_args() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
        }
        set cmd_args(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get env_vars() {
            return pb_1.Message.getField(this, 5) as any as Map<string, string>;
        }
        set env_vars(value: Map<string, string>) {
            pb_1.Message.setField(this, 5, value as any);
        }
        static fromObject(data: {
            status?: Container.Status;
            image_name?: string;
            entrypoint_args?: string[];
            cmd_args?: string[];
            env_vars?: {
                [key: string]: string;
            };
        }): Container {
            const message = new Container({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.image_name != null) {
                message.image_name = data.image_name;
            }
            if (data.entrypoint_args != null) {
                message.entrypoint_args = data.entrypoint_args;
            }
            if (data.cmd_args != null) {
                message.cmd_args = data.cmd_args;
            }
            if (typeof data.env_vars == "object") {
                message.env_vars = new Map(Object.entries(data.env_vars));
            }
            return message;
        }
        toObject() {
            const data: {
                status?: Container.Status;
                image_name?: string;
                entrypoint_args?: string[];
                cmd_args?: string[];
                env_vars?: {
                    [key: string]: string;
                };
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.image_name != null) {
                data.image_name = this.image_name;
            }
            if (this.entrypoint_args != null) {
                data.entrypoint_args = this.entrypoint_args;
            }
            if (this.cmd_args != null) {
                data.cmd_args = this.cmd_args;
            }
            if (this.env_vars != null) {
                data.env_vars = (Object.fromEntries)(this.env_vars);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != Container.Status.STOPPED)
                writer.writeEnum(1, this.status);
            if (this.image_name.length)
                writer.writeString(2, this.image_name);
            if (this.entrypoint_args.length)
                writer.writeRepeatedString(3, this.entrypoint_args);
            if (this.cmd_args.length)
                writer.writeRepeatedString(4, this.cmd_args);
            for (const [key, value] of this.env_vars) {
                writer.writeMessage(5, this.env_vars, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Container {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Container();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    case 2:
                        message.image_name = reader.readString();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                        break;
                    case 5:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.env_vars as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Container {
            return Container.deserialize(bytes);
        }
    }
    export namespace Container {
        export enum Status {
            STOPPED = 0,
            RUNNING = 1,
            UNKNOWN = 2
        }
    }
    export class ServiceInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            service_uuid?: string;
            private_ip_addr?: string;
            private_ports?: Map<string, Port>;
            maybe_public_ip_addr?: string;
            maybe_public_ports?: Map<string, Port>;
            name?: string;
            shortened_uuid?: string;
            service_status?: ServiceStatus;
            container?: Container;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service_uuid" in data && data.service_uuid != undefined) {
                    this.service_uuid = data.service_uuid;
                }
                if ("private_ip_addr" in data && data.private_ip_addr != undefined) {
                    this.private_ip_addr = data.private_ip_addr;
                }
                if ("private_ports" in data && data.private_ports != undefined) {
                    this.private_ports = data.private_ports;
                }
                if ("maybe_public_ip_addr" in data && data.maybe_public_ip_addr != undefined) {
                    this.maybe_public_ip_addr = data.maybe_public_ip_addr;
                }
                if ("maybe_public_ports" in data && data.maybe_public_ports != undefined) {
                    this.maybe_public_ports = data.maybe_public_ports;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("shortened_uuid" in data && data.shortened_uuid != undefined) {
                    this.shortened_uuid = data.shortened_uuid;
                }
                if ("service_status" in data && data.service_status != undefined) {
                    this.service_status = data.service_status;
                }
                if ("container" in data && data.container != undefined) {
                    this.container = data.container;
                }
            }
            if (!this.private_ports)
                this.private_ports = new Map();
            if (!this.maybe_public_ports)
                this.maybe_public_ports = new Map();
        }
        get service_uuid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set service_uuid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get private_ip_addr() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set private_ip_addr(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get private_ports() {
            return pb_1.Message.getField(this, 3) as any as Map<string, Port>;
        }
        set private_ports(value: Map<string, Port>) {
            pb_1.Message.setField(this, 3, value as any);
        }
        get maybe_public_ip_addr() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set maybe_public_ip_addr(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get maybe_public_ports() {
            return pb_1.Message.getField(this, 5) as any as Map<string, Port>;
        }
        set maybe_public_ports(value: Map<string, Port>) {
            pb_1.Message.setField(this, 5, value as any);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get shortened_uuid() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set shortened_uuid(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get service_status() {
            return pb_1.Message.getFieldWithDefault(this, 8, ServiceStatus.STOPPED) as ServiceStatus;
        }
        set service_status(value: ServiceStatus) {
            pb_1.Message.setField(this, 8, value);
        }
        get container() {
            return pb_1.Message.getWrapperField(this, Container, 9) as Container;
        }
        set container(value: Container) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_container() {
            return pb_1.Message.getField(this, 9) != null;
        }
        static fromObject(data: {
            service_uuid?: string;
            private_ip_addr?: string;
            private_ports?: {
                [key: string]: ReturnType<typeof Port.prototype.toObject>;
            };
            maybe_public_ip_addr?: string;
            maybe_public_ports?: {
                [key: string]: ReturnType<typeof Port.prototype.toObject>;
            };
            name?: string;
            shortened_uuid?: string;
            service_status?: ServiceStatus;
            container?: ReturnType<typeof Container.prototype.toObject>;
        }): ServiceInfo {
            const message = new ServiceInfo({});
            if (data.service_uuid != null) {
                message.service_uuid = data.service_uuid;
            }
            if (data.private_ip_addr != null) {
                message.private_ip_addr = data.private_ip_addr;
            }
            if (typeof data.private_ports == "object") {
                message.private_ports = new Map(Object.entries(data.private_ports).map(([key, value]) => [key, Port.fromObject(value)]));
            }
            if (data.maybe_public_ip_addr != null) {
                message.maybe_public_ip_addr = data.maybe_public_ip_addr;
            }
            if (typeof data.maybe_public_ports == "object") {
                message.maybe_public_ports = new Map(Object.entries(data.maybe_public_ports).map(([key, value]) => [key, Port.fromObject(value)]));
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.shortened_uuid != null) {
                message.shortened_uuid = data.shortened_uuid;
            }
            if (data.service_status != null) {
                message.service_status = data.service_status;
            }
            if (data.container != null) {
                message.container = Container.fromObject(data.container);
            }
            return message;
        }
        toObject() {
            const data: {
                service_uuid?: string;
                private_ip_addr?: string;
                private_ports?: {
                    [key: string]: ReturnType<typeof Port.prototype.toObject>;
                };
                maybe_public_ip_addr?: string;
                maybe_public_ports?: {
                    [key: string]: ReturnType<typeof Port.prototype.toObject>;
                };
                name?: string;
                shortened_uuid?: string;
                service_status?: ServiceStatus;
                container?: ReturnType<typeof Container.prototype.toObject>;
            } = {};
            if (this.service_uuid != null) {
                data.service_uuid = this.service_uuid;
            }
            if (this.private_ip_addr != null) {
                data.private_ip_addr = this.private_ip_addr;
            }
            if (this.private_ports != null) {
                data.private_ports = (Object.fromEntries)((Array.from)(this.private_ports).map(([key, value]) => [key, value.toObject()]));
            }
            if (this.maybe_public_ip_addr != null) {
                data.maybe_public_ip_addr = this.maybe_public_ip_addr;
            }
            if (this.maybe_public_ports != null) {
                data.maybe_public_ports = (Object.fromEntries)((Array.from)(this.maybe_public_ports).map(([key, value]) => [key, value.toObject()]));
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.shortened_uuid != null) {
                data.shortened_uuid = this.shortened_uuid;
            }
            if (this.service_status != null) {
                data.service_status = this.service_status;
            }
            if (this.container != null) {
                data.container = this.container.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.service_uuid.length)
                writer.writeString(1, this.service_uuid);
            if (this.private_ip_addr.length)
                writer.writeString(2, this.private_ip_addr);
            for (const [key, value] of this.private_ports) {
                writer.writeMessage(3, this.private_ports, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (this.maybe_public_ip_addr.length)
                writer.writeString(4, this.maybe_public_ip_addr);
            for (const [key, value] of this.maybe_public_ports) {
                writer.writeMessage(5, this.maybe_public_ports, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (this.name.length)
                writer.writeString(6, this.name);
            if (this.shortened_uuid.length)
                writer.writeString(7, this.shortened_uuid);
            if (this.service_status != ServiceStatus.STOPPED)
                writer.writeEnum(8, this.service_status);
            if (this.has_container)
                writer.writeMessage(9, this.container, () => this.container.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ServiceInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ServiceInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.service_uuid = reader.readString();
                        break;
                    case 2:
                        message.private_ip_addr = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.private_ports as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = Port.deserialize(reader));
                            return value;
                        }));
                        break;
                    case 4:
                        message.maybe_public_ip_addr = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.maybe_public_ports as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = Port.deserialize(reader));
                            return value;
                        }));
                        break;
                    case 6:
                        message.name = reader.readString();
                        break;
                    case 7:
                        message.shortened_uuid = reader.readString();
                        break;
                    case 8:
                        message.service_status = reader.readEnum();
                        break;
                    case 9:
                        reader.readMessage(message.container, () => message.container = Container.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ServiceInfo {
            return ServiceInfo.deserialize(bytes);
        }
    }
    export class RunStarlarkScriptArgs extends pb_1.Message {
        #one_of_decls: number[][] = [[2], [3], [4], [5], [7], [8], [9], [10]];
        constructor(data?: any[] | ({
            serialized_script?: string;
            experimental_features?: KurtosisFeatureFlag[];
        } & (({
            serialized_params?: string;
        }) | ({
            dry_run?: boolean;
        }) | ({
            parallelism?: number;
        }) | ({
            main_function_name?: string;
        }) | ({
            cloud_instance_id?: string;
        }) | ({
            cloud_user_id?: string;
        }) | ({
            image_download_mode?: ImageDownloadMode;
        }) | ({
            non_blocking_mode?: boolean;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("serialized_script" in data && data.serialized_script != undefined) {
                    this.serialized_script = data.serialized_script;
                }
                if ("serialized_params" in data && data.serialized_params != undefined) {
                    this.serialized_params = data.serialized_params;
                }
                if ("dry_run" in data && data.dry_run != undefined) {
                    this.dry_run = data.dry_run;
                }
                if ("parallelism" in data && data.parallelism != undefined) {
                    this.parallelism = data.parallelism;
                }
                if ("main_function_name" in data && data.main_function_name != undefined) {
                    this.main_function_name = data.main_function_name;
                }
                if ("experimental_features" in data && data.experimental_features != undefined) {
                    this.experimental_features = data.experimental_features;
                }
                if ("cloud_instance_id" in data && data.cloud_instance_id != undefined) {
                    this.cloud_instance_id = data.cloud_instance_id;
                }
                if ("cloud_user_id" in data && data.cloud_user_id != undefined) {
                    this.cloud_user_id = data.cloud_user_id;
                }
                if ("image_download_mode" in data && data.image_download_mode != undefined) {
                    this.image_download_mode = data.image_download_mode;
                }
                if ("non_blocking_mode" in data && data.non_blocking_mode != undefined) {
                    this.non_blocking_mode = data.non_blocking_mode;
                }
            }
        }
        get serialized_script() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set serialized_script(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get serialized_params() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set serialized_params(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_serialized_params() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get dry_run() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set dry_run(value: boolean) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[1], value);
        }
        get has_dry_run() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get parallelism() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set parallelism(value: number) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[2], value);
        }
        get has_parallelism() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get main_function_name() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set main_function_name(value: string) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[3], value);
        }
        get has_main_function_name() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get experimental_features() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as KurtosisFeatureFlag[];
        }
        set experimental_features(value: KurtosisFeatureFlag[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get cloud_instance_id() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set cloud_instance_id(value: string) {
            pb_1.Message.setOneofField(this, 7, this.#one_of_decls[4], value);
        }
        get has_cloud_instance_id() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get cloud_user_id() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set cloud_user_id(value: string) {
            pb_1.Message.setOneofField(this, 8, this.#one_of_decls[5], value);
        }
        get has_cloud_user_id() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get image_download_mode() {
            return pb_1.Message.getFieldWithDefault(this, 9, ImageDownloadMode.always) as ImageDownloadMode;
        }
        set image_download_mode(value: ImageDownloadMode) {
            pb_1.Message.setOneofField(this, 9, this.#one_of_decls[6], value);
        }
        get has_image_download_mode() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get non_blocking_mode() {
            return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
        }
        set non_blocking_mode(value: boolean) {
            pb_1.Message.setOneofField(this, 10, this.#one_of_decls[7], value);
        }
        get has_non_blocking_mode() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get _serialized_params() {
            const cases: {
                [index: number]: "none" | "serialized_params";
            } = {
                0: "none",
                2: "serialized_params"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _dry_run() {
            const cases: {
                [index: number]: "none" | "dry_run";
            } = {
                0: "none",
                3: "dry_run"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _parallelism() {
            const cases: {
                [index: number]: "none" | "parallelism";
            } = {
                0: "none",
                4: "parallelism"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        get _main_function_name() {
            const cases: {
                [index: number]: "none" | "main_function_name";
            } = {
                0: "none",
                5: "main_function_name"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        get _cloud_instance_id() {
            const cases: {
                [index: number]: "none" | "cloud_instance_id";
            } = {
                0: "none",
                7: "cloud_instance_id"
            };
            return cases[pb_1.Message.computeOneofCase(this, [7])];
        }
        get _cloud_user_id() {
            const cases: {
                [index: number]: "none" | "cloud_user_id";
            } = {
                0: "none",
                8: "cloud_user_id"
            };
            return cases[pb_1.Message.computeOneofCase(this, [8])];
        }
        get _image_download_mode() {
            const cases: {
                [index: number]: "none" | "image_download_mode";
            } = {
                0: "none",
                9: "image_download_mode"
            };
            return cases[pb_1.Message.computeOneofCase(this, [9])];
        }
        get _non_blocking_mode() {
            const cases: {
                [index: number]: "none" | "non_blocking_mode";
            } = {
                0: "none",
                10: "non_blocking_mode"
            };
            return cases[pb_1.Message.computeOneofCase(this, [10])];
        }
        static fromObject(data: {
            serialized_script?: string;
            serialized_params?: string;
            dry_run?: boolean;
            parallelism?: number;
            main_function_name?: string;
            experimental_features?: KurtosisFeatureFlag[];
            cloud_instance_id?: string;
            cloud_user_id?: string;
            image_download_mode?: ImageDownloadMode;
            non_blocking_mode?: boolean;
        }): RunStarlarkScriptArgs {
            const message = new RunStarlarkScriptArgs({});
            if (data.serialized_script != null) {
                message.serialized_script = data.serialized_script;
            }
            if (data.serialized_params != null) {
                message.serialized_params = data.serialized_params;
            }
            if (data.dry_run != null) {
                message.dry_run = data.dry_run;
            }
            if (data.parallelism != null) {
                message.parallelism = data.parallelism;
            }
            if (data.main_function_name != null) {
                message.main_function_name = data.main_function_name;
            }
            if (data.experimental_features != null) {
                message.experimental_features = data.experimental_features;
            }
            if (data.cloud_instance_id != null) {
                message.cloud_instance_id = data.cloud_instance_id;
            }
            if (data.cloud_user_id != null) {
                message.cloud_user_id = data.cloud_user_id;
            }
            if (data.image_download_mode != null) {
                message.image_download_mode = data.image_download_mode;
            }
            if (data.non_blocking_mode != null) {
                message.non_blocking_mode = data.non_blocking_mode;
            }
            return message;
        }
        toObject() {
            const data: {
                serialized_script?: string;
                serialized_params?: string;
                dry_run?: boolean;
                parallelism?: number;
                main_function_name?: string;
                experimental_features?: KurtosisFeatureFlag[];
                cloud_instance_id?: string;
                cloud_user_id?: string;
                image_download_mode?: ImageDownloadMode;
                non_blocking_mode?: boolean;
            } = {};
            if (this.serialized_script != null) {
                data.serialized_script = this.serialized_script;
            }
            if (this.serialized_params != null) {
                data.serialized_params = this.serialized_params;
            }
            if (this.dry_run != null) {
                data.dry_run = this.dry_run;
            }
            if (this.parallelism != null) {
                data.parallelism = this.parallelism;
            }
            if (this.main_function_name != null) {
                data.main_function_name = this.main_function_name;
            }
            if (this.experimental_features != null) {
                data.experimental_features = this.experimental_features;
            }
            if (this.cloud_instance_id != null) {
                data.cloud_instance_id = this.cloud_instance_id;
            }
            if (this.cloud_user_id != null) {
                data.cloud_user_id = this.cloud_user_id;
            }
            if (this.image_download_mode != null) {
                data.image_download_mode = this.image_download_mode;
            }
            if (this.non_blocking_mode != null) {
                data.non_blocking_mode = this.non_blocking_mode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.serialized_script.length)
                writer.writeString(1, this.serialized_script);
            if (this.has_serialized_params)
                writer.writeString(2, this.serialized_params);
            if (this.has_dry_run)
                writer.writeBool(3, this.dry_run);
            if (this.has_parallelism)
                writer.writeInt32(4, this.parallelism);
            if (this.has_main_function_name)
                writer.writeString(5, this.main_function_name);
            if (this.experimental_features.length)
                writer.writePackedEnum(6, this.experimental_features);
            if (this.has_cloud_instance_id)
                writer.writeString(7, this.cloud_instance_id);
            if (this.has_cloud_user_id)
                writer.writeString(8, this.cloud_user_id);
            if (this.has_image_download_mode)
                writer.writeEnum(9, this.image_download_mode);
            if (this.has_non_blocking_mode)
                writer.writeBool(10, this.non_blocking_mode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RunStarlarkScriptArgs {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RunStarlarkScriptArgs();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.serialized_script = reader.readString();
                        break;
                    case 2:
                        message.serialized_params = reader.readString();
                        break;
                    case 3:
                        message.dry_run = reader.readBool();
                        break;
                    case 4:
                        message.parallelism = reader.readInt32();
                        break;
                    case 5:
                        message.main_function_name = reader.readString();
                        break;
                    case 6:
                        message.experimental_features = reader.readPackedEnum();
                        break;
                    case 7:
                        message.cloud_instance_id = reader.readString();
                        break;
                    case 8:
                        message.cloud_user_id = reader.readString();
                        break;
                    case 9:
                        message.image_download_mode = reader.readEnum();
                        break;
                    case 10:
                        message.non_blocking_mode = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RunStarlarkScriptArgs {
            return RunStarlarkScriptArgs.deserialize(bytes);
        }
    }
    export class RunStarlarkPackageArgs extends pb_1.Message {
        #one_of_decls: number[][] = [[3, 4], [5], [6], [7], [8], [9], [10], [12], [13], [14], [15]];
        constructor(data?: any[] | ({
            package_id?: string;
            experimental_features?: KurtosisFeatureFlag[];
        } & (({
            local?: Uint8Array;
            remote?: never;
        } | {
            local?: never;
            remote?: boolean;
        }) | ({
            serialized_params?: string;
        }) | ({
            dry_run?: boolean;
        }) | ({
            parallelism?: number;
        }) | ({
            clone_package?: boolean;
        }) | ({
            relative_path_to_main_file?: string;
        }) | ({
            main_function_name?: string;
        }) | ({
            cloud_instance_id?: string;
        }) | ({
            cloud_user_id?: string;
        }) | ({
            image_download_mode?: ImageDownloadMode;
        }) | ({
            non_blocking_mode?: boolean;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [11], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("package_id" in data && data.package_id != undefined) {
                    this.package_id = data.package_id;
                }
                if ("local" in data && data.local != undefined) {
                    this.local = data.local;
                }
                if ("remote" in data && data.remote != undefined) {
                    this.remote = data.remote;
                }
                if ("serialized_params" in data && data.serialized_params != undefined) {
                    this.serialized_params = data.serialized_params;
                }
                if ("dry_run" in data && data.dry_run != undefined) {
                    this.dry_run = data.dry_run;
                }
                if ("parallelism" in data && data.parallelism != undefined) {
                    this.parallelism = data.parallelism;
                }
                if ("clone_package" in data && data.clone_package != undefined) {
                    this.clone_package = data.clone_package;
                }
                if ("relative_path_to_main_file" in data && data.relative_path_to_main_file != undefined) {
                    this.relative_path_to_main_file = data.relative_path_to_main_file;
                }
                if ("main_function_name" in data && data.main_function_name != undefined) {
                    this.main_function_name = data.main_function_name;
                }
                if ("experimental_features" in data && data.experimental_features != undefined) {
                    this.experimental_features = data.experimental_features;
                }
                if ("cloud_instance_id" in data && data.cloud_instance_id != undefined) {
                    this.cloud_instance_id = data.cloud_instance_id;
                }
                if ("cloud_user_id" in data && data.cloud_user_id != undefined) {
                    this.cloud_user_id = data.cloud_user_id;
                }
                if ("image_download_mode" in data && data.image_download_mode != undefined) {
                    this.image_download_mode = data.image_download_mode;
                }
                if ("non_blocking_mode" in data && data.non_blocking_mode != undefined) {
                    this.non_blocking_mode = data.non_blocking_mode;
                }
            }
        }
        get package_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set package_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get local() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set local(value: Uint8Array) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_local() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get remote() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set remote(value: boolean) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
        }
        get has_remote() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get serialized_params() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set serialized_params(value: string) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[1], value);
        }
        get has_serialized_params() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get dry_run() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set dry_run(value: boolean) {
            pb_1.Message.setOneofField(this, 6, this.#one_of_decls[2], value);
        }
        get has_dry_run() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get parallelism() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set parallelism(value: number) {
            pb_1.Message.setOneofField(this, 7, this.#one_of_decls[3], value);
        }
        get has_parallelism() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get clone_package() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set clone_package(value: boolean) {
            pb_1.Message.setOneofField(this, 8, this.#one_of_decls[4], value);
        }
        get has_clone_package() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get relative_path_to_main_file() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set relative_path_to_main_file(value: string) {
            pb_1.Message.setOneofField(this, 9, this.#one_of_decls[5], value);
        }
        get has_relative_path_to_main_file() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get main_function_name() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set main_function_name(value: string) {
            pb_1.Message.setOneofField(this, 10, this.#one_of_decls[6], value);
        }
        get has_main_function_name() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get experimental_features() {
            return pb_1.Message.getFieldWithDefault(this, 11, []) as KurtosisFeatureFlag[];
        }
        set experimental_features(value: KurtosisFeatureFlag[]) {
            pb_1.Message.setField(this, 11, value);
        }
        get cloud_instance_id() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set cloud_instance_id(value: string) {
            pb_1.Message.setOneofField(this, 12, this.#one_of_decls[7], value);
        }
        get has_cloud_instance_id() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get cloud_user_id() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set cloud_user_id(value: string) {
            pb_1.Message.setOneofField(this, 13, this.#one_of_decls[8], value);
        }
        get has_cloud_user_id() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get image_download_mode() {
            return pb_1.Message.getFieldWithDefault(this, 14, ImageDownloadMode.always) as ImageDownloadMode;
        }
        set image_download_mode(value: ImageDownloadMode) {
            pb_1.Message.setOneofField(this, 14, this.#one_of_decls[9], value);
        }
        get has_image_download_mode() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get non_blocking_mode() {
            return pb_1.Message.getFieldWithDefault(this, 15, false) as boolean;
        }
        set non_blocking_mode(value: boolean) {
            pb_1.Message.setOneofField(this, 15, this.#one_of_decls[10], value);
        }
        get has_non_blocking_mode() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get starlark_package_content() {
            const cases: {
                [index: number]: "none" | "local" | "remote";
            } = {
                0: "none",
                3: "local",
                4: "remote"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3, 4])];
        }
        get _serialized_params() {
            const cases: {
                [index: number]: "none" | "serialized_params";
            } = {
                0: "none",
                5: "serialized_params"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        get _dry_run() {
            const cases: {
                [index: number]: "none" | "dry_run";
            } = {
                0: "none",
                6: "dry_run"
            };
            return cases[pb_1.Message.computeOneofCase(this, [6])];
        }
        get _parallelism() {
            const cases: {
                [index: number]: "none" | "parallelism";
            } = {
                0: "none",
                7: "parallelism"
            };
            return cases[pb_1.Message.computeOneofCase(this, [7])];
        }
        get _clone_package() {
            const cases: {
                [index: number]: "none" | "clone_package";
            } = {
                0: "none",
                8: "clone_package"
            };
            return cases[pb_1.Message.computeOneofCase(this, [8])];
        }
        get _relative_path_to_main_file() {
            const cases: {
                [index: number]: "none" | "relative_path_to_main_file";
            } = {
                0: "none",
                9: "relative_path_to_main_file"
            };
            return cases[pb_1.Message.computeOneofCase(this, [9])];
        }
        get _main_function_name() {
            const cases: {
                [index: number]: "none" | "main_function_name";
            } = {
                0: "none",
                10: "main_function_name"
            };
            return cases[pb_1.Message.computeOneofCase(this, [10])];
        }
        get _cloud_instance_id() {
            const cases: {
                [index: number]: "none" | "cloud_instance_id";
            } = {
                0: "none",
                12: "cloud_instance_id"
            };
            return cases[pb_1.Message.computeOneofCase(this, [12])];
        }
        get _cloud_user_id() {
            const cases: {
                [index: number]: "none" | "cloud_user_id";
            } = {
                0: "none",
                13: "cloud_user_id"
            };
            return cases[pb_1.Message.computeOneofCase(this, [13])];
        }
        get _image_download_mode() {
            const cases: {
                [index: number]: "none" | "image_download_mode";
            } = {
                0: "none",
                14: "image_download_mode"
            };
            return cases[pb_1.Message.computeOneofCase(this, [14])];
        }
        get _non_blocking_mode() {
            const cases: {
                [index: number]: "none" | "non_blocking_mode";
            } = {
                0: "none",
                15: "non_blocking_mode"
            };
            return cases[pb_1.Message.computeOneofCase(this, [15])];
        }
        static fromObject(data: {
            package_id?: string;
            local?: Uint8Array;
            remote?: boolean;
            serialized_params?: string;
            dry_run?: boolean;
            parallelism?: number;
            clone_package?: boolean;
            relative_path_to_main_file?: string;
            main_function_name?: string;
            experimental_features?: KurtosisFeatureFlag[];
            cloud_instance_id?: string;
            cloud_user_id?: string;
            image_download_mode?: ImageDownloadMode;
            non_blocking_mode?: boolean;
        }): RunStarlarkPackageArgs {
            const message = new RunStarlarkPackageArgs({});
            if (data.package_id != null) {
                message.package_id = data.package_id;
            }
            if (data.local != null) {
                message.local = data.local;
            }
            if (data.remote != null) {
                message.remote = data.remote;
            }
            if (data.serialized_params != null) {
                message.serialized_params = data.serialized_params;
            }
            if (data.dry_run != null) {
                message.dry_run = data.dry_run;
            }
            if (data.parallelism != null) {
                message.parallelism = data.parallelism;
            }
            if (data.clone_package != null) {
                message.clone_package = data.clone_package;
            }
            if (data.relative_path_to_main_file != null) {
                message.relative_path_to_main_file = data.relative_path_to_main_file;
            }
            if (data.main_function_name != null) {
                message.main_function_name = data.main_function_name;
            }
            if (data.experimental_features != null) {
                message.experimental_features = data.experimental_features;
            }
            if (data.cloud_instance_id != null) {
                message.cloud_instance_id = data.cloud_instance_id;
            }
            if (data.cloud_user_id != null) {
                message.cloud_user_id = data.cloud_user_id;
            }
            if (data.image_download_mode != null) {
                message.image_download_mode = data.image_download_mode;
            }
            if (data.non_blocking_mode != null) {
                message.non_blocking_mode = data.non_blocking_mode;
            }
            return message;
        }
        toObject() {
            const data: {
                package_id?: string;
                local?: Uint8Array;
                remote?: boolean;
                serialized_params?: string;
                dry_run?: boolean;
                parallelism?: number;
                clone_package?: boolean;
                relative_path_to_main_file?: string;
                main_function_name?: string;
                experimental_features?: KurtosisFeatureFlag[];
                cloud_instance_id?: string;
                cloud_user_id?: string;
                image_download_mode?: ImageDownloadMode;
                non_blocking_mode?: boolean;
            } = {};
            if (this.package_id != null) {
                data.package_id = this.package_id;
            }
            if (this.local != null) {
                data.local = this.local;
            }
            if (this.remote != null) {
                data.remote = this.remote;
            }
            if (this.serialized_params != null) {
                data.serialized_params = this.serialized_params;
            }
            if (this.dry_run != null) {
                data.dry_run = this.dry_run;
            }
            if (this.parallelism != null) {
                data.parallelism = this.parallelism;
            }
            if (this.clone_package != null) {
                data.clone_package = this.clone_package;
            }
            if (this.relative_path_to_main_file != null) {
                data.relative_path_to_main_file = this.relative_path_to_main_file;
            }
            if (this.main_function_name != null) {
                data.main_function_name = this.main_function_name;
            }
            if (this.experimental_features != null) {
                data.experimental_features = this.experimental_features;
            }
            if (this.cloud_instance_id != null) {
                data.cloud_instance_id = this.cloud_instance_id;
            }
            if (this.cloud_user_id != null) {
                data.cloud_user_id = this.cloud_user_id;
            }
            if (this.image_download_mode != null) {
                data.image_download_mode = this.image_download_mode;
            }
            if (this.non_blocking_mode != null) {
                data.non_blocking_mode = this.non_blocking_mode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.package_id.length)
                writer.writeString(1, this.package_id);
            if (this.has_local)
                writer.writeBytes(3, this.local);
            if (this.has_remote)
                writer.writeBool(4, this.remote);
            if (this.has_serialized_params)
                writer.writeString(5, this.serialized_params);
            if (this.has_dry_run)
                writer.writeBool(6, this.dry_run);
            if (this.has_parallelism)
                writer.writeInt32(7, this.parallelism);
            if (this.has_clone_package)
                writer.writeBool(8, this.clone_package);
            if (this.has_relative_path_to_main_file)
                writer.writeString(9, this.relative_path_to_main_file);
            if (this.has_main_function_name)
                writer.writeString(10, this.main_function_name);
            if (this.experimental_features.length)
                writer.writePackedEnum(11, this.experimental_features);
            if (this.has_cloud_instance_id)
                writer.writeString(12, this.cloud_instance_id);
            if (this.has_cloud_user_id)
                writer.writeString(13, this.cloud_user_id);
            if (this.has_image_download_mode)
                writer.writeEnum(14, this.image_download_mode);
            if (this.has_non_blocking_mode)
                writer.writeBool(15, this.non_blocking_mode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RunStarlarkPackageArgs {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RunStarlarkPackageArgs();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.package_id = reader.readString();
                        break;
                    case 3:
                        message.local = reader.readBytes();
                        break;
                    case 4:
                        message.remote = reader.readBool();
                        break;
                    case 5:
                        message.serialized_params = reader.readString();
                        break;
                    case 6:
                        message.dry_run = reader.readBool();
                        break;
                    case 7:
                        message.parallelism = reader.readInt32();
                        break;
                    case 8:
                        message.clone_package = reader.readBool();
                        break;
                    case 9:
                        message.relative_path_to_main_file = reader.readString();
                        break;
                    case 10:
                        message.main_function_name = reader.readString();
                        break;
                    case 11:
                        message.experimental_features = reader.readPackedEnum();
                        break;
                    case 12:
                        message.cloud_instance_id = reader.readString();
                        break;
                    case 13:
                        message.cloud_user_id = reader.readString();
                        break;
                    case 14:
                        message.image_download_mode = reader.readEnum();
                        break;
                    case 15:
                        message.non_blocking_mode = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RunStarlarkPackageArgs {
            return RunStarlarkPackageArgs.deserialize(bytes);
        }
    }
    export class StarlarkRunResponseLine extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6, 7]];
        constructor(data?: any[] | ({} & (({
            instruction?: StarlarkInstruction;
            error?: never;
            progress_info?: never;
            instruction_result?: never;
            run_finished_event?: never;
            warning?: never;
            info?: never;
        } | {
            instruction?: never;
            error?: StarlarkError;
            progress_info?: never;
            instruction_result?: never;
            run_finished_event?: never;
            warning?: never;
            info?: never;
        } | {
            instruction?: never;
            error?: never;
            progress_info?: StarlarkRunProgress;
            instruction_result?: never;
            run_finished_event?: never;
            warning?: never;
            info?: never;
        } | {
            instruction?: never;
            error?: never;
            progress_info?: never;
            instruction_result?: StarlarkInstructionResult;
            run_finished_event?: never;
            warning?: never;
            info?: never;
        } | {
            instruction?: never;
            error?: never;
            progress_info?: never;
            instruction_result?: never;
            run_finished_event?: StarlarkRunFinishedEvent;
            warning?: never;
            info?: never;
        } | {
            instruction?: never;
            error?: never;
            progress_info?: never;
            instruction_result?: never;
            run_finished_event?: never;
            warning?: StarlarkWarning;
            info?: never;
        } | {
            instruction?: never;
            error?: never;
            progress_info?: never;
            instruction_result?: never;
            run_finished_event?: never;
            warning?: never;
            info?: StarlarkInfo;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("instruction" in data && data.instruction != undefined) {
                    this.instruction = data.instruction;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("progress_info" in data && data.progress_info != undefined) {
                    this.progress_info = data.progress_info;
                }
                if ("instruction_result" in data && data.instruction_result != undefined) {
                    this.instruction_result = data.instruction_result;
                }
                if ("run_finished_event" in data && data.run_finished_event != undefined) {
                    this.run_finished_event = data.run_finished_event;
                }
                if ("warning" in data && data.warning != undefined) {
                    this.warning = data.warning;
                }
                if ("info" in data && data.info != undefined) {
                    this.info = data.info;
                }
            }
        }
        get instruction() {
            return pb_1.Message.getWrapperField(this, StarlarkInstruction, 1) as StarlarkInstruction;
        }
        set instruction(value: StarlarkInstruction) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_instruction() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, StarlarkError, 2) as StarlarkError;
        }
        set error(value: StarlarkError) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get progress_info() {
            return pb_1.Message.getWrapperField(this, StarlarkRunProgress, 3) as StarlarkRunProgress;
        }
        set progress_info(value: StarlarkRunProgress) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_progress_info() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get instruction_result() {
            return pb_1.Message.getWrapperField(this, StarlarkInstructionResult, 4) as StarlarkInstructionResult;
        }
        set instruction_result(value: StarlarkInstructionResult) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_instruction_result() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get run_finished_event() {
            return pb_1.Message.getWrapperField(this, StarlarkRunFinishedEvent, 5) as StarlarkRunFinishedEvent;
        }
        set run_finished_event(value: StarlarkRunFinishedEvent) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_run_finished_event() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get warning() {
            return pb_1.Message.getWrapperField(this, StarlarkWarning, 6) as StarlarkWarning;
        }
        set warning(value: StarlarkWarning) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_warning() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get info() {
            return pb_1.Message.getWrapperField(this, StarlarkInfo, 7) as StarlarkInfo;
        }
        set info(value: StarlarkInfo) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_info() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get run_response_line() {
            const cases: {
                [index: number]: "none" | "instruction" | "error" | "progress_info" | "instruction_result" | "run_finished_event" | "warning" | "info";
            } = {
                0: "none",
                1: "instruction",
                2: "error",
                3: "progress_info",
                4: "instruction_result",
                5: "run_finished_event",
                6: "warning",
                7: "info"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7])];
        }
        static fromObject(data: {
            instruction?: ReturnType<typeof StarlarkInstruction.prototype.toObject>;
            error?: ReturnType<typeof StarlarkError.prototype.toObject>;
            progress_info?: ReturnType<typeof StarlarkRunProgress.prototype.toObject>;
            instruction_result?: ReturnType<typeof StarlarkInstructionResult.prototype.toObject>;
            run_finished_event?: ReturnType<typeof StarlarkRunFinishedEvent.prototype.toObject>;
            warning?: ReturnType<typeof StarlarkWarning.prototype.toObject>;
            info?: ReturnType<typeof StarlarkInfo.prototype.toObject>;
        }): StarlarkRunResponseLine {
            const message = new StarlarkRunResponseLine({});
            if (data.instruction != null) {
                message.instruction = StarlarkInstruction.fromObject(data.instruction);
            }
            if (data.error != null) {
                message.error = StarlarkError.fromObject(data.error);
            }
            if (data.progress_info != null) {
                message.progress_info = StarlarkRunProgress.fromObject(data.progress_info);
            }
            if (data.instruction_result != null) {
                message.instruction_result = StarlarkInstructionResult.fromObject(data.instruction_result);
            }
            if (data.run_finished_event != null) {
                message.run_finished_event = StarlarkRunFinishedEvent.fromObject(data.run_finished_event);
            }
            if (data.warning != null) {
                message.warning = StarlarkWarning.fromObject(data.warning);
            }
            if (data.info != null) {
                message.info = StarlarkInfo.fromObject(data.info);
            }
            return message;
        }
        toObject() {
            const data: {
                instruction?: ReturnType<typeof StarlarkInstruction.prototype.toObject>;
                error?: ReturnType<typeof StarlarkError.prototype.toObject>;
                progress_info?: ReturnType<typeof StarlarkRunProgress.prototype.toObject>;
                instruction_result?: ReturnType<typeof StarlarkInstructionResult.prototype.toObject>;
                run_finished_event?: ReturnType<typeof StarlarkRunFinishedEvent.prototype.toObject>;
                warning?: ReturnType<typeof StarlarkWarning.prototype.toObject>;
                info?: ReturnType<typeof StarlarkInfo.prototype.toObject>;
            } = {};
            if (this.instruction != null) {
                data.instruction = this.instruction.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            if (this.progress_info != null) {
                data.progress_info = this.progress_info.toObject();
            }
            if (this.instruction_result != null) {
                data.instruction_result = this.instruction_result.toObject();
            }
            if (this.run_finished_event != null) {
                data.run_finished_event = this.run_finished_event.toObject();
            }
            if (this.warning != null) {
                data.warning = this.warning.toObject();
            }
            if (this.info != null) {
                data.info = this.info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_instruction)
                writer.writeMessage(1, this.instruction, () => this.instruction.serialize(writer));
            if (this.has_error)
                writer.writeMessage(2, this.error, () => this.error.serialize(writer));
            if (this.has_progress_info)
                writer.writeMessage(3, this.progress_info, () => this.progress_info.serialize(writer));
            if (this.has_instruction_result)
                writer.writeMessage(4, this.instruction_result, () => this.instruction_result.serialize(writer));
            if (this.has_run_finished_event)
                writer.writeMessage(5, this.run_finished_event, () => this.run_finished_event.serialize(writer));
            if (this.has_warning)
                writer.writeMessage(6, this.warning, () => this.warning.serialize(writer));
            if (this.has_info)
                writer.writeMessage(7, this.info, () => this.info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StarlarkRunResponseLine {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StarlarkRunResponseLine();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.instruction, () => message.instruction = StarlarkInstruction.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.error, () => message.error = StarlarkError.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.progress_info, () => message.progress_info = StarlarkRunProgress.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.instruction_result, () => message.instruction_result = StarlarkInstructionResult.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.run_finished_event, () => message.run_finished_event = StarlarkRunFinishedEvent.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.warning, () => message.warning = StarlarkWarning.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.info, () => message.info = StarlarkInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StarlarkRunResponseLine {
            return StarlarkRunResponseLine.deserialize(bytes);
        }
    }
    export class StarlarkInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            info_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("info_message" in data && data.info_message != undefined) {
                    this.info_message = data.info_message;
                }
            }
        }
        get info_message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set info_message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            info_message?: string;
        }): StarlarkInfo {
            const message = new StarlarkInfo({});
            if (data.info_message != null) {
                message.info_message = data.info_message;
            }
            return message;
        }
        toObject() {
            const data: {
                info_message?: string;
            } = {};
            if (this.info_message != null) {
                data.info_message = this.info_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.info_message.length)
                writer.writeString(1, this.info_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StarlarkInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StarlarkInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.info_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StarlarkInfo {
            return StarlarkInfo.deserialize(bytes);
        }
    }
    export class StarlarkWarning extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            warning_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("warning_message" in data && data.warning_message != undefined) {
                    this.warning_message = data.warning_message;
                }
            }
        }
        get warning_message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set warning_message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            warning_message?: string;
        }): StarlarkWarning {
            const message = new StarlarkWarning({});
            if (data.warning_message != null) {
                message.warning_message = data.warning_message;
            }
            return message;
        }
        toObject() {
            const data: {
                warning_message?: string;
            } = {};
            if (this.warning_message != null) {
                data.warning_message = this.warning_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.warning_message.length)
                writer.writeString(1, this.warning_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StarlarkWarning {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StarlarkWarning();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.warning_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StarlarkWarning {
            return StarlarkWarning.deserialize(bytes);
        }
    }
    export class StarlarkInstruction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            position?: StarlarkInstructionPosition;
            instruction_name?: string;
            arguments?: StarlarkInstructionArg[];
            executable_instruction?: string;
            is_skipped?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("position" in data && data.position != undefined) {
                    this.position = data.position;
                }
                if ("instruction_name" in data && data.instruction_name != undefined) {
                    this.instruction_name = data.instruction_name;
                }
                if ("arguments" in data && data.arguments != undefined) {
                    this.arguments = data.arguments;
                }
                if ("executable_instruction" in data && data.executable_instruction != undefined) {
                    this.executable_instruction = data.executable_instruction;
                }
                if ("is_skipped" in data && data.is_skipped != undefined) {
                    this.is_skipped = data.is_skipped;
                }
            }
        }
        get position() {
            return pb_1.Message.getWrapperField(this, StarlarkInstructionPosition, 1) as StarlarkInstructionPosition;
        }
        set position(value: StarlarkInstructionPosition) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_position() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get instruction_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set instruction_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get arguments() {
            return pb_1.Message.getRepeatedWrapperField(this, StarlarkInstructionArg, 3) as StarlarkInstructionArg[];
        }
        set arguments(value: StarlarkInstructionArg[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get executable_instruction() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set executable_instruction(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get is_skipped() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set is_skipped(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            position?: ReturnType<typeof StarlarkInstructionPosition.prototype.toObject>;
            instruction_name?: string;
            arguments?: ReturnType<typeof StarlarkInstructionArg.prototype.toObject>[];
            executable_instruction?: string;
            is_skipped?: boolean;
        }): StarlarkInstruction {
            const message = new StarlarkInstruction({});
            if (data.position != null) {
                message.position = StarlarkInstructionPosition.fromObject(data.position);
            }
            if (data.instruction_name != null) {
                message.instruction_name = data.instruction_name;
            }
            if (data.arguments != null) {
                message.arguments = data.arguments.map(item => StarlarkInstructionArg.fromObject(item));
            }
            if (data.executable_instruction != null) {
                message.executable_instruction = data.executable_instruction;
            }
            if (data.is_skipped != null) {
                message.is_skipped = data.is_skipped;
            }
            return message;
        }
        toObject() {
            const data: {
                position?: ReturnType<typeof StarlarkInstructionPosition.prototype.toObject>;
                instruction_name?: string;
                arguments?: ReturnType<typeof StarlarkInstructionArg.prototype.toObject>[];
                executable_instruction?: string;
                is_skipped?: boolean;
            } = {};
            if (this.position != null) {
                data.position = this.position.toObject();
            }
            if (this.instruction_name != null) {
                data.instruction_name = this.instruction_name;
            }
            if (this.arguments != null) {
                data.arguments = this.arguments.map((item: StarlarkInstructionArg) => item.toObject());
            }
            if (this.executable_instruction != null) {
                data.executable_instruction = this.executable_instruction;
            }
            if (this.is_skipped != null) {
                data.is_skipped = this.is_skipped;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_position)
                writer.writeMessage(1, this.position, () => this.position.serialize(writer));
            if (this.instruction_name.length)
                writer.writeString(2, this.instruction_name);
            if (this.arguments.length)
                writer.writeRepeatedMessage(3, this.arguments, (item: StarlarkInstructionArg) => item.serialize(writer));
            if (this.executable_instruction.length)
                writer.writeString(4, this.executable_instruction);
            if (this.is_skipped != false)
                writer.writeBool(5, this.is_skipped);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StarlarkInstruction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StarlarkInstruction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.position, () => message.position = StarlarkInstructionPosition.deserialize(reader));
                        break;
                    case 2:
                        message.instruction_name = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.arguments, () => pb_1.Message.addToRepeatedWrapperField(message, 3, StarlarkInstructionArg.deserialize(reader), StarlarkInstructionArg));
                        break;
                    case 4:
                        message.executable_instruction = reader.readString();
                        break;
                    case 5:
                        message.is_skipped = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StarlarkInstruction {
            return StarlarkInstruction.deserialize(bytes);
        }
    }
    export class StarlarkInstructionResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            serialized_instruction_result?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("serialized_instruction_result" in data && data.serialized_instruction_result != undefined) {
                    this.serialized_instruction_result = data.serialized_instruction_result;
                }
            }
        }
        get serialized_instruction_result() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set serialized_instruction_result(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            serialized_instruction_result?: string;
        }): StarlarkInstructionResult {
            const message = new StarlarkInstructionResult({});
            if (data.serialized_instruction_result != null) {
                message.serialized_instruction_result = data.serialized_instruction_result;
            }
            return message;
        }
        toObject() {
            const data: {
                serialized_instruction_result?: string;
            } = {};
            if (this.serialized_instruction_result != null) {
                data.serialized_instruction_result = this.serialized_instruction_result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.serialized_instruction_result.length)
                writer.writeString(1, this.serialized_instruction_result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StarlarkInstructionResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StarlarkInstructionResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.serialized_instruction_result = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StarlarkInstructionResult {
            return StarlarkInstructionResult.deserialize(bytes);
        }
    }
    export class StarlarkInstructionArg extends pb_1.Message {
        #one_of_decls: number[][] = [[2]];
        constructor(data?: any[] | ({
            serialized_arg_value?: string;
            is_representative?: boolean;
        } & (({
            arg_name?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("serialized_arg_value" in data && data.serialized_arg_value != undefined) {
                    this.serialized_arg_value = data.serialized_arg_value;
                }
                if ("arg_name" in data && data.arg_name != undefined) {
                    this.arg_name = data.arg_name;
                }
                if ("is_representative" in data && data.is_representative != undefined) {
                    this.is_representative = data.is_representative;
                }
            }
        }
        get serialized_arg_value() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set serialized_arg_value(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get arg_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set arg_name(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_arg_name() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get is_representative() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set is_representative(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get _arg_name() {
            const cases: {
                [index: number]: "none" | "arg_name";
            } = {
                0: "none",
                2: "arg_name"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            serialized_arg_value?: string;
            arg_name?: string;
            is_representative?: boolean;
        }): StarlarkInstructionArg {
            const message = new StarlarkInstructionArg({});
            if (data.serialized_arg_value != null) {
                message.serialized_arg_value = data.serialized_arg_value;
            }
            if (data.arg_name != null) {
                message.arg_name = data.arg_name;
            }
            if (data.is_representative != null) {
                message.is_representative = data.is_representative;
            }
            return message;
        }
        toObject() {
            const data: {
                serialized_arg_value?: string;
                arg_name?: string;
                is_representative?: boolean;
            } = {};
            if (this.serialized_arg_value != null) {
                data.serialized_arg_value = this.serialized_arg_value;
            }
            if (this.arg_name != null) {
                data.arg_name = this.arg_name;
            }
            if (this.is_representative != null) {
                data.is_representative = this.is_representative;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.serialized_arg_value.length)
                writer.writeString(1, this.serialized_arg_value);
            if (this.has_arg_name)
                writer.writeString(2, this.arg_name);
            if (this.is_representative != false)
                writer.writeBool(3, this.is_representative);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StarlarkInstructionArg {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StarlarkInstructionArg();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.serialized_arg_value = reader.readString();
                        break;
                    case 2:
                        message.arg_name = reader.readString();
                        break;
                    case 3:
                        message.is_representative = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StarlarkInstructionArg {
            return StarlarkInstructionArg.deserialize(bytes);
        }
    }
    export class StarlarkInstructionPosition extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            filename?: string;
            line?: number;
            column?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("filename" in data && data.filename != undefined) {
                    this.filename = data.filename;
                }
                if ("line" in data && data.line != undefined) {
                    this.line = data.line;
                }
                if ("column" in data && data.column != undefined) {
                    this.column = data.column;
                }
            }
        }
        get filename() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set filename(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get line() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set line(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get column() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set column(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            filename?: string;
            line?: number;
            column?: number;
        }): StarlarkInstructionPosition {
            const message = new StarlarkInstructionPosition({});
            if (data.filename != null) {
                message.filename = data.filename;
            }
            if (data.line != null) {
                message.line = data.line;
            }
            if (data.column != null) {
                message.column = data.column;
            }
            return message;
        }
        toObject() {
            const data: {
                filename?: string;
                line?: number;
                column?: number;
            } = {};
            if (this.filename != null) {
                data.filename = this.filename;
            }
            if (this.line != null) {
                data.line = this.line;
            }
            if (this.column != null) {
                data.column = this.column;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.filename.length)
                writer.writeString(1, this.filename);
            if (this.line != 0)
                writer.writeInt32(2, this.line);
            if (this.column != 0)
                writer.writeInt32(3, this.column);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StarlarkInstructionPosition {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StarlarkInstructionPosition();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.filename = reader.readString();
                        break;
                    case 2:
                        message.line = reader.readInt32();
                        break;
                    case 3:
                        message.column = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StarlarkInstructionPosition {
            return StarlarkInstructionPosition.deserialize(bytes);
        }
    }
    export class StarlarkError extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3]];
        constructor(data?: any[] | ({} & (({
            interpretation_error?: StarlarkInterpretationError;
            validation_error?: never;
            execution_error?: never;
        } | {
            interpretation_error?: never;
            validation_error?: StarlarkValidationError;
            execution_error?: never;
        } | {
            interpretation_error?: never;
            validation_error?: never;
            execution_error?: StarlarkExecutionError;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("interpretation_error" in data && data.interpretation_error != undefined) {
                    this.interpretation_error = data.interpretation_error;
                }
                if ("validation_error" in data && data.validation_error != undefined) {
                    this.validation_error = data.validation_error;
                }
                if ("execution_error" in data && data.execution_error != undefined) {
                    this.execution_error = data.execution_error;
                }
            }
        }
        get interpretation_error() {
            return pb_1.Message.getWrapperField(this, StarlarkInterpretationError, 1) as StarlarkInterpretationError;
        }
        set interpretation_error(value: StarlarkInterpretationError) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_interpretation_error() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get validation_error() {
            return pb_1.Message.getWrapperField(this, StarlarkValidationError, 2) as StarlarkValidationError;
        }
        set validation_error(value: StarlarkValidationError) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_validation_error() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get execution_error() {
            return pb_1.Message.getWrapperField(this, StarlarkExecutionError, 3) as StarlarkExecutionError;
        }
        set execution_error(value: StarlarkExecutionError) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_execution_error() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get error() {
            const cases: {
                [index: number]: "none" | "interpretation_error" | "validation_error" | "execution_error";
            } = {
                0: "none",
                1: "interpretation_error",
                2: "validation_error",
                3: "execution_error"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
        }
        static fromObject(data: {
            interpretation_error?: ReturnType<typeof StarlarkInterpretationError.prototype.toObject>;
            validation_error?: ReturnType<typeof StarlarkValidationError.prototype.toObject>;
            execution_error?: ReturnType<typeof StarlarkExecutionError.prototype.toObject>;
        }): StarlarkError {
            const message = new StarlarkError({});
            if (data.interpretation_error != null) {
                message.interpretation_error = StarlarkInterpretationError.fromObject(data.interpretation_error);
            }
            if (data.validation_error != null) {
                message.validation_error = StarlarkValidationError.fromObject(data.validation_error);
            }
            if (data.execution_error != null) {
                message.execution_error = StarlarkExecutionError.fromObject(data.execution_error);
            }
            return message;
        }
        toObject() {
            const data: {
                interpretation_error?: ReturnType<typeof StarlarkInterpretationError.prototype.toObject>;
                validation_error?: ReturnType<typeof StarlarkValidationError.prototype.toObject>;
                execution_error?: ReturnType<typeof StarlarkExecutionError.prototype.toObject>;
            } = {};
            if (this.interpretation_error != null) {
                data.interpretation_error = this.interpretation_error.toObject();
            }
            if (this.validation_error != null) {
                data.validation_error = this.validation_error.toObject();
            }
            if (this.execution_error != null) {
                data.execution_error = this.execution_error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_interpretation_error)
                writer.writeMessage(1, this.interpretation_error, () => this.interpretation_error.serialize(writer));
            if (this.has_validation_error)
                writer.writeMessage(2, this.validation_error, () => this.validation_error.serialize(writer));
            if (this.has_execution_error)
                writer.writeMessage(3, this.execution_error, () => this.execution_error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StarlarkError {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StarlarkError();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.interpretation_error, () => message.interpretation_error = StarlarkInterpretationError.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.validation_error, () => message.validation_error = StarlarkValidationError.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.execution_error, () => message.execution_error = StarlarkExecutionError.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StarlarkError {
            return StarlarkError.deserialize(bytes);
        }
    }
    export class StarlarkInterpretationError extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            error_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("error_message" in data && data.error_message != undefined) {
                    this.error_message = data.error_message;
                }
            }
        }
        get error_message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set error_message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            error_message?: string;
        }): StarlarkInterpretationError {
            const message = new StarlarkInterpretationError({});
            if (data.error_message != null) {
                message.error_message = data.error_message;
            }
            return message;
        }
        toObject() {
            const data: {
                error_message?: string;
            } = {};
            if (this.error_message != null) {
                data.error_message = this.error_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.error_message.length)
                writer.writeString(1, this.error_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StarlarkInterpretationError {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StarlarkInterpretationError();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.error_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StarlarkInterpretationError {
            return StarlarkInterpretationError.deserialize(bytes);
        }
    }
    export class StarlarkValidationError extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            error_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("error_message" in data && data.error_message != undefined) {
                    this.error_message = data.error_message;
                }
            }
        }
        get error_message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set error_message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            error_message?: string;
        }): StarlarkValidationError {
            const message = new StarlarkValidationError({});
            if (data.error_message != null) {
                message.error_message = data.error_message;
            }
            return message;
        }
        toObject() {
            const data: {
                error_message?: string;
            } = {};
            if (this.error_message != null) {
                data.error_message = this.error_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.error_message.length)
                writer.writeString(1, this.error_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StarlarkValidationError {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StarlarkValidationError();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.error_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StarlarkValidationError {
            return StarlarkValidationError.deserialize(bytes);
        }
    }
    export class StarlarkExecutionError extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            error_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("error_message" in data && data.error_message != undefined) {
                    this.error_message = data.error_message;
                }
            }
        }
        get error_message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set error_message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            error_message?: string;
        }): StarlarkExecutionError {
            const message = new StarlarkExecutionError({});
            if (data.error_message != null) {
                message.error_message = data.error_message;
            }
            return message;
        }
        toObject() {
            const data: {
                error_message?: string;
            } = {};
            if (this.error_message != null) {
                data.error_message = this.error_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.error_message.length)
                writer.writeString(1, this.error_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StarlarkExecutionError {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StarlarkExecutionError();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.error_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StarlarkExecutionError {
            return StarlarkExecutionError.deserialize(bytes);
        }
    }
    export class StarlarkRunProgress extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            current_step_info?: string[];
            total_steps?: number;
            current_step_number?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("current_step_info" in data && data.current_step_info != undefined) {
                    this.current_step_info = data.current_step_info;
                }
                if ("total_steps" in data && data.total_steps != undefined) {
                    this.total_steps = data.total_steps;
                }
                if ("current_step_number" in data && data.current_step_number != undefined) {
                    this.current_step_number = data.current_step_number;
                }
            }
        }
        get current_step_info() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set current_step_info(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get total_steps() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total_steps(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get current_step_number() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set current_step_number(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            current_step_info?: string[];
            total_steps?: number;
            current_step_number?: number;
        }): StarlarkRunProgress {
            const message = new StarlarkRunProgress({});
            if (data.current_step_info != null) {
                message.current_step_info = data.current_step_info;
            }
            if (data.total_steps != null) {
                message.total_steps = data.total_steps;
            }
            if (data.current_step_number != null) {
                message.current_step_number = data.current_step_number;
            }
            return message;
        }
        toObject() {
            const data: {
                current_step_info?: string[];
                total_steps?: number;
                current_step_number?: number;
            } = {};
            if (this.current_step_info != null) {
                data.current_step_info = this.current_step_info;
            }
            if (this.total_steps != null) {
                data.total_steps = this.total_steps;
            }
            if (this.current_step_number != null) {
                data.current_step_number = this.current_step_number;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.current_step_info.length)
                writer.writeRepeatedString(1, this.current_step_info);
            if (this.total_steps != 0)
                writer.writeUint32(2, this.total_steps);
            if (this.current_step_number != 0)
                writer.writeUint32(3, this.current_step_number);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StarlarkRunProgress {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StarlarkRunProgress();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 2:
                        message.total_steps = reader.readUint32();
                        break;
                    case 3:
                        message.current_step_number = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StarlarkRunProgress {
            return StarlarkRunProgress.deserialize(bytes);
        }
    }
    export class StarlarkRunFinishedEvent extends pb_1.Message {
        #one_of_decls: number[][] = [[2]];
        constructor(data?: any[] | ({
            is_run_successful?: boolean;
        } & (({
            serialized_output?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("is_run_successful" in data && data.is_run_successful != undefined) {
                    this.is_run_successful = data.is_run_successful;
                }
                if ("serialized_output" in data && data.serialized_output != undefined) {
                    this.serialized_output = data.serialized_output;
                }
            }
        }
        get is_run_successful() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set is_run_successful(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get serialized_output() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set serialized_output(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_serialized_output() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _serialized_output() {
            const cases: {
                [index: number]: "none" | "serialized_output";
            } = {
                0: "none",
                2: "serialized_output"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            is_run_successful?: boolean;
            serialized_output?: string;
        }): StarlarkRunFinishedEvent {
            const message = new StarlarkRunFinishedEvent({});
            if (data.is_run_successful != null) {
                message.is_run_successful = data.is_run_successful;
            }
            if (data.serialized_output != null) {
                message.serialized_output = data.serialized_output;
            }
            return message;
        }
        toObject() {
            const data: {
                is_run_successful?: boolean;
                serialized_output?: string;
            } = {};
            if (this.is_run_successful != null) {
                data.is_run_successful = this.is_run_successful;
            }
            if (this.serialized_output != null) {
                data.serialized_output = this.serialized_output;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.is_run_successful != false)
                writer.writeBool(1, this.is_run_successful);
            if (this.has_serialized_output)
                writer.writeString(2, this.serialized_output);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StarlarkRunFinishedEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StarlarkRunFinishedEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.is_run_successful = reader.readBool();
                        break;
                    case 2:
                        message.serialized_output = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StarlarkRunFinishedEvent {
            return StarlarkRunFinishedEvent.deserialize(bytes);
        }
    }
    export class GetServicesArgs extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            service_identifiers?: Map<string, boolean>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service_identifiers" in data && data.service_identifiers != undefined) {
                    this.service_identifiers = data.service_identifiers;
                }
            }
            if (!this.service_identifiers)
                this.service_identifiers = new Map();
        }
        get service_identifiers() {
            return pb_1.Message.getField(this, 1) as any as Map<string, boolean>;
        }
        set service_identifiers(value: Map<string, boolean>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        static fromObject(data: {
            service_identifiers?: {
                [key: string]: boolean;
            };
        }): GetServicesArgs {
            const message = new GetServicesArgs({});
            if (typeof data.service_identifiers == "object") {
                message.service_identifiers = new Map(Object.entries(data.service_identifiers));
            }
            return message;
        }
        toObject() {
            const data: {
                service_identifiers?: {
                    [key: string]: boolean;
                };
            } = {};
            if (this.service_identifiers != null) {
                data.service_identifiers = (Object.fromEntries)(this.service_identifiers);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.service_identifiers) {
                writer.writeMessage(1, this.service_identifiers, () => {
                    writer.writeString(1, key);
                    writer.writeBool(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetServicesArgs {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetServicesArgs();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.service_identifiers as any, reader, reader.readString, reader.readBool));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetServicesArgs {
            return GetServicesArgs.deserialize(bytes);
        }
    }
    export class GetServicesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            service_info?: Map<string, ServiceInfo>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service_info" in data && data.service_info != undefined) {
                    this.service_info = data.service_info;
                }
            }
            if (!this.service_info)
                this.service_info = new Map();
        }
        get service_info() {
            return pb_1.Message.getField(this, 1) as any as Map<string, ServiceInfo>;
        }
        set service_info(value: Map<string, ServiceInfo>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        static fromObject(data: {
            service_info?: {
                [key: string]: ReturnType<typeof ServiceInfo.prototype.toObject>;
            };
        }): GetServicesResponse {
            const message = new GetServicesResponse({});
            if (typeof data.service_info == "object") {
                message.service_info = new Map(Object.entries(data.service_info).map(([key, value]) => [key, ServiceInfo.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                service_info?: {
                    [key: string]: ReturnType<typeof ServiceInfo.prototype.toObject>;
                };
            } = {};
            if (this.service_info != null) {
                data.service_info = (Object.fromEntries)((Array.from)(this.service_info).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.service_info) {
                writer.writeMessage(1, this.service_info, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetServicesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetServicesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.service_info as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = ServiceInfo.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetServicesResponse {
            return GetServicesResponse.deserialize(bytes);
        }
    }
    export class ServiceIdentifiers extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            service_uuid?: string;
            name?: string;
            shortened_uuid?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service_uuid" in data && data.service_uuid != undefined) {
                    this.service_uuid = data.service_uuid;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("shortened_uuid" in data && data.shortened_uuid != undefined) {
                    this.shortened_uuid = data.shortened_uuid;
                }
            }
        }
        get service_uuid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set service_uuid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get shortened_uuid() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set shortened_uuid(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            service_uuid?: string;
            name?: string;
            shortened_uuid?: string;
        }): ServiceIdentifiers {
            const message = new ServiceIdentifiers({});
            if (data.service_uuid != null) {
                message.service_uuid = data.service_uuid;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.shortened_uuid != null) {
                message.shortened_uuid = data.shortened_uuid;
            }
            return message;
        }
        toObject() {
            const data: {
                service_uuid?: string;
                name?: string;
                shortened_uuid?: string;
            } = {};
            if (this.service_uuid != null) {
                data.service_uuid = this.service_uuid;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.shortened_uuid != null) {
                data.shortened_uuid = this.shortened_uuid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.service_uuid.length)
                writer.writeString(1, this.service_uuid);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.shortened_uuid.length)
                writer.writeString(3, this.shortened_uuid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ServiceIdentifiers {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ServiceIdentifiers();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.service_uuid = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.shortened_uuid = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ServiceIdentifiers {
            return ServiceIdentifiers.deserialize(bytes);
        }
    }
    export class GetExistingAndHistoricalServiceIdentifiersResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            allIdentifiers?: ServiceIdentifiers[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("allIdentifiers" in data && data.allIdentifiers != undefined) {
                    this.allIdentifiers = data.allIdentifiers;
                }
            }
        }
        get allIdentifiers() {
            return pb_1.Message.getRepeatedWrapperField(this, ServiceIdentifiers, 1) as ServiceIdentifiers[];
        }
        set allIdentifiers(value: ServiceIdentifiers[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            allIdentifiers?: ReturnType<typeof ServiceIdentifiers.prototype.toObject>[];
        }): GetExistingAndHistoricalServiceIdentifiersResponse {
            const message = new GetExistingAndHistoricalServiceIdentifiersResponse({});
            if (data.allIdentifiers != null) {
                message.allIdentifiers = data.allIdentifiers.map(item => ServiceIdentifiers.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                allIdentifiers?: ReturnType<typeof ServiceIdentifiers.prototype.toObject>[];
            } = {};
            if (this.allIdentifiers != null) {
                data.allIdentifiers = this.allIdentifiers.map((item: ServiceIdentifiers) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.allIdentifiers.length)
                writer.writeRepeatedMessage(1, this.allIdentifiers, (item: ServiceIdentifiers) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetExistingAndHistoricalServiceIdentifiersResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetExistingAndHistoricalServiceIdentifiersResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.allIdentifiers, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ServiceIdentifiers.deserialize(reader), ServiceIdentifiers));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetExistingAndHistoricalServiceIdentifiersResponse {
            return GetExistingAndHistoricalServiceIdentifiersResponse.deserialize(bytes);
        }
    }
    export class ExecCommandArgs extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            service_identifier?: string;
            command_args?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service_identifier" in data && data.service_identifier != undefined) {
                    this.service_identifier = data.service_identifier;
                }
                if ("command_args" in data && data.command_args != undefined) {
                    this.command_args = data.command_args;
                }
            }
        }
        get service_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set service_identifier(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get command_args() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set command_args(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            service_identifier?: string;
            command_args?: string[];
        }): ExecCommandArgs {
            const message = new ExecCommandArgs({});
            if (data.service_identifier != null) {
                message.service_identifier = data.service_identifier;
            }
            if (data.command_args != null) {
                message.command_args = data.command_args;
            }
            return message;
        }
        toObject() {
            const data: {
                service_identifier?: string;
                command_args?: string[];
            } = {};
            if (this.service_identifier != null) {
                data.service_identifier = this.service_identifier;
            }
            if (this.command_args != null) {
                data.command_args = this.command_args;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.service_identifier.length)
                writer.writeString(1, this.service_identifier);
            if (this.command_args.length)
                writer.writeRepeatedString(2, this.command_args);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExecCommandArgs {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExecCommandArgs();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.service_identifier = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExecCommandArgs {
            return ExecCommandArgs.deserialize(bytes);
        }
    }
    export class ExecCommandResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            exit_code?: number;
            log_output?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("exit_code" in data && data.exit_code != undefined) {
                    this.exit_code = data.exit_code;
                }
                if ("log_output" in data && data.log_output != undefined) {
                    this.log_output = data.log_output;
                }
            }
        }
        get exit_code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set exit_code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get log_output() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set log_output(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            exit_code?: number;
            log_output?: string;
        }): ExecCommandResponse {
            const message = new ExecCommandResponse({});
            if (data.exit_code != null) {
                message.exit_code = data.exit_code;
            }
            if (data.log_output != null) {
                message.log_output = data.log_output;
            }
            return message;
        }
        toObject() {
            const data: {
                exit_code?: number;
                log_output?: string;
            } = {};
            if (this.exit_code != null) {
                data.exit_code = this.exit_code;
            }
            if (this.log_output != null) {
                data.log_output = this.log_output;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.exit_code != 0)
                writer.writeInt32(1, this.exit_code);
            if (this.log_output.length)
                writer.writeString(2, this.log_output);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExecCommandResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExecCommandResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.exit_code = reader.readInt32();
                        break;
                    case 2:
                        message.log_output = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExecCommandResponse {
            return ExecCommandResponse.deserialize(bytes);
        }
    }
    export class WaitForHttpGetEndpointAvailabilityArgs extends pb_1.Message {
        #one_of_decls: number[][] = [[3], [4], [5], [6], [7]];
        constructor(data?: any[] | ({
            service_identifier?: string;
            port?: number;
        } & (({
            path?: string;
        }) | ({
            initial_delay_milliseconds?: number;
        }) | ({
            retries?: number;
        }) | ({
            retries_delay_milliseconds?: number;
        }) | ({
            body_text?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service_identifier" in data && data.service_identifier != undefined) {
                    this.service_identifier = data.service_identifier;
                }
                if ("port" in data && data.port != undefined) {
                    this.port = data.port;
                }
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("initial_delay_milliseconds" in data && data.initial_delay_milliseconds != undefined) {
                    this.initial_delay_milliseconds = data.initial_delay_milliseconds;
                }
                if ("retries" in data && data.retries != undefined) {
                    this.retries = data.retries;
                }
                if ("retries_delay_milliseconds" in data && data.retries_delay_milliseconds != undefined) {
                    this.retries_delay_milliseconds = data.retries_delay_milliseconds;
                }
                if ("body_text" in data && data.body_text != undefined) {
                    this.body_text = data.body_text;
                }
            }
        }
        get service_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set service_identifier(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get port() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set port(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_path() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get initial_delay_milliseconds() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set initial_delay_milliseconds(value: number) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[1], value);
        }
        get has_initial_delay_milliseconds() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get retries() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set retries(value: number) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[2], value);
        }
        get has_retries() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get retries_delay_milliseconds() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set retries_delay_milliseconds(value: number) {
            pb_1.Message.setOneofField(this, 6, this.#one_of_decls[3], value);
        }
        get has_retries_delay_milliseconds() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get body_text() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set body_text(value: string) {
            pb_1.Message.setOneofField(this, 7, this.#one_of_decls[4], value);
        }
        get has_body_text() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get _path() {
            const cases: {
                [index: number]: "none" | "path";
            } = {
                0: "none",
                3: "path"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _initial_delay_milliseconds() {
            const cases: {
                [index: number]: "none" | "initial_delay_milliseconds";
            } = {
                0: "none",
                4: "initial_delay_milliseconds"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        get _retries() {
            const cases: {
                [index: number]: "none" | "retries";
            } = {
                0: "none",
                5: "retries"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        get _retries_delay_milliseconds() {
            const cases: {
                [index: number]: "none" | "retries_delay_milliseconds";
            } = {
                0: "none",
                6: "retries_delay_milliseconds"
            };
            return cases[pb_1.Message.computeOneofCase(this, [6])];
        }
        get _body_text() {
            const cases: {
                [index: number]: "none" | "body_text";
            } = {
                0: "none",
                7: "body_text"
            };
            return cases[pb_1.Message.computeOneofCase(this, [7])];
        }
        static fromObject(data: {
            service_identifier?: string;
            port?: number;
            path?: string;
            initial_delay_milliseconds?: number;
            retries?: number;
            retries_delay_milliseconds?: number;
            body_text?: string;
        }): WaitForHttpGetEndpointAvailabilityArgs {
            const message = new WaitForHttpGetEndpointAvailabilityArgs({});
            if (data.service_identifier != null) {
                message.service_identifier = data.service_identifier;
            }
            if (data.port != null) {
                message.port = data.port;
            }
            if (data.path != null) {
                message.path = data.path;
            }
            if (data.initial_delay_milliseconds != null) {
                message.initial_delay_milliseconds = data.initial_delay_milliseconds;
            }
            if (data.retries != null) {
                message.retries = data.retries;
            }
            if (data.retries_delay_milliseconds != null) {
                message.retries_delay_milliseconds = data.retries_delay_milliseconds;
            }
            if (data.body_text != null) {
                message.body_text = data.body_text;
            }
            return message;
        }
        toObject() {
            const data: {
                service_identifier?: string;
                port?: number;
                path?: string;
                initial_delay_milliseconds?: number;
                retries?: number;
                retries_delay_milliseconds?: number;
                body_text?: string;
            } = {};
            if (this.service_identifier != null) {
                data.service_identifier = this.service_identifier;
            }
            if (this.port != null) {
                data.port = this.port;
            }
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.initial_delay_milliseconds != null) {
                data.initial_delay_milliseconds = this.initial_delay_milliseconds;
            }
            if (this.retries != null) {
                data.retries = this.retries;
            }
            if (this.retries_delay_milliseconds != null) {
                data.retries_delay_milliseconds = this.retries_delay_milliseconds;
            }
            if (this.body_text != null) {
                data.body_text = this.body_text;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.service_identifier.length)
                writer.writeString(1, this.service_identifier);
            if (this.port != 0)
                writer.writeUint32(2, this.port);
            if (this.has_path)
                writer.writeString(3, this.path);
            if (this.has_initial_delay_milliseconds)
                writer.writeUint32(4, this.initial_delay_milliseconds);
            if (this.has_retries)
                writer.writeUint32(5, this.retries);
            if (this.has_retries_delay_milliseconds)
                writer.writeUint32(6, this.retries_delay_milliseconds);
            if (this.has_body_text)
                writer.writeString(7, this.body_text);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WaitForHttpGetEndpointAvailabilityArgs {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WaitForHttpGetEndpointAvailabilityArgs();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.service_identifier = reader.readString();
                        break;
                    case 2:
                        message.port = reader.readUint32();
                        break;
                    case 3:
                        message.path = reader.readString();
                        break;
                    case 4:
                        message.initial_delay_milliseconds = reader.readUint32();
                        break;
                    case 5:
                        message.retries = reader.readUint32();
                        break;
                    case 6:
                        message.retries_delay_milliseconds = reader.readUint32();
                        break;
                    case 7:
                        message.body_text = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WaitForHttpGetEndpointAvailabilityArgs {
            return WaitForHttpGetEndpointAvailabilityArgs.deserialize(bytes);
        }
    }
    export class WaitForHttpPostEndpointAvailabilityArgs extends pb_1.Message {
        #one_of_decls: number[][] = [[3], [4], [5], [6], [7], [8]];
        constructor(data?: any[] | ({
            service_identifier?: string;
            port?: number;
        } & (({
            path?: string;
        }) | ({
            request_body?: string;
        }) | ({
            initial_delay_milliseconds?: number;
        }) | ({
            retries?: number;
        }) | ({
            retries_delay_milliseconds?: number;
        }) | ({
            body_text?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service_identifier" in data && data.service_identifier != undefined) {
                    this.service_identifier = data.service_identifier;
                }
                if ("port" in data && data.port != undefined) {
                    this.port = data.port;
                }
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("request_body" in data && data.request_body != undefined) {
                    this.request_body = data.request_body;
                }
                if ("initial_delay_milliseconds" in data && data.initial_delay_milliseconds != undefined) {
                    this.initial_delay_milliseconds = data.initial_delay_milliseconds;
                }
                if ("retries" in data && data.retries != undefined) {
                    this.retries = data.retries;
                }
                if ("retries_delay_milliseconds" in data && data.retries_delay_milliseconds != undefined) {
                    this.retries_delay_milliseconds = data.retries_delay_milliseconds;
                }
                if ("body_text" in data && data.body_text != undefined) {
                    this.body_text = data.body_text;
                }
            }
        }
        get service_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set service_identifier(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get port() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set port(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_path() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get request_body() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set request_body(value: string) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[1], value);
        }
        get has_request_body() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get initial_delay_milliseconds() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set initial_delay_milliseconds(value: number) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[2], value);
        }
        get has_initial_delay_milliseconds() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get retries() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set retries(value: number) {
            pb_1.Message.setOneofField(this, 6, this.#one_of_decls[3], value);
        }
        get has_retries() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get retries_delay_milliseconds() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set retries_delay_milliseconds(value: number) {
            pb_1.Message.setOneofField(this, 7, this.#one_of_decls[4], value);
        }
        get has_retries_delay_milliseconds() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get body_text() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set body_text(value: string) {
            pb_1.Message.setOneofField(this, 8, this.#one_of_decls[5], value);
        }
        get has_body_text() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get _path() {
            const cases: {
                [index: number]: "none" | "path";
            } = {
                0: "none",
                3: "path"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _request_body() {
            const cases: {
                [index: number]: "none" | "request_body";
            } = {
                0: "none",
                4: "request_body"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        get _initial_delay_milliseconds() {
            const cases: {
                [index: number]: "none" | "initial_delay_milliseconds";
            } = {
                0: "none",
                5: "initial_delay_milliseconds"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        get _retries() {
            const cases: {
                [index: number]: "none" | "retries";
            } = {
                0: "none",
                6: "retries"
            };
            return cases[pb_1.Message.computeOneofCase(this, [6])];
        }
        get _retries_delay_milliseconds() {
            const cases: {
                [index: number]: "none" | "retries_delay_milliseconds";
            } = {
                0: "none",
                7: "retries_delay_milliseconds"
            };
            return cases[pb_1.Message.computeOneofCase(this, [7])];
        }
        get _body_text() {
            const cases: {
                [index: number]: "none" | "body_text";
            } = {
                0: "none",
                8: "body_text"
            };
            return cases[pb_1.Message.computeOneofCase(this, [8])];
        }
        static fromObject(data: {
            service_identifier?: string;
            port?: number;
            path?: string;
            request_body?: string;
            initial_delay_milliseconds?: number;
            retries?: number;
            retries_delay_milliseconds?: number;
            body_text?: string;
        }): WaitForHttpPostEndpointAvailabilityArgs {
            const message = new WaitForHttpPostEndpointAvailabilityArgs({});
            if (data.service_identifier != null) {
                message.service_identifier = data.service_identifier;
            }
            if (data.port != null) {
                message.port = data.port;
            }
            if (data.path != null) {
                message.path = data.path;
            }
            if (data.request_body != null) {
                message.request_body = data.request_body;
            }
            if (data.initial_delay_milliseconds != null) {
                message.initial_delay_milliseconds = data.initial_delay_milliseconds;
            }
            if (data.retries != null) {
                message.retries = data.retries;
            }
            if (data.retries_delay_milliseconds != null) {
                message.retries_delay_milliseconds = data.retries_delay_milliseconds;
            }
            if (data.body_text != null) {
                message.body_text = data.body_text;
            }
            return message;
        }
        toObject() {
            const data: {
                service_identifier?: string;
                port?: number;
                path?: string;
                request_body?: string;
                initial_delay_milliseconds?: number;
                retries?: number;
                retries_delay_milliseconds?: number;
                body_text?: string;
            } = {};
            if (this.service_identifier != null) {
                data.service_identifier = this.service_identifier;
            }
            if (this.port != null) {
                data.port = this.port;
            }
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.request_body != null) {
                data.request_body = this.request_body;
            }
            if (this.initial_delay_milliseconds != null) {
                data.initial_delay_milliseconds = this.initial_delay_milliseconds;
            }
            if (this.retries != null) {
                data.retries = this.retries;
            }
            if (this.retries_delay_milliseconds != null) {
                data.retries_delay_milliseconds = this.retries_delay_milliseconds;
            }
            if (this.body_text != null) {
                data.body_text = this.body_text;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.service_identifier.length)
                writer.writeString(1, this.service_identifier);
            if (this.port != 0)
                writer.writeUint32(2, this.port);
            if (this.has_path)
                writer.writeString(3, this.path);
            if (this.has_request_body)
                writer.writeString(4, this.request_body);
            if (this.has_initial_delay_milliseconds)
                writer.writeUint32(5, this.initial_delay_milliseconds);
            if (this.has_retries)
                writer.writeUint32(6, this.retries);
            if (this.has_retries_delay_milliseconds)
                writer.writeUint32(7, this.retries_delay_milliseconds);
            if (this.has_body_text)
                writer.writeString(8, this.body_text);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WaitForHttpPostEndpointAvailabilityArgs {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WaitForHttpPostEndpointAvailabilityArgs();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.service_identifier = reader.readString();
                        break;
                    case 2:
                        message.port = reader.readUint32();
                        break;
                    case 3:
                        message.path = reader.readString();
                        break;
                    case 4:
                        message.request_body = reader.readString();
                        break;
                    case 5:
                        message.initial_delay_milliseconds = reader.readUint32();
                        break;
                    case 6:
                        message.retries = reader.readUint32();
                        break;
                    case 7:
                        message.retries_delay_milliseconds = reader.readUint32();
                        break;
                    case 8:
                        message.body_text = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WaitForHttpPostEndpointAvailabilityArgs {
            return WaitForHttpPostEndpointAvailabilityArgs.deserialize(bytes);
        }
    }
    export class StreamedDataChunk extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data?: Uint8Array;
            previous_chunk_hash?: string;
            metadata?: DataChunkMetadata;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("previous_chunk_hash" in data && data.previous_chunk_hash != undefined) {
                    this.previous_chunk_hash = data.previous_chunk_hash;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
            }
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get previous_chunk_hash() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set previous_chunk_hash(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, DataChunkMetadata, 3) as DataChunkMetadata;
        }
        set metadata(value: DataChunkMetadata) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            data?: Uint8Array;
            previous_chunk_hash?: string;
            metadata?: ReturnType<typeof DataChunkMetadata.prototype.toObject>;
        }): StreamedDataChunk {
            const message = new StreamedDataChunk({});
            if (data.data != null) {
                message.data = data.data;
            }
            if (data.previous_chunk_hash != null) {
                message.previous_chunk_hash = data.previous_chunk_hash;
            }
            if (data.metadata != null) {
                message.metadata = DataChunkMetadata.fromObject(data.metadata);
            }
            return message;
        }
        toObject() {
            const data: {
                data?: Uint8Array;
                previous_chunk_hash?: string;
                metadata?: ReturnType<typeof DataChunkMetadata.prototype.toObject>;
            } = {};
            if (this.data != null) {
                data.data = this.data;
            }
            if (this.previous_chunk_hash != null) {
                data.previous_chunk_hash = this.previous_chunk_hash;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data.length)
                writer.writeBytes(1, this.data);
            if (this.previous_chunk_hash.length)
                writer.writeString(2, this.previous_chunk_hash);
            if (this.has_metadata)
                writer.writeMessage(3, this.metadata, () => this.metadata.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StreamedDataChunk {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StreamedDataChunk();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.data = reader.readBytes();
                        break;
                    case 2:
                        message.previous_chunk_hash = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.metadata, () => message.metadata = DataChunkMetadata.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StreamedDataChunk {
            return StreamedDataChunk.deserialize(bytes);
        }
    }
    export class DataChunkMetadata extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            name?: string;
        }): DataChunkMetadata {
            const message = new DataChunkMetadata({});
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DataChunkMetadata {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DataChunkMetadata();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DataChunkMetadata {
            return DataChunkMetadata.deserialize(bytes);
        }
    }
    export class UploadFilesArtifactResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            uuid?: string;
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("uuid" in data && data.uuid != undefined) {
                    this.uuid = data.uuid;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get uuid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set uuid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            uuid?: string;
            name?: string;
        }): UploadFilesArtifactResponse {
            const message = new UploadFilesArtifactResponse({});
            if (data.uuid != null) {
                message.uuid = data.uuid;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                uuid?: string;
                name?: string;
            } = {};
            if (this.uuid != null) {
                data.uuid = this.uuid;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.uuid.length)
                writer.writeString(1, this.uuid);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UploadFilesArtifactResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UploadFilesArtifactResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.uuid = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UploadFilesArtifactResponse {
            return UploadFilesArtifactResponse.deserialize(bytes);
        }
    }
    export class DownloadFilesArtifactArgs extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            identifier?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("identifier" in data && data.identifier != undefined) {
                    this.identifier = data.identifier;
                }
            }
        }
        get identifier() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set identifier(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            identifier?: string;
        }): DownloadFilesArtifactArgs {
            const message = new DownloadFilesArtifactArgs({});
            if (data.identifier != null) {
                message.identifier = data.identifier;
            }
            return message;
        }
        toObject() {
            const data: {
                identifier?: string;
            } = {};
            if (this.identifier != null) {
                data.identifier = this.identifier;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.identifier.length)
                writer.writeString(1, this.identifier);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DownloadFilesArtifactArgs {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DownloadFilesArtifactArgs();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.identifier = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DownloadFilesArtifactArgs {
            return DownloadFilesArtifactArgs.deserialize(bytes);
        }
    }
    export class StoreWebFilesArtifactArgs extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            url?: string;
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            url?: string;
            name?: string;
        }): StoreWebFilesArtifactArgs {
            const message = new StoreWebFilesArtifactArgs({});
            if (data.url != null) {
                message.url = data.url;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                url?: string;
                name?: string;
            } = {};
            if (this.url != null) {
                data.url = this.url;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.url.length)
                writer.writeString(1, this.url);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StoreWebFilesArtifactArgs {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StoreWebFilesArtifactArgs();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.url = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StoreWebFilesArtifactArgs {
            return StoreWebFilesArtifactArgs.deserialize(bytes);
        }
    }
    export class StoreWebFilesArtifactResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            uuid?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("uuid" in data && data.uuid != undefined) {
                    this.uuid = data.uuid;
                }
            }
        }
        get uuid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set uuid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            uuid?: string;
        }): StoreWebFilesArtifactResponse {
            const message = new StoreWebFilesArtifactResponse({});
            if (data.uuid != null) {
                message.uuid = data.uuid;
            }
            return message;
        }
        toObject() {
            const data: {
                uuid?: string;
            } = {};
            if (this.uuid != null) {
                data.uuid = this.uuid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.uuid.length)
                writer.writeString(1, this.uuid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StoreWebFilesArtifactResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StoreWebFilesArtifactResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.uuid = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StoreWebFilesArtifactResponse {
            return StoreWebFilesArtifactResponse.deserialize(bytes);
        }
    }
    export class StoreFilesArtifactFromServiceArgs extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            service_identifier?: string;
            source_path?: string;
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service_identifier" in data && data.service_identifier != undefined) {
                    this.service_identifier = data.service_identifier;
                }
                if ("source_path" in data && data.source_path != undefined) {
                    this.source_path = data.source_path;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get service_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set service_identifier(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get source_path() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set source_path(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            service_identifier?: string;
            source_path?: string;
            name?: string;
        }): StoreFilesArtifactFromServiceArgs {
            const message = new StoreFilesArtifactFromServiceArgs({});
            if (data.service_identifier != null) {
                message.service_identifier = data.service_identifier;
            }
            if (data.source_path != null) {
                message.source_path = data.source_path;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                service_identifier?: string;
                source_path?: string;
                name?: string;
            } = {};
            if (this.service_identifier != null) {
                data.service_identifier = this.service_identifier;
            }
            if (this.source_path != null) {
                data.source_path = this.source_path;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.service_identifier.length)
                writer.writeString(1, this.service_identifier);
            if (this.source_path.length)
                writer.writeString(2, this.source_path);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StoreFilesArtifactFromServiceArgs {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StoreFilesArtifactFromServiceArgs();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.service_identifier = reader.readString();
                        break;
                    case 2:
                        message.source_path = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StoreFilesArtifactFromServiceArgs {
            return StoreFilesArtifactFromServiceArgs.deserialize(bytes);
        }
    }
    export class StoreFilesArtifactFromServiceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            uuid?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("uuid" in data && data.uuid != undefined) {
                    this.uuid = data.uuid;
                }
            }
        }
        get uuid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set uuid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            uuid?: string;
        }): StoreFilesArtifactFromServiceResponse {
            const message = new StoreFilesArtifactFromServiceResponse({});
            if (data.uuid != null) {
                message.uuid = data.uuid;
            }
            return message;
        }
        toObject() {
            const data: {
                uuid?: string;
            } = {};
            if (this.uuid != null) {
                data.uuid = this.uuid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.uuid.length)
                writer.writeString(1, this.uuid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StoreFilesArtifactFromServiceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StoreFilesArtifactFromServiceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.uuid = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StoreFilesArtifactFromServiceResponse {
            return StoreFilesArtifactFromServiceResponse.deserialize(bytes);
        }
    }
    export class FilesArtifactNameAndUuid extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            fileName?: string;
            fileUuid?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("fileName" in data && data.fileName != undefined) {
                    this.fileName = data.fileName;
                }
                if ("fileUuid" in data && data.fileUuid != undefined) {
                    this.fileUuid = data.fileUuid;
                }
            }
        }
        get fileName() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set fileName(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get fileUuid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set fileUuid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            fileName?: string;
            fileUuid?: string;
        }): FilesArtifactNameAndUuid {
            const message = new FilesArtifactNameAndUuid({});
            if (data.fileName != null) {
                message.fileName = data.fileName;
            }
            if (data.fileUuid != null) {
                message.fileUuid = data.fileUuid;
            }
            return message;
        }
        toObject() {
            const data: {
                fileName?: string;
                fileUuid?: string;
            } = {};
            if (this.fileName != null) {
                data.fileName = this.fileName;
            }
            if (this.fileUuid != null) {
                data.fileUuid = this.fileUuid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.fileName.length)
                writer.writeString(1, this.fileName);
            if (this.fileUuid.length)
                writer.writeString(2, this.fileUuid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FilesArtifactNameAndUuid {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FilesArtifactNameAndUuid();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.fileName = reader.readString();
                        break;
                    case 2:
                        message.fileUuid = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FilesArtifactNameAndUuid {
            return FilesArtifactNameAndUuid.deserialize(bytes);
        }
    }
    export class ListFilesArtifactNamesAndUuidsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            file_names_and_uuids?: FilesArtifactNameAndUuid[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("file_names_and_uuids" in data && data.file_names_and_uuids != undefined) {
                    this.file_names_and_uuids = data.file_names_and_uuids;
                }
            }
        }
        get file_names_and_uuids() {
            return pb_1.Message.getRepeatedWrapperField(this, FilesArtifactNameAndUuid, 1) as FilesArtifactNameAndUuid[];
        }
        set file_names_and_uuids(value: FilesArtifactNameAndUuid[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            file_names_and_uuids?: ReturnType<typeof FilesArtifactNameAndUuid.prototype.toObject>[];
        }): ListFilesArtifactNamesAndUuidsResponse {
            const message = new ListFilesArtifactNamesAndUuidsResponse({});
            if (data.file_names_and_uuids != null) {
                message.file_names_and_uuids = data.file_names_and_uuids.map(item => FilesArtifactNameAndUuid.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                file_names_and_uuids?: ReturnType<typeof FilesArtifactNameAndUuid.prototype.toObject>[];
            } = {};
            if (this.file_names_and_uuids != null) {
                data.file_names_and_uuids = this.file_names_and_uuids.map((item: FilesArtifactNameAndUuid) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.file_names_and_uuids.length)
                writer.writeRepeatedMessage(1, this.file_names_and_uuids, (item: FilesArtifactNameAndUuid) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListFilesArtifactNamesAndUuidsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListFilesArtifactNamesAndUuidsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.file_names_and_uuids, () => pb_1.Message.addToRepeatedWrapperField(message, 1, FilesArtifactNameAndUuid.deserialize(reader), FilesArtifactNameAndUuid));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListFilesArtifactNamesAndUuidsResponse {
            return ListFilesArtifactNamesAndUuidsResponse.deserialize(bytes);
        }
    }
    export class InspectFilesArtifactContentsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            file_names_and_uuid?: FilesArtifactNameAndUuid;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("file_names_and_uuid" in data && data.file_names_and_uuid != undefined) {
                    this.file_names_and_uuid = data.file_names_and_uuid;
                }
            }
        }
        get file_names_and_uuid() {
            return pb_1.Message.getWrapperField(this, FilesArtifactNameAndUuid, 1) as FilesArtifactNameAndUuid;
        }
        set file_names_and_uuid(value: FilesArtifactNameAndUuid) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_file_names_and_uuid() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            file_names_and_uuid?: ReturnType<typeof FilesArtifactNameAndUuid.prototype.toObject>;
        }): InspectFilesArtifactContentsRequest {
            const message = new InspectFilesArtifactContentsRequest({});
            if (data.file_names_and_uuid != null) {
                message.file_names_and_uuid = FilesArtifactNameAndUuid.fromObject(data.file_names_and_uuid);
            }
            return message;
        }
        toObject() {
            const data: {
                file_names_and_uuid?: ReturnType<typeof FilesArtifactNameAndUuid.prototype.toObject>;
            } = {};
            if (this.file_names_and_uuid != null) {
                data.file_names_and_uuid = this.file_names_and_uuid.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_file_names_and_uuid)
                writer.writeMessage(1, this.file_names_and_uuid, () => this.file_names_and_uuid.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InspectFilesArtifactContentsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InspectFilesArtifactContentsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.file_names_and_uuid, () => message.file_names_and_uuid = FilesArtifactNameAndUuid.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InspectFilesArtifactContentsRequest {
            return InspectFilesArtifactContentsRequest.deserialize(bytes);
        }
    }
    export class InspectFilesArtifactContentsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            file_descriptions?: FileArtifactContentsFileDescription[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("file_descriptions" in data && data.file_descriptions != undefined) {
                    this.file_descriptions = data.file_descriptions;
                }
            }
        }
        get file_descriptions() {
            return pb_1.Message.getRepeatedWrapperField(this, FileArtifactContentsFileDescription, 1) as FileArtifactContentsFileDescription[];
        }
        set file_descriptions(value: FileArtifactContentsFileDescription[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            file_descriptions?: ReturnType<typeof FileArtifactContentsFileDescription.prototype.toObject>[];
        }): InspectFilesArtifactContentsResponse {
            const message = new InspectFilesArtifactContentsResponse({});
            if (data.file_descriptions != null) {
                message.file_descriptions = data.file_descriptions.map(item => FileArtifactContentsFileDescription.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                file_descriptions?: ReturnType<typeof FileArtifactContentsFileDescription.prototype.toObject>[];
            } = {};
            if (this.file_descriptions != null) {
                data.file_descriptions = this.file_descriptions.map((item: FileArtifactContentsFileDescription) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.file_descriptions.length)
                writer.writeRepeatedMessage(1, this.file_descriptions, (item: FileArtifactContentsFileDescription) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InspectFilesArtifactContentsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InspectFilesArtifactContentsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.file_descriptions, () => pb_1.Message.addToRepeatedWrapperField(message, 1, FileArtifactContentsFileDescription.deserialize(reader), FileArtifactContentsFileDescription));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InspectFilesArtifactContentsResponse {
            return InspectFilesArtifactContentsResponse.deserialize(bytes);
        }
    }
    export class FileArtifactContentsFileDescription extends pb_1.Message {
        #one_of_decls: number[][] = [[3]];
        constructor(data?: any[] | ({
            path?: string;
            size?: number;
        } & (({
            text_preview?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("size" in data && data.size != undefined) {
                    this.size = data.size;
                }
                if ("text_preview" in data && data.text_preview != undefined) {
                    this.text_preview = data.text_preview;
                }
            }
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get size() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set size(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get text_preview() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set text_preview(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_text_preview() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get _text_preview() {
            const cases: {
                [index: number]: "none" | "text_preview";
            } = {
                0: "none",
                3: "text_preview"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        static fromObject(data: {
            path?: string;
            size?: number;
            text_preview?: string;
        }): FileArtifactContentsFileDescription {
            const message = new FileArtifactContentsFileDescription({});
            if (data.path != null) {
                message.path = data.path;
            }
            if (data.size != null) {
                message.size = data.size;
            }
            if (data.text_preview != null) {
                message.text_preview = data.text_preview;
            }
            return message;
        }
        toObject() {
            const data: {
                path?: string;
                size?: number;
                text_preview?: string;
            } = {};
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.size != null) {
                data.size = this.size;
            }
            if (this.text_preview != null) {
                data.text_preview = this.text_preview;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.path.length)
                writer.writeString(1, this.path);
            if (this.size != 0)
                writer.writeUint64(2, this.size);
            if (this.has_text_preview)
                writer.writeString(3, this.text_preview);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FileArtifactContentsFileDescription {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FileArtifactContentsFileDescription();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.path = reader.readString();
                        break;
                    case 2:
                        message.size = reader.readUint64();
                        break;
                    case 3:
                        message.text_preview = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FileArtifactContentsFileDescription {
            return FileArtifactContentsFileDescription.deserialize(bytes);
        }
    }
    export class ConnectServicesArgs extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            connect?: Connect;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("connect" in data && data.connect != undefined) {
                    this.connect = data.connect;
                }
            }
        }
        get connect() {
            return pb_1.Message.getFieldWithDefault(this, 1, Connect.CONNECT) as Connect;
        }
        set connect(value: Connect) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            connect?: Connect;
        }): ConnectServicesArgs {
            const message = new ConnectServicesArgs({});
            if (data.connect != null) {
                message.connect = data.connect;
            }
            return message;
        }
        toObject() {
            const data: {
                connect?: Connect;
            } = {};
            if (this.connect != null) {
                data.connect = this.connect;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.connect != Connect.CONNECT)
                writer.writeEnum(1, this.connect);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConnectServicesArgs {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConnectServicesArgs();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.connect = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConnectServicesArgs {
            return ConnectServicesArgs.deserialize(bytes);
        }
    }
    export class ConnectServicesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ConnectServicesResponse {
            const message = new ConnectServicesResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConnectServicesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConnectServicesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConnectServicesResponse {
            return ConnectServicesResponse.deserialize(bytes);
        }
    }
    export class GetStarlarkRunResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            package_id?: string;
            serialized_script?: string;
            serialized_params?: string;
            parallelism?: number;
            relative_path_to_main_file?: string;
            main_function_name?: string;
            experimental_features?: KurtosisFeatureFlag[];
            restart_policy?: RestartPolicy;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("package_id" in data && data.package_id != undefined) {
                    this.package_id = data.package_id;
                }
                if ("serialized_script" in data && data.serialized_script != undefined) {
                    this.serialized_script = data.serialized_script;
                }
                if ("serialized_params" in data && data.serialized_params != undefined) {
                    this.serialized_params = data.serialized_params;
                }
                if ("parallelism" in data && data.parallelism != undefined) {
                    this.parallelism = data.parallelism;
                }
                if ("relative_path_to_main_file" in data && data.relative_path_to_main_file != undefined) {
                    this.relative_path_to_main_file = data.relative_path_to_main_file;
                }
                if ("main_function_name" in data && data.main_function_name != undefined) {
                    this.main_function_name = data.main_function_name;
                }
                if ("experimental_features" in data && data.experimental_features != undefined) {
                    this.experimental_features = data.experimental_features;
                }
                if ("restart_policy" in data && data.restart_policy != undefined) {
                    this.restart_policy = data.restart_policy;
                }
            }
        }
        get package_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set package_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get serialized_script() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set serialized_script(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get serialized_params() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set serialized_params(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get parallelism() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set parallelism(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get relative_path_to_main_file() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set relative_path_to_main_file(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get main_function_name() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set main_function_name(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get experimental_features() {
            return pb_1.Message.getFieldWithDefault(this, 7, []) as KurtosisFeatureFlag[];
        }
        set experimental_features(value: KurtosisFeatureFlag[]) {
            pb_1.Message.setField(this, 7, value);
        }
        get restart_policy() {
            return pb_1.Message.getFieldWithDefault(this, 8, RestartPolicy.NEVER) as RestartPolicy;
        }
        set restart_policy(value: RestartPolicy) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            package_id?: string;
            serialized_script?: string;
            serialized_params?: string;
            parallelism?: number;
            relative_path_to_main_file?: string;
            main_function_name?: string;
            experimental_features?: KurtosisFeatureFlag[];
            restart_policy?: RestartPolicy;
        }): GetStarlarkRunResponse {
            const message = new GetStarlarkRunResponse({});
            if (data.package_id != null) {
                message.package_id = data.package_id;
            }
            if (data.serialized_script != null) {
                message.serialized_script = data.serialized_script;
            }
            if (data.serialized_params != null) {
                message.serialized_params = data.serialized_params;
            }
            if (data.parallelism != null) {
                message.parallelism = data.parallelism;
            }
            if (data.relative_path_to_main_file != null) {
                message.relative_path_to_main_file = data.relative_path_to_main_file;
            }
            if (data.main_function_name != null) {
                message.main_function_name = data.main_function_name;
            }
            if (data.experimental_features != null) {
                message.experimental_features = data.experimental_features;
            }
            if (data.restart_policy != null) {
                message.restart_policy = data.restart_policy;
            }
            return message;
        }
        toObject() {
            const data: {
                package_id?: string;
                serialized_script?: string;
                serialized_params?: string;
                parallelism?: number;
                relative_path_to_main_file?: string;
                main_function_name?: string;
                experimental_features?: KurtosisFeatureFlag[];
                restart_policy?: RestartPolicy;
            } = {};
            if (this.package_id != null) {
                data.package_id = this.package_id;
            }
            if (this.serialized_script != null) {
                data.serialized_script = this.serialized_script;
            }
            if (this.serialized_params != null) {
                data.serialized_params = this.serialized_params;
            }
            if (this.parallelism != null) {
                data.parallelism = this.parallelism;
            }
            if (this.relative_path_to_main_file != null) {
                data.relative_path_to_main_file = this.relative_path_to_main_file;
            }
            if (this.main_function_name != null) {
                data.main_function_name = this.main_function_name;
            }
            if (this.experimental_features != null) {
                data.experimental_features = this.experimental_features;
            }
            if (this.restart_policy != null) {
                data.restart_policy = this.restart_policy;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.package_id.length)
                writer.writeString(1, this.package_id);
            if (this.serialized_script.length)
                writer.writeString(2, this.serialized_script);
            if (this.serialized_params.length)
                writer.writeString(3, this.serialized_params);
            if (this.parallelism != 0)
                writer.writeInt32(4, this.parallelism);
            if (this.relative_path_to_main_file.length)
                writer.writeString(5, this.relative_path_to_main_file);
            if (this.main_function_name.length)
                writer.writeString(6, this.main_function_name);
            if (this.experimental_features.length)
                writer.writePackedEnum(7, this.experimental_features);
            if (this.restart_policy != RestartPolicy.NEVER)
                writer.writeEnum(8, this.restart_policy);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetStarlarkRunResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetStarlarkRunResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.package_id = reader.readString();
                        break;
                    case 2:
                        message.serialized_script = reader.readString();
                        break;
                    case 3:
                        message.serialized_params = reader.readString();
                        break;
                    case 4:
                        message.parallelism = reader.readInt32();
                        break;
                    case 5:
                        message.relative_path_to_main_file = reader.readString();
                        break;
                    case 6:
                        message.main_function_name = reader.readString();
                        break;
                    case 7:
                        message.experimental_features = reader.readPackedEnum();
                        break;
                    case 8:
                        message.restart_policy = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetStarlarkRunResponse {
            return GetStarlarkRunResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedApiContainerServiceService {
        static definition = {
            RunStarlarkScript: {
                path: "/api_container_api.ApiContainerService/RunStarlarkScript",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: RunStarlarkScriptArgs) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RunStarlarkScriptArgs.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: StarlarkRunResponseLine) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => StarlarkRunResponseLine.deserialize(new Uint8Array(bytes))
            },
            UploadStarlarkPackage: {
                path: "/api_container_api.ApiContainerService/UploadStarlarkPackage",
                requestStream: true,
                responseStream: false,
                requestSerialize: (message: StreamedDataChunk) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => StreamedDataChunk.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            RunStarlarkPackage: {
                path: "/api_container_api.ApiContainerService/RunStarlarkPackage",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: RunStarlarkPackageArgs) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RunStarlarkPackageArgs.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: StarlarkRunResponseLine) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => StarlarkRunResponseLine.deserialize(new Uint8Array(bytes))
            },
            GetServices: {
                path: "/api_container_api.ApiContainerService/GetServices",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetServicesArgs) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetServicesArgs.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetServicesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetServicesResponse.deserialize(new Uint8Array(bytes))
            },
            GetExistingAndHistoricalServiceIdentifiers: {
                path: "/api_container_api.ApiContainerService/GetExistingAndHistoricalServiceIdentifiers",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetExistingAndHistoricalServiceIdentifiersResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetExistingAndHistoricalServiceIdentifiersResponse.deserialize(new Uint8Array(bytes))
            },
            ExecCommand: {
                path: "/api_container_api.ApiContainerService/ExecCommand",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ExecCommandArgs) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ExecCommandArgs.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ExecCommandResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ExecCommandResponse.deserialize(new Uint8Array(bytes))
            },
            WaitForHttpGetEndpointAvailability: {
                path: "/api_container_api.ApiContainerService/WaitForHttpGetEndpointAvailability",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: WaitForHttpGetEndpointAvailabilityArgs) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => WaitForHttpGetEndpointAvailabilityArgs.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            WaitForHttpPostEndpointAvailability: {
                path: "/api_container_api.ApiContainerService/WaitForHttpPostEndpointAvailability",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: WaitForHttpPostEndpointAvailabilityArgs) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => WaitForHttpPostEndpointAvailabilityArgs.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            UploadFilesArtifact: {
                path: "/api_container_api.ApiContainerService/UploadFilesArtifact",
                requestStream: true,
                responseStream: false,
                requestSerialize: (message: StreamedDataChunk) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => StreamedDataChunk.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UploadFilesArtifactResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UploadFilesArtifactResponse.deserialize(new Uint8Array(bytes))
            },
            DownloadFilesArtifact: {
                path: "/api_container_api.ApiContainerService/DownloadFilesArtifact",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: DownloadFilesArtifactArgs) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DownloadFilesArtifactArgs.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: StreamedDataChunk) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => StreamedDataChunk.deserialize(new Uint8Array(bytes))
            },
            StoreWebFilesArtifact: {
                path: "/api_container_api.ApiContainerService/StoreWebFilesArtifact",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: StoreWebFilesArtifactArgs) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => StoreWebFilesArtifactArgs.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: StoreWebFilesArtifactResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => StoreWebFilesArtifactResponse.deserialize(new Uint8Array(bytes))
            },
            StoreFilesArtifactFromService: {
                path: "/api_container_api.ApiContainerService/StoreFilesArtifactFromService",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: StoreFilesArtifactFromServiceArgs) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => StoreFilesArtifactFromServiceArgs.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: StoreFilesArtifactFromServiceResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => StoreFilesArtifactFromServiceResponse.deserialize(new Uint8Array(bytes))
            },
            ListFilesArtifactNamesAndUuids: {
                path: "/api_container_api.ApiContainerService/ListFilesArtifactNamesAndUuids",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListFilesArtifactNamesAndUuidsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListFilesArtifactNamesAndUuidsResponse.deserialize(new Uint8Array(bytes))
            },
            InspectFilesArtifactContents: {
                path: "/api_container_api.ApiContainerService/InspectFilesArtifactContents",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: InspectFilesArtifactContentsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => InspectFilesArtifactContentsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: InspectFilesArtifactContentsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => InspectFilesArtifactContentsResponse.deserialize(new Uint8Array(bytes))
            },
            ConnectServices: {
                path: "/api_container_api.ApiContainerService/ConnectServices",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ConnectServicesArgs) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ConnectServicesArgs.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ConnectServicesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ConnectServicesResponse.deserialize(new Uint8Array(bytes))
            },
            GetStarlarkRun: {
                path: "/api_container_api.ApiContainerService/GetStarlarkRun",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetStarlarkRunResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetStarlarkRunResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract RunStarlarkScript(call: grpc_1.ServerWritableStream<RunStarlarkScriptArgs, StarlarkRunResponseLine>): void;
        abstract UploadStarlarkPackage(call: grpc_1.ServerReadableStream<StreamedDataChunk, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract RunStarlarkPackage(call: grpc_1.ServerWritableStream<RunStarlarkPackageArgs, StarlarkRunResponseLine>): void;
        abstract GetServices(call: grpc_1.ServerUnaryCall<GetServicesArgs, GetServicesResponse>, callback: grpc_1.sendUnaryData<GetServicesResponse>): void;
        abstract GetExistingAndHistoricalServiceIdentifiers(call: grpc_1.ServerUnaryCall<dependency_1.google.protobuf.Empty, GetExistingAndHistoricalServiceIdentifiersResponse>, callback: grpc_1.sendUnaryData<GetExistingAndHistoricalServiceIdentifiersResponse>): void;
        abstract ExecCommand(call: grpc_1.ServerUnaryCall<ExecCommandArgs, ExecCommandResponse>, callback: grpc_1.sendUnaryData<ExecCommandResponse>): void;
        abstract WaitForHttpGetEndpointAvailability(call: grpc_1.ServerUnaryCall<WaitForHttpGetEndpointAvailabilityArgs, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract WaitForHttpPostEndpointAvailability(call: grpc_1.ServerUnaryCall<WaitForHttpPostEndpointAvailabilityArgs, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract UploadFilesArtifact(call: grpc_1.ServerReadableStream<StreamedDataChunk, UploadFilesArtifactResponse>, callback: grpc_1.sendUnaryData<UploadFilesArtifactResponse>): void;
        abstract DownloadFilesArtifact(call: grpc_1.ServerWritableStream<DownloadFilesArtifactArgs, StreamedDataChunk>): void;
        abstract StoreWebFilesArtifact(call: grpc_1.ServerUnaryCall<StoreWebFilesArtifactArgs, StoreWebFilesArtifactResponse>, callback: grpc_1.sendUnaryData<StoreWebFilesArtifactResponse>): void;
        abstract StoreFilesArtifactFromService(call: grpc_1.ServerUnaryCall<StoreFilesArtifactFromServiceArgs, StoreFilesArtifactFromServiceResponse>, callback: grpc_1.sendUnaryData<StoreFilesArtifactFromServiceResponse>): void;
        abstract ListFilesArtifactNamesAndUuids(call: grpc_1.ServerUnaryCall<dependency_1.google.protobuf.Empty, ListFilesArtifactNamesAndUuidsResponse>, callback: grpc_1.sendUnaryData<ListFilesArtifactNamesAndUuidsResponse>): void;
        abstract InspectFilesArtifactContents(call: grpc_1.ServerUnaryCall<InspectFilesArtifactContentsRequest, InspectFilesArtifactContentsResponse>, callback: grpc_1.sendUnaryData<InspectFilesArtifactContentsResponse>): void;
        abstract ConnectServices(call: grpc_1.ServerUnaryCall<ConnectServicesArgs, ConnectServicesResponse>, callback: grpc_1.sendUnaryData<ConnectServicesResponse>): void;
        abstract GetStarlarkRun(call: grpc_1.ServerUnaryCall<dependency_1.google.protobuf.Empty, GetStarlarkRunResponse>, callback: grpc_1.sendUnaryData<GetStarlarkRunResponse>): void;
    }
    export class ApiContainerServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedApiContainerServiceService.definition, "ApiContainerService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        RunStarlarkScript: GrpcStreamServiceInterface<RunStarlarkScriptArgs, StarlarkRunResponseLine> = (message: RunStarlarkScriptArgs, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<StarlarkRunResponseLine> => {
            return super.RunStarlarkScript(message, metadata, options);
        };
        UploadStarlarkPackage: GrpWritableServiceInterface<StreamedDataChunk, dependency_1.google.protobuf.Empty> = (metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientWritableStream<StreamedDataChunk> => {
            return super.UploadStarlarkPackage(metadata, options, callback);
        };
        RunStarlarkPackage: GrpcStreamServiceInterface<RunStarlarkPackageArgs, StarlarkRunResponseLine> = (message: RunStarlarkPackageArgs, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<StarlarkRunResponseLine> => {
            return super.RunStarlarkPackage(message, metadata, options);
        };
        GetServices: GrpcUnaryServiceInterface<GetServicesArgs, GetServicesResponse> = (message: GetServicesArgs, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetServicesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetServicesResponse>, callback?: grpc_1.requestCallback<GetServicesResponse>): grpc_1.ClientUnaryCall => {
            return super.GetServices(message, metadata, options, callback);
        };
        GetExistingAndHistoricalServiceIdentifiers: GrpcUnaryServiceInterface<dependency_1.google.protobuf.Empty, GetExistingAndHistoricalServiceIdentifiersResponse> = (message: dependency_1.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetExistingAndHistoricalServiceIdentifiersResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetExistingAndHistoricalServiceIdentifiersResponse>, callback?: grpc_1.requestCallback<GetExistingAndHistoricalServiceIdentifiersResponse>): grpc_1.ClientUnaryCall => {
            return super.GetExistingAndHistoricalServiceIdentifiers(message, metadata, options, callback);
        };
        ExecCommand: GrpcUnaryServiceInterface<ExecCommandArgs, ExecCommandResponse> = (message: ExecCommandArgs, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ExecCommandResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ExecCommandResponse>, callback?: grpc_1.requestCallback<ExecCommandResponse>): grpc_1.ClientUnaryCall => {
            return super.ExecCommand(message, metadata, options, callback);
        };
        WaitForHttpGetEndpointAvailability: GrpcUnaryServiceInterface<WaitForHttpGetEndpointAvailabilityArgs, dependency_1.google.protobuf.Empty> = (message: WaitForHttpGetEndpointAvailabilityArgs, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.WaitForHttpGetEndpointAvailability(message, metadata, options, callback);
        };
        WaitForHttpPostEndpointAvailability: GrpcUnaryServiceInterface<WaitForHttpPostEndpointAvailabilityArgs, dependency_1.google.protobuf.Empty> = (message: WaitForHttpPostEndpointAvailabilityArgs, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.WaitForHttpPostEndpointAvailability(message, metadata, options, callback);
        };
        UploadFilesArtifact: GrpWritableServiceInterface<StreamedDataChunk, UploadFilesArtifactResponse> = (metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UploadFilesArtifactResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UploadFilesArtifactResponse>, callback?: grpc_1.requestCallback<UploadFilesArtifactResponse>): grpc_1.ClientWritableStream<StreamedDataChunk> => {
            return super.UploadFilesArtifact(metadata, options, callback);
        };
        DownloadFilesArtifact: GrpcStreamServiceInterface<DownloadFilesArtifactArgs, StreamedDataChunk> = (message: DownloadFilesArtifactArgs, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<StreamedDataChunk> => {
            return super.DownloadFilesArtifact(message, metadata, options);
        };
        StoreWebFilesArtifact: GrpcUnaryServiceInterface<StoreWebFilesArtifactArgs, StoreWebFilesArtifactResponse> = (message: StoreWebFilesArtifactArgs, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<StoreWebFilesArtifactResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<StoreWebFilesArtifactResponse>, callback?: grpc_1.requestCallback<StoreWebFilesArtifactResponse>): grpc_1.ClientUnaryCall => {
            return super.StoreWebFilesArtifact(message, metadata, options, callback);
        };
        StoreFilesArtifactFromService: GrpcUnaryServiceInterface<StoreFilesArtifactFromServiceArgs, StoreFilesArtifactFromServiceResponse> = (message: StoreFilesArtifactFromServiceArgs, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<StoreFilesArtifactFromServiceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<StoreFilesArtifactFromServiceResponse>, callback?: grpc_1.requestCallback<StoreFilesArtifactFromServiceResponse>): grpc_1.ClientUnaryCall => {
            return super.StoreFilesArtifactFromService(message, metadata, options, callback);
        };
        ListFilesArtifactNamesAndUuids: GrpcUnaryServiceInterface<dependency_1.google.protobuf.Empty, ListFilesArtifactNamesAndUuidsResponse> = (message: dependency_1.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListFilesArtifactNamesAndUuidsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListFilesArtifactNamesAndUuidsResponse>, callback?: grpc_1.requestCallback<ListFilesArtifactNamesAndUuidsResponse>): grpc_1.ClientUnaryCall => {
            return super.ListFilesArtifactNamesAndUuids(message, metadata, options, callback);
        };
        InspectFilesArtifactContents: GrpcUnaryServiceInterface<InspectFilesArtifactContentsRequest, InspectFilesArtifactContentsResponse> = (message: InspectFilesArtifactContentsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<InspectFilesArtifactContentsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<InspectFilesArtifactContentsResponse>, callback?: grpc_1.requestCallback<InspectFilesArtifactContentsResponse>): grpc_1.ClientUnaryCall => {
            return super.InspectFilesArtifactContents(message, metadata, options, callback);
        };
        ConnectServices: GrpcUnaryServiceInterface<ConnectServicesArgs, ConnectServicesResponse> = (message: ConnectServicesArgs, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ConnectServicesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ConnectServicesResponse>, callback?: grpc_1.requestCallback<ConnectServicesResponse>): grpc_1.ClientUnaryCall => {
            return super.ConnectServices(message, metadata, options, callback);
        };
        GetStarlarkRun: GrpcUnaryServiceInterface<dependency_1.google.protobuf.Empty, GetStarlarkRunResponse> = (message: dependency_1.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetStarlarkRunResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetStarlarkRunResponse>, callback?: grpc_1.requestCallback<GetStarlarkRunResponse>): grpc_1.ClientUnaryCall => {
            return super.GetStarlarkRun(message, metadata, options, callback);
        };
    }
}
