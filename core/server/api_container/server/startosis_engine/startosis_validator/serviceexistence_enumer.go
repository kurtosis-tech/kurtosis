// Code generated by "enumer -trimprefix ServiceExistence -type=ServiceExistence"; DO NOT EDIT.

package startosis_validator

import (
	"fmt"
	"strings"
)

const _ServiceExistenceName = "ServiceNotFoundServiceExistedBeforePackageRunServiceCreatedOrUpdatedDuringPackageRun"

var _ServiceExistenceIndex = [...]uint8{0, 15, 45, 84}

const _ServiceExistenceLowerName = "servicenotfoundserviceexistedbeforepackagerunservicecreatedorupdatedduringpackagerun"

func (i ServiceExistence) String() string {
	if i >= ServiceExistence(len(_ServiceExistenceIndex)-1) {
		return fmt.Sprintf("ServiceExistence(%d)", i)
	}
	return _ServiceExistenceName[_ServiceExistenceIndex[i]:_ServiceExistenceIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ServiceExistenceNoOp() {
	var x [1]struct{}
	_ = x[ServiceNotFound-(0)]
	_ = x[ServiceExistedBeforePackageRun-(1)]
	_ = x[ServiceCreatedOrUpdatedDuringPackageRun-(2)]
}

var _ServiceExistenceValues = []ServiceExistence{ServiceNotFound, ServiceExistedBeforePackageRun, ServiceCreatedOrUpdatedDuringPackageRun}

var _ServiceExistenceNameToValueMap = map[string]ServiceExistence{
	_ServiceExistenceName[0:15]:       ServiceNotFound,
	_ServiceExistenceLowerName[0:15]:  ServiceNotFound,
	_ServiceExistenceName[15:45]:      ServiceExistedBeforePackageRun,
	_ServiceExistenceLowerName[15:45]: ServiceExistedBeforePackageRun,
	_ServiceExistenceName[45:84]:      ServiceCreatedOrUpdatedDuringPackageRun,
	_ServiceExistenceLowerName[45:84]: ServiceCreatedOrUpdatedDuringPackageRun,
}

var _ServiceExistenceNames = []string{
	_ServiceExistenceName[0:15],
	_ServiceExistenceName[15:45],
	_ServiceExistenceName[45:84],
}

// ServiceExistenceString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ServiceExistenceString(s string) (ServiceExistence, error) {
	if val, ok := _ServiceExistenceNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ServiceExistenceNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ServiceExistence values", s)
}

// ServiceExistenceValues returns all values of the enum
func ServiceExistenceValues() []ServiceExistence {
	return _ServiceExistenceValues
}

// ServiceExistenceStrings returns a slice of all String values of the enum
func ServiceExistenceStrings() []string {
	strs := make([]string, len(_ServiceExistenceNames))
	copy(strs, _ServiceExistenceNames)
	return strs
}

// IsAServiceExistence returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ServiceExistence) IsAServiceExistence() bool {
	for _, v := range _ServiceExistenceValues {
		if i == v {
			return true
		}
	}
	return false
}
