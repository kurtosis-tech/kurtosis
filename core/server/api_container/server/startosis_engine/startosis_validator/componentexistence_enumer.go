// Code generated by "enumer -trimprefix ComponentExistence -type=ComponentExistence"; DO NOT EDIT.

package startosis_validator

import (
	"fmt"
	"strings"
)

const _ComponentExistenceName = "ComponentNotFoundComponentExistedBeforePackageRunComponentCreatedOrUpdatedDuringPackageRun"

var _ComponentExistenceIndex = [...]uint8{0, 17, 49, 90}

const _ComponentExistenceLowerName = "componentnotfoundcomponentexistedbeforepackageruncomponentcreatedorupdatedduringpackagerun"

func (i ComponentExistence) String() string {
	if i >= ComponentExistence(len(_ComponentExistenceIndex)-1) {
		return fmt.Sprintf("ComponentExistence(%d)", i)
	}
	return _ComponentExistenceName[_ComponentExistenceIndex[i]:_ComponentExistenceIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ComponentExistenceNoOp() {
	var x [1]struct{}
	_ = x[ComponentNotFound-(0)]
	_ = x[ComponentExistedBeforePackageRun-(1)]
	_ = x[ComponentCreatedOrUpdatedDuringPackageRun-(2)]
}

var _ComponentExistenceValues = []ComponentExistence{ComponentNotFound, ComponentExistedBeforePackageRun, ComponentCreatedOrUpdatedDuringPackageRun}

var _ComponentExistenceNameToValueMap = map[string]ComponentExistence{
	_ComponentExistenceName[0:17]:       ComponentNotFound,
	_ComponentExistenceLowerName[0:17]:  ComponentNotFound,
	_ComponentExistenceName[17:49]:      ComponentExistedBeforePackageRun,
	_ComponentExistenceLowerName[17:49]: ComponentExistedBeforePackageRun,
	_ComponentExistenceName[49:90]:      ComponentCreatedOrUpdatedDuringPackageRun,
	_ComponentExistenceLowerName[49:90]: ComponentCreatedOrUpdatedDuringPackageRun,
}

var _ComponentExistenceNames = []string{
	_ComponentExistenceName[0:17],
	_ComponentExistenceName[17:49],
	_ComponentExistenceName[49:90],
}

// ComponentExistenceString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ComponentExistenceString(s string) (ComponentExistence, error) {
	if val, ok := _ComponentExistenceNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ComponentExistenceNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ComponentExistence values", s)
}

// ComponentExistenceValues returns all values of the enum
func ComponentExistenceValues() []ComponentExistence {
	return _ComponentExistenceValues
}

// ComponentExistenceStrings returns a slice of all String values of the enum
func ComponentExistenceStrings() []string {
	strs := make([]string, len(_ComponentExistenceNames))
	copy(strs, _ComponentExistenceNames)
	return strs
}

// IsAComponentExistence returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ComponentExistence) IsAComponentExistence() bool {
	for _, v := range _ComponentExistenceValues {
		if i == v {
			return true
		}
	}
	return false
}
