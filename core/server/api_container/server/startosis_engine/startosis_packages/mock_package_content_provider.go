// Code generated by mockery v2.20.0. DO NOT EDIT.

package startosis_packages

import (
	startosis_errors "github.com/kurtosis-tech/kurtosis/core/server/api_container/server/startosis_engine/startosis_errors"
	mock "github.com/stretchr/testify/mock"
)

// MockPackageContentProvider is an autogenerated mock type for the PackageContentProvider type
type MockPackageContentProvider struct {
	mock.Mock
}

type MockPackageContentProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPackageContentProvider) EXPECT() *MockPackageContentProvider_Expecter {
	return &MockPackageContentProvider_Expecter{mock: &_m.Mock}
}

// ClonePackage provides a mock function with given fields: packageId
func (_m *MockPackageContentProvider) ClonePackage(packageId string) (string, *startosis_errors.InterpretationError) {
	ret := _m.Called(packageId)

	var r0 string
	var r1 *startosis_errors.InterpretationError
	if rf, ok := ret.Get(0).(func(string) (string, *startosis_errors.InterpretationError)); ok {
		return rf(packageId)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(packageId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) *startosis_errors.InterpretationError); ok {
		r1 = rf(packageId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*startosis_errors.InterpretationError)
		}
	}

	return r0, r1
}

// MockPackageContentProvider_ClonePackage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClonePackage'
type MockPackageContentProvider_ClonePackage_Call struct {
	*mock.Call
}

// ClonePackage is a helper method to define mock.On call
//   - packageId string
func (_e *MockPackageContentProvider_Expecter) ClonePackage(packageId interface{}) *MockPackageContentProvider_ClonePackage_Call {
	return &MockPackageContentProvider_ClonePackage_Call{Call: _e.mock.On("ClonePackage", packageId)}
}

func (_c *MockPackageContentProvider_ClonePackage_Call) Run(run func(packageId string)) *MockPackageContentProvider_ClonePackage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPackageContentProvider_ClonePackage_Call) Return(_a0 string, _a1 *startosis_errors.InterpretationError) *MockPackageContentProvider_ClonePackage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPackageContentProvider_ClonePackage_Call) RunAndReturn(run func(string) (string, *startosis_errors.InterpretationError)) *MockPackageContentProvider_ClonePackage_Call {
	_c.Call.Return(run)
	return _c
}

// GetModuleContents provides a mock function with given fields: _a0
func (_m *MockPackageContentProvider) GetModuleContents(_a0 string) (string, *startosis_errors.InterpretationError) {
	ret := _m.Called(_a0)

	var r0 string
	var r1 *startosis_errors.InterpretationError
	if rf, ok := ret.Get(0).(func(string) (string, *startosis_errors.InterpretationError)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) *startosis_errors.InterpretationError); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*startosis_errors.InterpretationError)
		}
	}

	return r0, r1
}

// MockPackageContentProvider_GetModuleContents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetModuleContents'
type MockPackageContentProvider_GetModuleContents_Call struct {
	*mock.Call
}

// GetModuleContents is a helper method to define mock.On call
//   - _a0 string
func (_e *MockPackageContentProvider_Expecter) GetModuleContents(_a0 interface{}) *MockPackageContentProvider_GetModuleContents_Call {
	return &MockPackageContentProvider_GetModuleContents_Call{Call: _e.mock.On("GetModuleContents", _a0)}
}

func (_c *MockPackageContentProvider_GetModuleContents_Call) Run(run func(_a0 string)) *MockPackageContentProvider_GetModuleContents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPackageContentProvider_GetModuleContents_Call) Return(_a0 string, _a1 *startosis_errors.InterpretationError) *MockPackageContentProvider_GetModuleContents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPackageContentProvider_GetModuleContents_Call) RunAndReturn(run func(string) (string, *startosis_errors.InterpretationError)) *MockPackageContentProvider_GetModuleContents_Call {
	_c.Call.Return(run)
	return _c
}

// GetOnDiskAbsoluteFilePath provides a mock function with given fields: _a0
func (_m *MockPackageContentProvider) GetOnDiskAbsoluteFilePath(_a0 string) (string, *startosis_errors.InterpretationError) {
	ret := _m.Called(_a0)

	var r0 string
	var r1 *startosis_errors.InterpretationError
	if rf, ok := ret.Get(0).(func(string) (string, *startosis_errors.InterpretationError)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) *startosis_errors.InterpretationError); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*startosis_errors.InterpretationError)
		}
	}

	return r0, r1
}

// MockPackageContentProvider_GetOnDiskAbsoluteFilePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOnDiskAbsoluteFilePath'
type MockPackageContentProvider_GetOnDiskAbsoluteFilePath_Call struct {
	*mock.Call
}

// GetOnDiskAbsoluteFilePath is a helper method to define mock.On call
//   - _a0 string
func (_e *MockPackageContentProvider_Expecter) GetOnDiskAbsoluteFilePath(_a0 interface{}) *MockPackageContentProvider_GetOnDiskAbsoluteFilePath_Call {
	return &MockPackageContentProvider_GetOnDiskAbsoluteFilePath_Call{Call: _e.mock.On("GetOnDiskAbsoluteFilePath", _a0)}
}

func (_c *MockPackageContentProvider_GetOnDiskAbsoluteFilePath_Call) Run(run func(_a0 string)) *MockPackageContentProvider_GetOnDiskAbsoluteFilePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPackageContentProvider_GetOnDiskAbsoluteFilePath_Call) Return(_a0 string, _a1 *startosis_errors.InterpretationError) *MockPackageContentProvider_GetOnDiskAbsoluteFilePath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPackageContentProvider_GetOnDiskAbsoluteFilePath_Call) RunAndReturn(run func(string) (string, *startosis_errors.InterpretationError)) *MockPackageContentProvider_GetOnDiskAbsoluteFilePath_Call {
	_c.Call.Return(run)
	return _c
}

// StorePackageContents provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockPackageContentProvider) StorePackageContents(_a0 string, _a1 []byte, _a2 bool) (string, *startosis_errors.InterpretationError) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 string
	var r1 *startosis_errors.InterpretationError
	if rf, ok := ret.Get(0).(func(string, []byte, bool) (string, *startosis_errors.InterpretationError)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(string, []byte, bool) string); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, []byte, bool) *startosis_errors.InterpretationError); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*startosis_errors.InterpretationError)
		}
	}

	return r0, r1
}

// MockPackageContentProvider_StorePackageContents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StorePackageContents'
type MockPackageContentProvider_StorePackageContents_Call struct {
	*mock.Call
}

// StorePackageContents is a helper method to define mock.On call
//   - _a0 string
//   - _a1 []byte
//   - _a2 bool
func (_e *MockPackageContentProvider_Expecter) StorePackageContents(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockPackageContentProvider_StorePackageContents_Call {
	return &MockPackageContentProvider_StorePackageContents_Call{Call: _e.mock.On("StorePackageContents", _a0, _a1, _a2)}
}

func (_c *MockPackageContentProvider_StorePackageContents_Call) Run(run func(_a0 string, _a1 []byte, _a2 bool)) *MockPackageContentProvider_StorePackageContents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte), args[2].(bool))
	})
	return _c
}

func (_c *MockPackageContentProvider_StorePackageContents_Call) Return(_a0 string, _a1 *startosis_errors.InterpretationError) *MockPackageContentProvider_StorePackageContents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPackageContentProvider_StorePackageContents_Call) RunAndReturn(run func(string, []byte, bool) (string, *startosis_errors.InterpretationError)) *MockPackageContentProvider_StorePackageContents_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockPackageContentProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockPackageContentProvider creates a new instance of MockPackageContentProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockPackageContentProvider(t mockConstructorTestingTNewMockPackageContentProvider) *MockPackageContentProvider {
	mock := &MockPackageContentProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
