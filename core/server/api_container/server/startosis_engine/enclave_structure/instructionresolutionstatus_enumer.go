// Code generated by "enumer -trimprefix InstructionResolutionStatus -type=InstructionResolutionStatus"; DO NOT EDIT.

package enclave_structure

import (
	"fmt"
	"strings"
)

const _InstructionResolutionStatusName = "InstructionIsEqualInstructionIsUpdateInstructionIsUnknownInstructionIsNotResolvableAbort"

var _InstructionResolutionStatusIndex = [...]uint8{0, 18, 37, 57, 88}

const _InstructionResolutionStatusLowerName = "instructionisequalinstructionisupdateinstructionisunknowninstructionisnotresolvableabort"

func (i InstructionResolutionStatus) String() string {
	if i >= InstructionResolutionStatus(len(_InstructionResolutionStatusIndex)-1) {
		return fmt.Sprintf("InstructionResolutionStatus(%d)", i)
	}
	return _InstructionResolutionStatusName[_InstructionResolutionStatusIndex[i]:_InstructionResolutionStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _InstructionResolutionStatusNoOp() {
	var x [1]struct{}
	_ = x[InstructionIsEqual-(0)]
	_ = x[InstructionIsUpdate-(1)]
	_ = x[InstructionIsUnknown-(2)]
	_ = x[InstructionIsNotResolvableAbort-(3)]
}

var _InstructionResolutionStatusValues = []InstructionResolutionStatus{InstructionIsEqual, InstructionIsUpdate, InstructionIsUnknown, InstructionIsNotResolvableAbort}

var _InstructionResolutionStatusNameToValueMap = map[string]InstructionResolutionStatus{
	_InstructionResolutionStatusName[0:18]:       InstructionIsEqual,
	_InstructionResolutionStatusLowerName[0:18]:  InstructionIsEqual,
	_InstructionResolutionStatusName[18:37]:      InstructionIsUpdate,
	_InstructionResolutionStatusLowerName[18:37]: InstructionIsUpdate,
	_InstructionResolutionStatusName[37:57]:      InstructionIsUnknown,
	_InstructionResolutionStatusLowerName[37:57]: InstructionIsUnknown,
	_InstructionResolutionStatusName[57:88]:      InstructionIsNotResolvableAbort,
	_InstructionResolutionStatusLowerName[57:88]: InstructionIsNotResolvableAbort,
}

var _InstructionResolutionStatusNames = []string{
	_InstructionResolutionStatusName[0:18],
	_InstructionResolutionStatusName[18:37],
	_InstructionResolutionStatusName[37:57],
	_InstructionResolutionStatusName[57:88],
}

// InstructionResolutionStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func InstructionResolutionStatusString(s string) (InstructionResolutionStatus, error) {
	if val, ok := _InstructionResolutionStatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _InstructionResolutionStatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to InstructionResolutionStatus values", s)
}

// InstructionResolutionStatusValues returns all values of the enum
func InstructionResolutionStatusValues() []InstructionResolutionStatus {
	return _InstructionResolutionStatusValues
}

// InstructionResolutionStatusStrings returns a slice of all String values of the enum
func InstructionResolutionStatusStrings() []string {
	strs := make([]string, len(_InstructionResolutionStatusNames))
	copy(strs, _InstructionResolutionStatusNames)
	return strs
}

// IsAInstructionResolutionStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i InstructionResolutionStatus) IsAInstructionResolutionStatus() bool {
	for _, v := range _InstructionResolutionStatusValues {
		if i == v {
			return true
		}
	}
	return false
}
