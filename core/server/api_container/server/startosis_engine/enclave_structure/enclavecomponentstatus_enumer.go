// Code generated by "enumer -trimprefix EnclaveComponentStatus -type=EnclaveComponentStatus"; DO NOT EDIT.

package enclave_structure

import (
	"fmt"
	"strings"
)

const _EnclaveComponentStatusName = "ComponentIsNewComponentWasLeftIntactComponentIsUpdated"

var _EnclaveComponentStatusIndex = [...]uint8{0, 14, 36, 54}

const _EnclaveComponentStatusLowerName = "componentisnewcomponentwasleftintactcomponentisupdated"

func (i EnclaveComponentStatus) String() string {
	if i >= EnclaveComponentStatus(len(_EnclaveComponentStatusIndex)-1) {
		return fmt.Sprintf("EnclaveComponentStatus(%d)", i)
	}
	return _EnclaveComponentStatusName[_EnclaveComponentStatusIndex[i]:_EnclaveComponentStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _EnclaveComponentStatusNoOp() {
	var x [1]struct{}
	_ = x[ComponentIsNew-(0)]
	_ = x[ComponentWasLeftIntact-(1)]
	_ = x[ComponentIsUpdated-(2)]
}

var _EnclaveComponentStatusValues = []EnclaveComponentStatus{ComponentIsNew, ComponentWasLeftIntact, ComponentIsUpdated}

var _EnclaveComponentStatusNameToValueMap = map[string]EnclaveComponentStatus{
	_EnclaveComponentStatusName[0:14]:       ComponentIsNew,
	_EnclaveComponentStatusLowerName[0:14]:  ComponentIsNew,
	_EnclaveComponentStatusName[14:36]:      ComponentWasLeftIntact,
	_EnclaveComponentStatusLowerName[14:36]: ComponentWasLeftIntact,
	_EnclaveComponentStatusName[36:54]:      ComponentIsUpdated,
	_EnclaveComponentStatusLowerName[36:54]: ComponentIsUpdated,
}

var _EnclaveComponentStatusNames = []string{
	_EnclaveComponentStatusName[0:14],
	_EnclaveComponentStatusName[14:36],
	_EnclaveComponentStatusName[36:54],
}

// EnclaveComponentStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func EnclaveComponentStatusString(s string) (EnclaveComponentStatus, error) {
	if val, ok := _EnclaveComponentStatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _EnclaveComponentStatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to EnclaveComponentStatus values", s)
}

// EnclaveComponentStatusValues returns all values of the enum
func EnclaveComponentStatusValues() []EnclaveComponentStatus {
	return _EnclaveComponentStatusValues
}

// EnclaveComponentStatusStrings returns a slice of all String values of the enum
func EnclaveComponentStatusStrings() []string {
	strs := make([]string, len(_EnclaveComponentStatusNames))
	copy(strs, _EnclaveComponentStatusNames)
	return strs
}

// IsAEnclaveComponentStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i EnclaveComponentStatus) IsAEnclaveComponentStatus() bool {
	for _, v := range _EnclaveComponentStatusValues {
		if i == v {
			return true
		}
	}
	return false
}
