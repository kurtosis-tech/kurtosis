// Code generated by "enumer -trimprefix InstructionResolutionType -type=InstructionResolutionType"; DO NOT EDIT.

package enclave_structure

import (
	"fmt"
	"strings"
)

const _InstructionResolutionTypeName = "InstructionEqualInstructionShouldBeRunInstructionUnknownInstructionNotResolvableAbort"

var _InstructionResolutionTypeIndex = [...]uint8{0, 16, 38, 56, 85}

const _InstructionResolutionTypeLowerName = "instructionequalinstructionshouldberuninstructionunknowninstructionnotresolvableabort"

func (i InstructionResolutionType) String() string {
	if i >= InstructionResolutionType(len(_InstructionResolutionTypeIndex)-1) {
		return fmt.Sprintf("InstructionResolutionType(%d)", i)
	}
	return _InstructionResolutionTypeName[_InstructionResolutionTypeIndex[i]:_InstructionResolutionTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _InstructionResolutionTypeNoOp() {
	var x [1]struct{}
	_ = x[InstructionEqual-(0)]
	_ = x[InstructionShouldBeRun-(1)]
	_ = x[InstructionUnknown-(2)]
	_ = x[InstructionNotResolvableAbort-(3)]
}

var _InstructionResolutionTypeValues = []InstructionResolutionType{InstructionEqual, InstructionShouldBeRun, InstructionUnknown, InstructionNotResolvableAbort}

var _InstructionResolutionTypeNameToValueMap = map[string]InstructionResolutionType{
	_InstructionResolutionTypeName[0:16]:       InstructionEqual,
	_InstructionResolutionTypeLowerName[0:16]:  InstructionEqual,
	_InstructionResolutionTypeName[16:38]:      InstructionShouldBeRun,
	_InstructionResolutionTypeLowerName[16:38]: InstructionShouldBeRun,
	_InstructionResolutionTypeName[38:56]:      InstructionUnknown,
	_InstructionResolutionTypeLowerName[38:56]: InstructionUnknown,
	_InstructionResolutionTypeName[56:85]:      InstructionNotResolvableAbort,
	_InstructionResolutionTypeLowerName[56:85]: InstructionNotResolvableAbort,
}

var _InstructionResolutionTypeNames = []string{
	_InstructionResolutionTypeName[0:16],
	_InstructionResolutionTypeName[16:38],
	_InstructionResolutionTypeName[38:56],
	_InstructionResolutionTypeName[56:85],
}

// InstructionResolutionTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func InstructionResolutionTypeString(s string) (InstructionResolutionType, error) {
	if val, ok := _InstructionResolutionTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _InstructionResolutionTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to InstructionResolutionType values", s)
}

// InstructionResolutionTypeValues returns all values of the enum
func InstructionResolutionTypeValues() []InstructionResolutionType {
	return _InstructionResolutionTypeValues
}

// InstructionResolutionTypeStrings returns a slice of all String values of the enum
func InstructionResolutionTypeStrings() []string {
	strs := make([]string, len(_InstructionResolutionTypeNames))
	copy(strs, _InstructionResolutionTypeNames)
	return strs
}

// IsAInstructionResolutionType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i InstructionResolutionType) IsAInstructionResolutionType() bool {
	for _, v := range _InstructionResolutionTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
