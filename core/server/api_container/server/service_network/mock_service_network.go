// Code generated by mockery v2.20.0. DO NOT EDIT.

package service_network

import (
	context "context"
	http "net/http"

	enclave_data_directory "github.com/kurtosis-tech/kurtosis/core/server/commons/enclave_data_directory"

	kurtosis_core_rpc_api_bindings "github.com/kurtosis-tech/kurtosis/api/golang/core/kurtosis_core_rpc_api_bindings"

	mock "github.com/stretchr/testify/mock"

	partition_topology "github.com/kurtosis-tech/kurtosis/core/server/api_container/server/service_network/partition_topology"

	service "github.com/kurtosis-tech/kurtosis/container-engine-lib/lib/backend_interface/objects/service"

	service_network_types "github.com/kurtosis-tech/kurtosis/core/server/api_container/server/service_network/service_network_types"
)

// MockServiceNetwork is an autogenerated mock type for the ServiceNetwork type
type MockServiceNetwork struct {
	mock.Mock
}

type MockServiceNetwork_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServiceNetwork) EXPECT() *MockServiceNetwork_Expecter {
	return &MockServiceNetwork_Expecter{mock: &_m.Mock}
}

// CopyFilesFromService provides a mock function with given fields: ctx, serviceIdentifier, srcPath, artifactName
func (_m *MockServiceNetwork) CopyFilesFromService(ctx context.Context, serviceIdentifier string, srcPath string, artifactName string) (enclave_data_directory.FilesArtifactUUID, error) {
	ret := _m.Called(ctx, serviceIdentifier, srcPath, artifactName)

	var r0 enclave_data_directory.FilesArtifactUUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (enclave_data_directory.FilesArtifactUUID, error)); ok {
		return rf(ctx, serviceIdentifier, srcPath, artifactName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) enclave_data_directory.FilesArtifactUUID); ok {
		r0 = rf(ctx, serviceIdentifier, srcPath, artifactName)
	} else {
		r0 = ret.Get(0).(enclave_data_directory.FilesArtifactUUID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, serviceIdentifier, srcPath, artifactName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServiceNetwork_CopyFilesFromService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CopyFilesFromService'
type MockServiceNetwork_CopyFilesFromService_Call struct {
	*mock.Call
}

// CopyFilesFromService is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceIdentifier string
//   - srcPath string
//   - artifactName string
func (_e *MockServiceNetwork_Expecter) CopyFilesFromService(ctx interface{}, serviceIdentifier interface{}, srcPath interface{}, artifactName interface{}) *MockServiceNetwork_CopyFilesFromService_Call {
	return &MockServiceNetwork_CopyFilesFromService_Call{Call: _e.mock.On("CopyFilesFromService", ctx, serviceIdentifier, srcPath, artifactName)}
}

func (_c *MockServiceNetwork_CopyFilesFromService_Call) Run(run func(ctx context.Context, serviceIdentifier string, srcPath string, artifactName string)) *MockServiceNetwork_CopyFilesFromService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockServiceNetwork_CopyFilesFromService_Call) Return(_a0 enclave_data_directory.FilesArtifactUUID, _a1 error) *MockServiceNetwork_CopyFilesFromService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServiceNetwork_CopyFilesFromService_Call) RunAndReturn(run func(context.Context, string, string, string) (enclave_data_directory.FilesArtifactUUID, error)) *MockServiceNetwork_CopyFilesFromService_Call {
	_c.Call.Return(run)
	return _c
}

// ExecCommand provides a mock function with given fields: ctx, serviceIdentifier, command
func (_m *MockServiceNetwork) ExecCommand(ctx context.Context, serviceIdentifier string, command []string) (int32, string, error) {
	ret := _m.Called(ctx, serviceIdentifier, command)

	var r0 int32
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) (int32, string, error)); ok {
		return rf(ctx, serviceIdentifier, command)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) int32); ok {
		r0 = rf(ctx, serviceIdentifier, command)
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string) string); ok {
		r1 = rf(ctx, serviceIdentifier, command)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, []string) error); ok {
		r2 = rf(ctx, serviceIdentifier, command)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServiceNetwork_ExecCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecCommand'
type MockServiceNetwork_ExecCommand_Call struct {
	*mock.Call
}

// ExecCommand is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceIdentifier string
//   - command []string
func (_e *MockServiceNetwork_Expecter) ExecCommand(ctx interface{}, serviceIdentifier interface{}, command interface{}) *MockServiceNetwork_ExecCommand_Call {
	return &MockServiceNetwork_ExecCommand_Call{Call: _e.mock.On("ExecCommand", ctx, serviceIdentifier, command)}
}

func (_c *MockServiceNetwork_ExecCommand_Call) Run(run func(ctx context.Context, serviceIdentifier string, command []string)) *MockServiceNetwork_ExecCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockServiceNetwork_ExecCommand_Call) Return(_a0 int32, _a1 string, _a2 error) *MockServiceNetwork_ExecCommand_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockServiceNetwork_ExecCommand_Call) RunAndReturn(run func(context.Context, string, []string) (int32, string, error)) *MockServiceNetwork_ExecCommand_Call {
	_c.Call.Return(run)
	return _c
}

// GetExistingAndHistoricalServiceIdentifiers provides a mock function with given fields:
func (_m *MockServiceNetwork) GetExistingAndHistoricalServiceIdentifiers() []*kurtosis_core_rpc_api_bindings.ServiceIdentifiers {
	ret := _m.Called()

	var r0 []*kurtosis_core_rpc_api_bindings.ServiceIdentifiers
	if rf, ok := ret.Get(0).(func() []*kurtosis_core_rpc_api_bindings.ServiceIdentifiers); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*kurtosis_core_rpc_api_bindings.ServiceIdentifiers)
		}
	}

	return r0
}

// MockServiceNetwork_GetExistingAndHistoricalServiceIdentifiers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExistingAndHistoricalServiceIdentifiers'
type MockServiceNetwork_GetExistingAndHistoricalServiceIdentifiers_Call struct {
	*mock.Call
}

// GetExistingAndHistoricalServiceIdentifiers is a helper method to define mock.On call
func (_e *MockServiceNetwork_Expecter) GetExistingAndHistoricalServiceIdentifiers() *MockServiceNetwork_GetExistingAndHistoricalServiceIdentifiers_Call {
	return &MockServiceNetwork_GetExistingAndHistoricalServiceIdentifiers_Call{Call: _e.mock.On("GetExistingAndHistoricalServiceIdentifiers")}
}

func (_c *MockServiceNetwork_GetExistingAndHistoricalServiceIdentifiers_Call) Run(run func()) *MockServiceNetwork_GetExistingAndHistoricalServiceIdentifiers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServiceNetwork_GetExistingAndHistoricalServiceIdentifiers_Call) Return(_a0 []*kurtosis_core_rpc_api_bindings.ServiceIdentifiers) *MockServiceNetwork_GetExistingAndHistoricalServiceIdentifiers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServiceNetwork_GetExistingAndHistoricalServiceIdentifiers_Call) RunAndReturn(run func() []*kurtosis_core_rpc_api_bindings.ServiceIdentifiers) *MockServiceNetwork_GetExistingAndHistoricalServiceIdentifiers_Call {
	_c.Call.Return(run)
	return _c
}

// GetService provides a mock function with given fields: ctx, serviceIdentifier
func (_m *MockServiceNetwork) GetService(ctx context.Context, serviceIdentifier string) (*service.Service, error) {
	ret := _m.Called(ctx, serviceIdentifier)

	var r0 *service.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*service.Service, error)); ok {
		return rf(ctx, serviceIdentifier)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *service.Service); ok {
		r0 = rf(ctx, serviceIdentifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, serviceIdentifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServiceNetwork_GetService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetService'
type MockServiceNetwork_GetService_Call struct {
	*mock.Call
}

// GetService is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceIdentifier string
func (_e *MockServiceNetwork_Expecter) GetService(ctx interface{}, serviceIdentifier interface{}) *MockServiceNetwork_GetService_Call {
	return &MockServiceNetwork_GetService_Call{Call: _e.mock.On("GetService", ctx, serviceIdentifier)}
}

func (_c *MockServiceNetwork_GetService_Call) Run(run func(ctx context.Context, serviceIdentifier string)) *MockServiceNetwork_GetService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockServiceNetwork_GetService_Call) Return(_a0 *service.Service, _a1 error) *MockServiceNetwork_GetService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServiceNetwork_GetService_Call) RunAndReturn(run func(context.Context, string) (*service.Service, error)) *MockServiceNetwork_GetService_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceNames provides a mock function with given fields:
func (_m *MockServiceNetwork) GetServiceNames() map[service.ServiceName]bool {
	ret := _m.Called()

	var r0 map[service.ServiceName]bool
	if rf, ok := ret.Get(0).(func() map[service.ServiceName]bool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[service.ServiceName]bool)
		}
	}

	return r0
}

// MockServiceNetwork_GetServiceNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceNames'
type MockServiceNetwork_GetServiceNames_Call struct {
	*mock.Call
}

// GetServiceNames is a helper method to define mock.On call
func (_e *MockServiceNetwork_Expecter) GetServiceNames() *MockServiceNetwork_GetServiceNames_Call {
	return &MockServiceNetwork_GetServiceNames_Call{Call: _e.mock.On("GetServiceNames")}
}

func (_c *MockServiceNetwork_GetServiceNames_Call) Run(run func()) *MockServiceNetwork_GetServiceNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServiceNetwork_GetServiceNames_Call) Return(_a0 map[service.ServiceName]bool) *MockServiceNetwork_GetServiceNames_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServiceNetwork_GetServiceNames_Call) RunAndReturn(run func() map[service.ServiceName]bool) *MockServiceNetwork_GetServiceNames_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceRegistration provides a mock function with given fields: serviceName
func (_m *MockServiceNetwork) GetServiceRegistration(serviceName service.ServiceName) (*service.ServiceRegistration, bool) {
	ret := _m.Called(serviceName)

	var r0 *service.ServiceRegistration
	var r1 bool
	if rf, ok := ret.Get(0).(func(service.ServiceName) (*service.ServiceRegistration, bool)); ok {
		return rf(serviceName)
	}
	if rf, ok := ret.Get(0).(func(service.ServiceName) *service.ServiceRegistration); ok {
		r0 = rf(serviceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.ServiceRegistration)
		}
	}

	if rf, ok := ret.Get(1).(func(service.ServiceName) bool); ok {
		r1 = rf(serviceName)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockServiceNetwork_GetServiceRegistration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceRegistration'
type MockServiceNetwork_GetServiceRegistration_Call struct {
	*mock.Call
}

// GetServiceRegistration is a helper method to define mock.On call
//   - serviceName service.ServiceName
func (_e *MockServiceNetwork_Expecter) GetServiceRegistration(serviceName interface{}) *MockServiceNetwork_GetServiceRegistration_Call {
	return &MockServiceNetwork_GetServiceRegistration_Call{Call: _e.mock.On("GetServiceRegistration", serviceName)}
}

func (_c *MockServiceNetwork_GetServiceRegistration_Call) Run(run func(serviceName service.ServiceName)) *MockServiceNetwork_GetServiceRegistration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(service.ServiceName))
	})
	return _c
}

func (_c *MockServiceNetwork_GetServiceRegistration_Call) Return(_a0 *service.ServiceRegistration, _a1 bool) *MockServiceNetwork_GetServiceRegistration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServiceNetwork_GetServiceRegistration_Call) RunAndReturn(run func(service.ServiceName) (*service.ServiceRegistration, bool)) *MockServiceNetwork_GetServiceRegistration_Call {
	_c.Call.Return(run)
	return _c
}

// GetUniqueNameForFileArtifact provides a mock function with given fields:
func (_m *MockServiceNetwork) GetUniqueNameForFileArtifact() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServiceNetwork_GetUniqueNameForFileArtifact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUniqueNameForFileArtifact'
type MockServiceNetwork_GetUniqueNameForFileArtifact_Call struct {
	*mock.Call
}

// GetUniqueNameForFileArtifact is a helper method to define mock.On call
func (_e *MockServiceNetwork_Expecter) GetUniqueNameForFileArtifact() *MockServiceNetwork_GetUniqueNameForFileArtifact_Call {
	return &MockServiceNetwork_GetUniqueNameForFileArtifact_Call{Call: _e.mock.On("GetUniqueNameForFileArtifact")}
}

func (_c *MockServiceNetwork_GetUniqueNameForFileArtifact_Call) Run(run func()) *MockServiceNetwork_GetUniqueNameForFileArtifact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServiceNetwork_GetUniqueNameForFileArtifact_Call) Return(_a0 string, _a1 error) *MockServiceNetwork_GetUniqueNameForFileArtifact_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServiceNetwork_GetUniqueNameForFileArtifact_Call) RunAndReturn(run func() (string, error)) *MockServiceNetwork_GetUniqueNameForFileArtifact_Call {
	_c.Call.Return(run)
	return _c
}

// HttpRequestService provides a mock function with given fields: ctx, serviceIdentifier, portId, method, contentType, endpoint, body
func (_m *MockServiceNetwork) HttpRequestService(ctx context.Context, serviceIdentifier string, portId string, method string, contentType string, endpoint string, body string) (*http.Response, error) {
	ret := _m.Called(ctx, serviceIdentifier, portId, method, contentType, endpoint, body)

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, string) (*http.Response, error)); ok {
		return rf(ctx, serviceIdentifier, portId, method, contentType, endpoint, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, string) *http.Response); ok {
		r0 = rf(ctx, serviceIdentifier, portId, method, contentType, endpoint, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, string, string) error); ok {
		r1 = rf(ctx, serviceIdentifier, portId, method, contentType, endpoint, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServiceNetwork_HttpRequestService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HttpRequestService'
type MockServiceNetwork_HttpRequestService_Call struct {
	*mock.Call
}

// HttpRequestService is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceIdentifier string
//   - portId string
//   - method string
//   - contentType string
//   - endpoint string
//   - body string
func (_e *MockServiceNetwork_Expecter) HttpRequestService(ctx interface{}, serviceIdentifier interface{}, portId interface{}, method interface{}, contentType interface{}, endpoint interface{}, body interface{}) *MockServiceNetwork_HttpRequestService_Call {
	return &MockServiceNetwork_HttpRequestService_Call{Call: _e.mock.On("HttpRequestService", ctx, serviceIdentifier, portId, method, contentType, endpoint, body)}
}

func (_c *MockServiceNetwork_HttpRequestService_Call) Run(run func(ctx context.Context, serviceIdentifier string, portId string, method string, contentType string, endpoint string, body string)) *MockServiceNetwork_HttpRequestService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string), args[6].(string))
	})
	return _c
}

func (_c *MockServiceNetwork_HttpRequestService_Call) Return(_a0 *http.Response, _a1 error) *MockServiceNetwork_HttpRequestService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServiceNetwork_HttpRequestService_Call) RunAndReturn(run func(context.Context, string, string, string, string, string, string) (*http.Response, error)) *MockServiceNetwork_HttpRequestService_Call {
	_c.Call.Return(run)
	return _c
}

// IsNetworkPartitioningEnabled provides a mock function with given fields:
func (_m *MockServiceNetwork) IsNetworkPartitioningEnabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockServiceNetwork_IsNetworkPartitioningEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsNetworkPartitioningEnabled'
type MockServiceNetwork_IsNetworkPartitioningEnabled_Call struct {
	*mock.Call
}

// IsNetworkPartitioningEnabled is a helper method to define mock.On call
func (_e *MockServiceNetwork_Expecter) IsNetworkPartitioningEnabled() *MockServiceNetwork_IsNetworkPartitioningEnabled_Call {
	return &MockServiceNetwork_IsNetworkPartitioningEnabled_Call{Call: _e.mock.On("IsNetworkPartitioningEnabled")}
}

func (_c *MockServiceNetwork_IsNetworkPartitioningEnabled_Call) Run(run func()) *MockServiceNetwork_IsNetworkPartitioningEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServiceNetwork_IsNetworkPartitioningEnabled_Call) Return(_a0 bool) *MockServiceNetwork_IsNetworkPartitioningEnabled_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServiceNetwork_IsNetworkPartitioningEnabled_Call) RunAndReturn(run func() bool) *MockServiceNetwork_IsNetworkPartitioningEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// PauseService provides a mock function with given fields: ctx, serviceIdentifier
func (_m *MockServiceNetwork) PauseService(ctx context.Context, serviceIdentifier string) error {
	ret := _m.Called(ctx, serviceIdentifier)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, serviceIdentifier)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServiceNetwork_PauseService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PauseService'
type MockServiceNetwork_PauseService_Call struct {
	*mock.Call
}

// PauseService is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceIdentifier string
func (_e *MockServiceNetwork_Expecter) PauseService(ctx interface{}, serviceIdentifier interface{}) *MockServiceNetwork_PauseService_Call {
	return &MockServiceNetwork_PauseService_Call{Call: _e.mock.On("PauseService", ctx, serviceIdentifier)}
}

func (_c *MockServiceNetwork_PauseService_Call) Run(run func(ctx context.Context, serviceIdentifier string)) *MockServiceNetwork_PauseService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockServiceNetwork_PauseService_Call) Return(_a0 error) *MockServiceNetwork_PauseService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServiceNetwork_PauseService_Call) RunAndReturn(run func(context.Context, string) error) *MockServiceNetwork_PauseService_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveService provides a mock function with given fields: ctx, serviceIdentifier
func (_m *MockServiceNetwork) RemoveService(ctx context.Context, serviceIdentifier string) (service.ServiceUUID, error) {
	ret := _m.Called(ctx, serviceIdentifier)

	var r0 service.ServiceUUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (service.ServiceUUID, error)); ok {
		return rf(ctx, serviceIdentifier)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) service.ServiceUUID); ok {
		r0 = rf(ctx, serviceIdentifier)
	} else {
		r0 = ret.Get(0).(service.ServiceUUID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, serviceIdentifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServiceNetwork_RemoveService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveService'
type MockServiceNetwork_RemoveService_Call struct {
	*mock.Call
}

// RemoveService is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceIdentifier string
func (_e *MockServiceNetwork_Expecter) RemoveService(ctx interface{}, serviceIdentifier interface{}) *MockServiceNetwork_RemoveService_Call {
	return &MockServiceNetwork_RemoveService_Call{Call: _e.mock.On("RemoveService", ctx, serviceIdentifier)}
}

func (_c *MockServiceNetwork_RemoveService_Call) Run(run func(ctx context.Context, serviceIdentifier string)) *MockServiceNetwork_RemoveService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockServiceNetwork_RemoveService_Call) Return(_a0 service.ServiceUUID, _a1 error) *MockServiceNetwork_RemoveService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServiceNetwork_RemoveService_Call) RunAndReturn(run func(context.Context, string) (service.ServiceUUID, error)) *MockServiceNetwork_RemoveService_Call {
	_c.Call.Return(run)
	return _c
}

// RenderTemplates provides a mock function with given fields: templatesAndDataByDestinationRelFilepath, artifactName
func (_m *MockServiceNetwork) RenderTemplates(templatesAndDataByDestinationRelFilepath map[string]*kurtosis_core_rpc_api_bindings.RenderTemplatesToFilesArtifactArgs_TemplateAndData, artifactName string) (enclave_data_directory.FilesArtifactUUID, error) {
	ret := _m.Called(templatesAndDataByDestinationRelFilepath, artifactName)

	var r0 enclave_data_directory.FilesArtifactUUID
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]*kurtosis_core_rpc_api_bindings.RenderTemplatesToFilesArtifactArgs_TemplateAndData, string) (enclave_data_directory.FilesArtifactUUID, error)); ok {
		return rf(templatesAndDataByDestinationRelFilepath, artifactName)
	}
	if rf, ok := ret.Get(0).(func(map[string]*kurtosis_core_rpc_api_bindings.RenderTemplatesToFilesArtifactArgs_TemplateAndData, string) enclave_data_directory.FilesArtifactUUID); ok {
		r0 = rf(templatesAndDataByDestinationRelFilepath, artifactName)
	} else {
		r0 = ret.Get(0).(enclave_data_directory.FilesArtifactUUID)
	}

	if rf, ok := ret.Get(1).(func(map[string]*kurtosis_core_rpc_api_bindings.RenderTemplatesToFilesArtifactArgs_TemplateAndData, string) error); ok {
		r1 = rf(templatesAndDataByDestinationRelFilepath, artifactName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServiceNetwork_RenderTemplates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenderTemplates'
type MockServiceNetwork_RenderTemplates_Call struct {
	*mock.Call
}

// RenderTemplates is a helper method to define mock.On call
//   - templatesAndDataByDestinationRelFilepath map[string]*kurtosis_core_rpc_api_bindings.RenderTemplatesToFilesArtifactArgs_TemplateAndData
//   - artifactName string
func (_e *MockServiceNetwork_Expecter) RenderTemplates(templatesAndDataByDestinationRelFilepath interface{}, artifactName interface{}) *MockServiceNetwork_RenderTemplates_Call {
	return &MockServiceNetwork_RenderTemplates_Call{Call: _e.mock.On("RenderTemplates", templatesAndDataByDestinationRelFilepath, artifactName)}
}

func (_c *MockServiceNetwork_RenderTemplates_Call) Run(run func(templatesAndDataByDestinationRelFilepath map[string]*kurtosis_core_rpc_api_bindings.RenderTemplatesToFilesArtifactArgs_TemplateAndData, artifactName string)) *MockServiceNetwork_RenderTemplates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]*kurtosis_core_rpc_api_bindings.RenderTemplatesToFilesArtifactArgs_TemplateAndData), args[1].(string))
	})
	return _c
}

func (_c *MockServiceNetwork_RenderTemplates_Call) Return(_a0 enclave_data_directory.FilesArtifactUUID, _a1 error) *MockServiceNetwork_RenderTemplates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServiceNetwork_RenderTemplates_Call) RunAndReturn(run func(map[string]*kurtosis_core_rpc_api_bindings.RenderTemplatesToFilesArtifactArgs_TemplateAndData, string) (enclave_data_directory.FilesArtifactUUID, error)) *MockServiceNetwork_RenderTemplates_Call {
	_c.Call.Return(run)
	return _c
}

// Repartition provides a mock function with given fields: ctx, newPartitionServices, newPartitionConnections, newDefaultConnection
func (_m *MockServiceNetwork) Repartition(ctx context.Context, newPartitionServices map[service_network_types.PartitionID]map[service.ServiceName]bool, newPartitionConnections map[service_network_types.PartitionConnectionID]partition_topology.PartitionConnection, newDefaultConnection partition_topology.PartitionConnection) error {
	ret := _m.Called(ctx, newPartitionServices, newPartitionConnections, newDefaultConnection)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[service_network_types.PartitionID]map[service.ServiceName]bool, map[service_network_types.PartitionConnectionID]partition_topology.PartitionConnection, partition_topology.PartitionConnection) error); ok {
		r0 = rf(ctx, newPartitionServices, newPartitionConnections, newDefaultConnection)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServiceNetwork_Repartition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Repartition'
type MockServiceNetwork_Repartition_Call struct {
	*mock.Call
}

// Repartition is a helper method to define mock.On call
//   - ctx context.Context
//   - newPartitionServices map[service_network_types.PartitionID]map[service.ServiceName]bool
//   - newPartitionConnections map[service_network_types.PartitionConnectionID]partition_topology.PartitionConnection
//   - newDefaultConnection partition_topology.PartitionConnection
func (_e *MockServiceNetwork_Expecter) Repartition(ctx interface{}, newPartitionServices interface{}, newPartitionConnections interface{}, newDefaultConnection interface{}) *MockServiceNetwork_Repartition_Call {
	return &MockServiceNetwork_Repartition_Call{Call: _e.mock.On("Repartition", ctx, newPartitionServices, newPartitionConnections, newDefaultConnection)}
}

func (_c *MockServiceNetwork_Repartition_Call) Run(run func(ctx context.Context, newPartitionServices map[service_network_types.PartitionID]map[service.ServiceName]bool, newPartitionConnections map[service_network_types.PartitionConnectionID]partition_topology.PartitionConnection, newDefaultConnection partition_topology.PartitionConnection)) *MockServiceNetwork_Repartition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[service_network_types.PartitionID]map[service.ServiceName]bool), args[2].(map[service_network_types.PartitionConnectionID]partition_topology.PartitionConnection), args[3].(partition_topology.PartitionConnection))
	})
	return _c
}

func (_c *MockServiceNetwork_Repartition_Call) Return(_a0 error) *MockServiceNetwork_Repartition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServiceNetwork_Repartition_Call) RunAndReturn(run func(context.Context, map[service_network_types.PartitionID]map[service.ServiceName]bool, map[service_network_types.PartitionConnectionID]partition_topology.PartitionConnection, partition_topology.PartitionConnection) error) *MockServiceNetwork_Repartition_Call {
	_c.Call.Return(run)
	return _c
}

// SetConnection provides a mock function with given fields: ctx, partition1, partition2, connection
func (_m *MockServiceNetwork) SetConnection(ctx context.Context, partition1 service_network_types.PartitionID, partition2 service_network_types.PartitionID, connection partition_topology.PartitionConnection) error {
	ret := _m.Called(ctx, partition1, partition2, connection)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, service_network_types.PartitionID, service_network_types.PartitionID, partition_topology.PartitionConnection) error); ok {
		r0 = rf(ctx, partition1, partition2, connection)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServiceNetwork_SetConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetConnection'
type MockServiceNetwork_SetConnection_Call struct {
	*mock.Call
}

// SetConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - partition1 service_network_types.PartitionID
//   - partition2 service_network_types.PartitionID
//   - connection partition_topology.PartitionConnection
func (_e *MockServiceNetwork_Expecter) SetConnection(ctx interface{}, partition1 interface{}, partition2 interface{}, connection interface{}) *MockServiceNetwork_SetConnection_Call {
	return &MockServiceNetwork_SetConnection_Call{Call: _e.mock.On("SetConnection", ctx, partition1, partition2, connection)}
}

func (_c *MockServiceNetwork_SetConnection_Call) Run(run func(ctx context.Context, partition1 service_network_types.PartitionID, partition2 service_network_types.PartitionID, connection partition_topology.PartitionConnection)) *MockServiceNetwork_SetConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(service_network_types.PartitionID), args[2].(service_network_types.PartitionID), args[3].(partition_topology.PartitionConnection))
	})
	return _c
}

func (_c *MockServiceNetwork_SetConnection_Call) Return(_a0 error) *MockServiceNetwork_SetConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServiceNetwork_SetConnection_Call) RunAndReturn(run func(context.Context, service_network_types.PartitionID, service_network_types.PartitionID, partition_topology.PartitionConnection) error) *MockServiceNetwork_SetConnection_Call {
	_c.Call.Return(run)
	return _c
}

// SetDefaultConnection provides a mock function with given fields: ctx, connection
func (_m *MockServiceNetwork) SetDefaultConnection(ctx context.Context, connection partition_topology.PartitionConnection) error {
	ret := _m.Called(ctx, connection)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, partition_topology.PartitionConnection) error); ok {
		r0 = rf(ctx, connection)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServiceNetwork_SetDefaultConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDefaultConnection'
type MockServiceNetwork_SetDefaultConnection_Call struct {
	*mock.Call
}

// SetDefaultConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - connection partition_topology.PartitionConnection
func (_e *MockServiceNetwork_Expecter) SetDefaultConnection(ctx interface{}, connection interface{}) *MockServiceNetwork_SetDefaultConnection_Call {
	return &MockServiceNetwork_SetDefaultConnection_Call{Call: _e.mock.On("SetDefaultConnection", ctx, connection)}
}

func (_c *MockServiceNetwork_SetDefaultConnection_Call) Run(run func(ctx context.Context, connection partition_topology.PartitionConnection)) *MockServiceNetwork_SetDefaultConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(partition_topology.PartitionConnection))
	})
	return _c
}

func (_c *MockServiceNetwork_SetDefaultConnection_Call) Return(_a0 error) *MockServiceNetwork_SetDefaultConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServiceNetwork_SetDefaultConnection_Call) RunAndReturn(run func(context.Context, partition_topology.PartitionConnection) error) *MockServiceNetwork_SetDefaultConnection_Call {
	_c.Call.Return(run)
	return _c
}

// StartService provides a mock function with given fields: ctx, serviceName, serviceConfig
func (_m *MockServiceNetwork) StartService(ctx context.Context, serviceName service.ServiceName, serviceConfig *kurtosis_core_rpc_api_bindings.ServiceConfig) (*service.Service, error) {
	ret := _m.Called(ctx, serviceName, serviceConfig)

	var r0 *service.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, service.ServiceName, *kurtosis_core_rpc_api_bindings.ServiceConfig) (*service.Service, error)); ok {
		return rf(ctx, serviceName, serviceConfig)
	}
	if rf, ok := ret.Get(0).(func(context.Context, service.ServiceName, *kurtosis_core_rpc_api_bindings.ServiceConfig) *service.Service); ok {
		r0 = rf(ctx, serviceName, serviceConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, service.ServiceName, *kurtosis_core_rpc_api_bindings.ServiceConfig) error); ok {
		r1 = rf(ctx, serviceName, serviceConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServiceNetwork_StartService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartService'
type MockServiceNetwork_StartService_Call struct {
	*mock.Call
}

// StartService is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceName service.ServiceName
//   - serviceConfig *kurtosis_core_rpc_api_bindings.ServiceConfig
func (_e *MockServiceNetwork_Expecter) StartService(ctx interface{}, serviceName interface{}, serviceConfig interface{}) *MockServiceNetwork_StartService_Call {
	return &MockServiceNetwork_StartService_Call{Call: _e.mock.On("StartService", ctx, serviceName, serviceConfig)}
}

func (_c *MockServiceNetwork_StartService_Call) Run(run func(ctx context.Context, serviceName service.ServiceName, serviceConfig *kurtosis_core_rpc_api_bindings.ServiceConfig)) *MockServiceNetwork_StartService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(service.ServiceName), args[2].(*kurtosis_core_rpc_api_bindings.ServiceConfig))
	})
	return _c
}

func (_c *MockServiceNetwork_StartService_Call) Return(_a0 *service.Service, _a1 error) *MockServiceNetwork_StartService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServiceNetwork_StartService_Call) RunAndReturn(run func(context.Context, service.ServiceName, *kurtosis_core_rpc_api_bindings.ServiceConfig) (*service.Service, error)) *MockServiceNetwork_StartService_Call {
	_c.Call.Return(run)
	return _c
}

// StartServices provides a mock function with given fields: ctx, serviceConfigs, batchSize
func (_m *MockServiceNetwork) StartServices(ctx context.Context, serviceConfigs map[service.ServiceName]*kurtosis_core_rpc_api_bindings.ServiceConfig, batchSize int) (map[service.ServiceName]*service.Service, map[service.ServiceName]error, error) {
	ret := _m.Called(ctx, serviceConfigs, batchSize)

	var r0 map[service.ServiceName]*service.Service
	var r1 map[service.ServiceName]error
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, map[service.ServiceName]*kurtosis_core_rpc_api_bindings.ServiceConfig, int) (map[service.ServiceName]*service.Service, map[service.ServiceName]error, error)); ok {
		return rf(ctx, serviceConfigs, batchSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[service.ServiceName]*kurtosis_core_rpc_api_bindings.ServiceConfig, int) map[service.ServiceName]*service.Service); ok {
		r0 = rf(ctx, serviceConfigs, batchSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[service.ServiceName]*service.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[service.ServiceName]*kurtosis_core_rpc_api_bindings.ServiceConfig, int) map[service.ServiceName]error); ok {
		r1 = rf(ctx, serviceConfigs, batchSize)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[service.ServiceName]error)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, map[service.ServiceName]*kurtosis_core_rpc_api_bindings.ServiceConfig, int) error); ok {
		r2 = rf(ctx, serviceConfigs, batchSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServiceNetwork_StartServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartServices'
type MockServiceNetwork_StartServices_Call struct {
	*mock.Call
}

// StartServices is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceConfigs map[service.ServiceName]*kurtosis_core_rpc_api_bindings.ServiceConfig
//   - batchSize int
func (_e *MockServiceNetwork_Expecter) StartServices(ctx interface{}, serviceConfigs interface{}, batchSize interface{}) *MockServiceNetwork_StartServices_Call {
	return &MockServiceNetwork_StartServices_Call{Call: _e.mock.On("StartServices", ctx, serviceConfigs, batchSize)}
}

func (_c *MockServiceNetwork_StartServices_Call) Run(run func(ctx context.Context, serviceConfigs map[service.ServiceName]*kurtosis_core_rpc_api_bindings.ServiceConfig, batchSize int)) *MockServiceNetwork_StartServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[service.ServiceName]*kurtosis_core_rpc_api_bindings.ServiceConfig), args[2].(int))
	})
	return _c
}

func (_c *MockServiceNetwork_StartServices_Call) Return(_a0 map[service.ServiceName]*service.Service, _a1 map[service.ServiceName]error, _a2 error) *MockServiceNetwork_StartServices_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockServiceNetwork_StartServices_Call) RunAndReturn(run func(context.Context, map[service.ServiceName]*kurtosis_core_rpc_api_bindings.ServiceConfig, int) (map[service.ServiceName]*service.Service, map[service.ServiceName]error, error)) *MockServiceNetwork_StartServices_Call {
	_c.Call.Return(run)
	return _c
}

// UnpauseService provides a mock function with given fields: ctx, serviceIdentifier
func (_m *MockServiceNetwork) UnpauseService(ctx context.Context, serviceIdentifier string) error {
	ret := _m.Called(ctx, serviceIdentifier)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, serviceIdentifier)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServiceNetwork_UnpauseService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnpauseService'
type MockServiceNetwork_UnpauseService_Call struct {
	*mock.Call
}

// UnpauseService is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceIdentifier string
func (_e *MockServiceNetwork_Expecter) UnpauseService(ctx interface{}, serviceIdentifier interface{}) *MockServiceNetwork_UnpauseService_Call {
	return &MockServiceNetwork_UnpauseService_Call{Call: _e.mock.On("UnpauseService", ctx, serviceIdentifier)}
}

func (_c *MockServiceNetwork_UnpauseService_Call) Run(run func(ctx context.Context, serviceIdentifier string)) *MockServiceNetwork_UnpauseService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockServiceNetwork_UnpauseService_Call) Return(_a0 error) *MockServiceNetwork_UnpauseService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServiceNetwork_UnpauseService_Call) RunAndReturn(run func(context.Context, string) error) *MockServiceNetwork_UnpauseService_Call {
	_c.Call.Return(run)
	return _c
}

// UnsetConnection provides a mock function with given fields: ctx, partition1, partition2
func (_m *MockServiceNetwork) UnsetConnection(ctx context.Context, partition1 service_network_types.PartitionID, partition2 service_network_types.PartitionID) error {
	ret := _m.Called(ctx, partition1, partition2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, service_network_types.PartitionID, service_network_types.PartitionID) error); ok {
		r0 = rf(ctx, partition1, partition2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServiceNetwork_UnsetConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnsetConnection'
type MockServiceNetwork_UnsetConnection_Call struct {
	*mock.Call
}

// UnsetConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - partition1 service_network_types.PartitionID
//   - partition2 service_network_types.PartitionID
func (_e *MockServiceNetwork_Expecter) UnsetConnection(ctx interface{}, partition1 interface{}, partition2 interface{}) *MockServiceNetwork_UnsetConnection_Call {
	return &MockServiceNetwork_UnsetConnection_Call{Call: _e.mock.On("UnsetConnection", ctx, partition1, partition2)}
}

func (_c *MockServiceNetwork_UnsetConnection_Call) Run(run func(ctx context.Context, partition1 service_network_types.PartitionID, partition2 service_network_types.PartitionID)) *MockServiceNetwork_UnsetConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(service_network_types.PartitionID), args[2].(service_network_types.PartitionID))
	})
	return _c
}

func (_c *MockServiceNetwork_UnsetConnection_Call) Return(_a0 error) *MockServiceNetwork_UnsetConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServiceNetwork_UnsetConnection_Call) RunAndReturn(run func(context.Context, service_network_types.PartitionID, service_network_types.PartitionID) error) *MockServiceNetwork_UnsetConnection_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateService provides a mock function with given fields: ctx, updateServiceConfigs
func (_m *MockServiceNetwork) UpdateService(ctx context.Context, updateServiceConfigs map[service.ServiceName]*kurtosis_core_rpc_api_bindings.UpdateServiceConfig) (map[service.ServiceName]bool, map[service.ServiceName]error, error) {
	ret := _m.Called(ctx, updateServiceConfigs)

	var r0 map[service.ServiceName]bool
	var r1 map[service.ServiceName]error
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, map[service.ServiceName]*kurtosis_core_rpc_api_bindings.UpdateServiceConfig) (map[service.ServiceName]bool, map[service.ServiceName]error, error)); ok {
		return rf(ctx, updateServiceConfigs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[service.ServiceName]*kurtosis_core_rpc_api_bindings.UpdateServiceConfig) map[service.ServiceName]bool); ok {
		r0 = rf(ctx, updateServiceConfigs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[service.ServiceName]bool)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[service.ServiceName]*kurtosis_core_rpc_api_bindings.UpdateServiceConfig) map[service.ServiceName]error); ok {
		r1 = rf(ctx, updateServiceConfigs)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[service.ServiceName]error)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, map[service.ServiceName]*kurtosis_core_rpc_api_bindings.UpdateServiceConfig) error); ok {
		r2 = rf(ctx, updateServiceConfigs)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServiceNetwork_UpdateService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateService'
type MockServiceNetwork_UpdateService_Call struct {
	*mock.Call
}

// UpdateService is a helper method to define mock.On call
//   - ctx context.Context
//   - updateServiceConfigs map[service.ServiceName]*kurtosis_core_rpc_api_bindings.UpdateServiceConfig
func (_e *MockServiceNetwork_Expecter) UpdateService(ctx interface{}, updateServiceConfigs interface{}) *MockServiceNetwork_UpdateService_Call {
	return &MockServiceNetwork_UpdateService_Call{Call: _e.mock.On("UpdateService", ctx, updateServiceConfigs)}
}

func (_c *MockServiceNetwork_UpdateService_Call) Run(run func(ctx context.Context, updateServiceConfigs map[service.ServiceName]*kurtosis_core_rpc_api_bindings.UpdateServiceConfig)) *MockServiceNetwork_UpdateService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[service.ServiceName]*kurtosis_core_rpc_api_bindings.UpdateServiceConfig))
	})
	return _c
}

func (_c *MockServiceNetwork_UpdateService_Call) Return(_a0 map[service.ServiceName]bool, _a1 map[service.ServiceName]error, _a2 error) *MockServiceNetwork_UpdateService_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockServiceNetwork_UpdateService_Call) RunAndReturn(run func(context.Context, map[service.ServiceName]*kurtosis_core_rpc_api_bindings.UpdateServiceConfig) (map[service.ServiceName]bool, map[service.ServiceName]error, error)) *MockServiceNetwork_UpdateService_Call {
	_c.Call.Return(run)
	return _c
}

// UploadFilesArtifact provides a mock function with given fields: data, artifactName
func (_m *MockServiceNetwork) UploadFilesArtifact(data []byte, artifactName string) (enclave_data_directory.FilesArtifactUUID, error) {
	ret := _m.Called(data, artifactName)

	var r0 enclave_data_directory.FilesArtifactUUID
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, string) (enclave_data_directory.FilesArtifactUUID, error)); ok {
		return rf(data, artifactName)
	}
	if rf, ok := ret.Get(0).(func([]byte, string) enclave_data_directory.FilesArtifactUUID); ok {
		r0 = rf(data, artifactName)
	} else {
		r0 = ret.Get(0).(enclave_data_directory.FilesArtifactUUID)
	}

	if rf, ok := ret.Get(1).(func([]byte, string) error); ok {
		r1 = rf(data, artifactName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServiceNetwork_UploadFilesArtifact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadFilesArtifact'
type MockServiceNetwork_UploadFilesArtifact_Call struct {
	*mock.Call
}

// UploadFilesArtifact is a helper method to define mock.On call
//   - data []byte
//   - artifactName string
func (_e *MockServiceNetwork_Expecter) UploadFilesArtifact(data interface{}, artifactName interface{}) *MockServiceNetwork_UploadFilesArtifact_Call {
	return &MockServiceNetwork_UploadFilesArtifact_Call{Call: _e.mock.On("UploadFilesArtifact", data, artifactName)}
}

func (_c *MockServiceNetwork_UploadFilesArtifact_Call) Run(run func(data []byte, artifactName string)) *MockServiceNetwork_UploadFilesArtifact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(string))
	})
	return _c
}

func (_c *MockServiceNetwork_UploadFilesArtifact_Call) Return(_a0 enclave_data_directory.FilesArtifactUUID, _a1 error) *MockServiceNetwork_UploadFilesArtifact_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServiceNetwork_UploadFilesArtifact_Call) RunAndReturn(run func([]byte, string) (enclave_data_directory.FilesArtifactUUID, error)) *MockServiceNetwork_UploadFilesArtifact_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockServiceNetwork interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockServiceNetwork creates a new instance of MockServiceNetwork. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockServiceNetwork(t mockConstructorTestingTNewMockServiceNetwork) *MockServiceNetwork {
	mock := &MockServiceNetwork{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
