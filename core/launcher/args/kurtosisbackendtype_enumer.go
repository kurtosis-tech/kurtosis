/*
 * Copyright (c) 2022 - present Kurtosis Technologies Inc.
 * All Rights Reserved.
 */

// Code generated by "enumer -trimprefix KurtosisBackendType_ -type=KurtosisBackendType -transform=lower -json"; DO NOT EDIT.

package args

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _KurtosisBackendTypeName = "dockerkubernetes"

var _KurtosisBackendTypeIndex = [...]uint8{0, 6, 16}

const _KurtosisBackendTypeLowerName = "dockerkubernetes"

func (i KurtosisBackendType) String() string {
	if i >= KurtosisBackendType(len(_KurtosisBackendTypeIndex)-1) {
		return fmt.Sprintf("KurtosisBackendType(%d)", i)
	}
	return _KurtosisBackendTypeName[_KurtosisBackendTypeIndex[i]:_KurtosisBackendTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _KurtosisBackendTypeNoOp() {
	var x [1]struct{}
	_ = x[KurtosisBackendType_Docker-(0)]
	_ = x[KurtosisBackendType_Kubernetes-(1)]
}

var _KurtosisBackendTypeValues = []KurtosisBackendType{KurtosisBackendType_Docker, KurtosisBackendType_Kubernetes}

var _KurtosisBackendTypeNameToValueMap = map[string]KurtosisBackendType{
	_KurtosisBackendTypeName[0:6]:       KurtosisBackendType_Docker,
	_KurtosisBackendTypeLowerName[0:6]:  KurtosisBackendType_Docker,
	_KurtosisBackendTypeName[6:16]:      KurtosisBackendType_Kubernetes,
	_KurtosisBackendTypeLowerName[6:16]: KurtosisBackendType_Kubernetes,
}

var _KurtosisBackendTypeNames = []string{
	_KurtosisBackendTypeName[0:6],
	_KurtosisBackendTypeName[6:16],
}

// KurtosisBackendTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func KurtosisBackendTypeString(s string) (KurtosisBackendType, error) {
	if val, ok := _KurtosisBackendTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _KurtosisBackendTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to KurtosisBackendType values", s)
}

// KurtosisBackendTypeValues returns all values of the enum
func KurtosisBackendTypeValues() []KurtosisBackendType {
	return _KurtosisBackendTypeValues
}

// KurtosisBackendTypeStrings returns a slice of all String values of the enum
func KurtosisBackendTypeStrings() []string {
	strs := make([]string, len(_KurtosisBackendTypeNames))
	copy(strs, _KurtosisBackendTypeNames)
	return strs
}

// IsAKurtosisBackendType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i KurtosisBackendType) IsAKurtosisBackendType() bool {
	for _, v := range _KurtosisBackendTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for KurtosisBackendType
func (i KurtosisBackendType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for KurtosisBackendType
func (i *KurtosisBackendType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("KurtosisBackendType should be a string, got %s", data)
	}

	var err error
	*i, err = KurtosisBackendTypeString(s)
	return err
}
