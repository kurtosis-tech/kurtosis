/*
 * Copyright (c) 2022 - present Kurtosis Technologies Inc.
 * All Rights Reserved.
 */

package image_name_generator

import (
	"fmt"
	"github.com/docker/distribution/reference"
	"github.com/sirupsen/logrus"
	"time"
)

const (
	kurtosisPrefix = "kt"
	// YYYY-MM-DDTHH-MM-SS-sss
	executionTimestampFormat = "2006-01-02T15-04-05-000"
)

func GetImageNameWithUnixTimestamp(moduleImage string) string {
	autoGeneratedImageName := newAutogeneratedImageName()
	parsedModuleImage, err := reference.Parse(moduleImage)
	if err != nil {
		logrus.Warnf("Couldn't parse the module image string '%v'; using auto generated image name '%v' instead", moduleImage, autoGeneratedImageName)
		return autoGeneratedImageName
	}

	namedModuleImage, ok := parsedModuleImage.(reference.Named)
	if !ok {
		logrus.Warnf("Module image string '%v' couldn't be cast to a named reference; using auto generated image name '%v' instead", moduleImage, autoGeneratedImageName)
		return autoGeneratedImageName
	}
	pathElement := reference.Path(namedModuleImage)

	return fmt.Sprintf(
		"%v--%v",
		pathElement,
		time.Now().Unix(),
	)
}

// ====================================================================================================
//                                       Private Helper Functions
// ====================================================================================================
func newAutogeneratedImageName() string {
	return fmt.Sprintf(
		"%v%v",
		kurtosisPrefix,
		time.Now().Format(executionTimestampFormat),
	)
}
