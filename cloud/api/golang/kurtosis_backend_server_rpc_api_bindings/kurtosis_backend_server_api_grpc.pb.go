// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: kurtosis_backend_server_api.proto

package kurtosis_backend_server_rpc_api_bindings

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KurtosisCloudBackendServer_IsAvailable_FullMethodName            = "/kurtosis_cloud.KurtosisCloudBackendServer/IsAvailable"
	KurtosisCloudBackendServer_CreateCloudInstance_FullMethodName    = "/kurtosis_cloud.KurtosisCloudBackendServer/CreateCloudInstance"
	KurtosisCloudBackendServer_GetCloudInstanceConfig_FullMethodName = "/kurtosis_cloud.KurtosisCloudBackendServer/GetCloudInstanceConfig"
)

// KurtosisCloudBackendServerClient is the client API for KurtosisCloudBackendServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KurtosisCloudBackendServerClient interface {
	IsAvailable(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateCloudInstance(ctx context.Context, in *CreateCloudInstanceConfigArgs, opts ...grpc.CallOption) (*CreateCloudInstanceConfigResponse, error)
	GetCloudInstanceConfig(ctx context.Context, in *GetCloudInstanceConfigArgs, opts ...grpc.CallOption) (*GetCloudInstanceConfigResponse, error)
}

type kurtosisCloudBackendServerClient struct {
	cc grpc.ClientConnInterface
}

func NewKurtosisCloudBackendServerClient(cc grpc.ClientConnInterface) KurtosisCloudBackendServerClient {
	return &kurtosisCloudBackendServerClient{cc}
}

func (c *kurtosisCloudBackendServerClient) IsAvailable(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, KurtosisCloudBackendServer_IsAvailable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kurtosisCloudBackendServerClient) CreateCloudInstance(ctx context.Context, in *CreateCloudInstanceConfigArgs, opts ...grpc.CallOption) (*CreateCloudInstanceConfigResponse, error) {
	out := new(CreateCloudInstanceConfigResponse)
	err := c.cc.Invoke(ctx, KurtosisCloudBackendServer_CreateCloudInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kurtosisCloudBackendServerClient) GetCloudInstanceConfig(ctx context.Context, in *GetCloudInstanceConfigArgs, opts ...grpc.CallOption) (*GetCloudInstanceConfigResponse, error) {
	out := new(GetCloudInstanceConfigResponse)
	err := c.cc.Invoke(ctx, KurtosisCloudBackendServer_GetCloudInstanceConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KurtosisCloudBackendServerServer is the server API for KurtosisCloudBackendServer service.
// All implementations should embed UnimplementedKurtosisCloudBackendServerServer
// for forward compatibility
type KurtosisCloudBackendServerServer interface {
	IsAvailable(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	CreateCloudInstance(context.Context, *CreateCloudInstanceConfigArgs) (*CreateCloudInstanceConfigResponse, error)
	GetCloudInstanceConfig(context.Context, *GetCloudInstanceConfigArgs) (*GetCloudInstanceConfigResponse, error)
}

// UnimplementedKurtosisCloudBackendServerServer should be embedded to have forward compatible implementations.
type UnimplementedKurtosisCloudBackendServerServer struct {
}

func (UnimplementedKurtosisCloudBackendServerServer) IsAvailable(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAvailable not implemented")
}
func (UnimplementedKurtosisCloudBackendServerServer) CreateCloudInstance(context.Context, *CreateCloudInstanceConfigArgs) (*CreateCloudInstanceConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCloudInstance not implemented")
}
func (UnimplementedKurtosisCloudBackendServerServer) GetCloudInstanceConfig(context.Context, *GetCloudInstanceConfigArgs) (*GetCloudInstanceConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudInstanceConfig not implemented")
}

// UnsafeKurtosisCloudBackendServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KurtosisCloudBackendServerServer will
// result in compilation errors.
type UnsafeKurtosisCloudBackendServerServer interface {
	mustEmbedUnimplementedKurtosisCloudBackendServerServer()
}

func RegisterKurtosisCloudBackendServerServer(s grpc.ServiceRegistrar, srv KurtosisCloudBackendServerServer) {
	s.RegisterService(&KurtosisCloudBackendServer_ServiceDesc, srv)
}

func _KurtosisCloudBackendServer_IsAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KurtosisCloudBackendServerServer).IsAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KurtosisCloudBackendServer_IsAvailable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KurtosisCloudBackendServerServer).IsAvailable(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KurtosisCloudBackendServer_CreateCloudInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCloudInstanceConfigArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KurtosisCloudBackendServerServer).CreateCloudInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KurtosisCloudBackendServer_CreateCloudInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KurtosisCloudBackendServerServer).CreateCloudInstance(ctx, req.(*CreateCloudInstanceConfigArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _KurtosisCloudBackendServer_GetCloudInstanceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCloudInstanceConfigArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KurtosisCloudBackendServerServer).GetCloudInstanceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KurtosisCloudBackendServer_GetCloudInstanceConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KurtosisCloudBackendServerServer).GetCloudInstanceConfig(ctx, req.(*GetCloudInstanceConfigArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// KurtosisCloudBackendServer_ServiceDesc is the grpc.ServiceDesc for KurtosisCloudBackendServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KurtosisCloudBackendServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kurtosis_cloud.KurtosisCloudBackendServer",
	HandlerType: (*KurtosisCloudBackendServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsAvailable",
			Handler:    _KurtosisCloudBackendServer_IsAvailable_Handler,
		},
		{
			MethodName: "CreateCloudInstance",
			Handler:    _KurtosisCloudBackendServer_CreateCloudInstance_Handler,
		},
		{
			MethodName: "GetCloudInstanceConfig",
			Handler:    _KurtosisCloudBackendServer_GetCloudInstanceConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kurtosis_backend_server_api.proto",
}
