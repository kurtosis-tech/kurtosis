syntax = "proto3";
package kurtosis_cloud;
// NOTE: It sucks that we have this Go-specific logic inside this file (which should be language-agnostic). However, the Protobuf team have
// taken a hard stance on this being the way it should be done, so we have to do it this way.
option go_package = "github.com/kurtosis-tech/kurtosis/cloud/api/golang/kurtosis_backend_server_rpc_api_bindings";

import "google/protobuf/empty.proto";

service KurtosisCloudBackendServer {
  rpc IsAvailable (google.protobuf.Empty) returns (google.protobuf.Empty) {
    option idempotency_level = NO_SIDE_EFFECTS;
  };
  rpc GetCloudInstanceConfig(GetCloudInstanceConfigArgs) returns (GetCloudInstanceConfigResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  };
  rpc GetOrCreateApiKey(GetOrCreateApiKeyRequest) returns (GetOrCreateApiKeyResponse) {};
  rpc GetOrCreateInstance(GetOrCreateInstanceRequest) returns (GetOrCreateInstanceResponse) {};
  rpc GetOrCreatePaymentConfig(GetOrCreatePaymentConfigArgs) returns (GetOrCreatePaymentConfigResponse) {};
  rpc RefreshDefaultPaymentMethod (RefreshDefaultPaymentMethodArgs) returns (google.protobuf.Empty) {};
  rpc CancelPaymentSubscription (CancelPaymentSubscriptionArgs) returns (google.protobuf.Empty) {};
  rpc UpdateAddress(UpdateAddressArgs) returns (google.protobuf.Empty) {};
  rpc CheckPortAuthorization(CheckPortAuthorizationRequest) returns(google.protobuf.Empty){
    option idempotency_level = NO_SIDE_EFFECTS;
  };
  rpc UnlockPort(UnlockPortRequest) returns(google.protobuf.Empty){};
  rpc LockPort(LockPortRequest) returns(google.protobuf.Empty){};
  rpc GetUnlockedPorts(GetUnlockedPortsRequest) returns(GetUnlockedPortsResponse){}
}

message GetOrCreateApiKeyRequest {
  string access_token = 1;
}

message GetOrCreateApiKeyResponse {
  string api_key = 1;
}

message GetOrCreateInstanceRequest {
  string api_key = 1;
}

message GetOrCreateInstanceResponse {
  string instance_id = 1;
}

message GetCloudInstanceConfigArgs {
  optional string api_key = 1;
  optional string instance_id = 2;
  optional string instance_short_id = 3;
}

message LaunchResult {
  string instance_name = 1;
  string instance_id = 2;
  string public_dns = 3;
  string ip_address = 4;
}

message GetCloudInstanceConfigResponse {
  string user_id = 1;
  string instance_id = 2;
  string context_config = 3;
  LaunchResult launch_result = 4;
  string status = 5;
  string created = 6;
  string updated = 7;

  // deprecated in favor of aws_environment
  // TODO: remove it once this is released and the cloud BE is upgraded
  optional AwsKey user_key = 8;

  // TODO: remove the optional once this is released and the cloud BE is upgraded
  optional AwsEnvironment aws_environment = 9;
}

message GetOrCreatePaymentConfigArgs {
  string access_token = 1;
  bool setup_intent = 2; 
}

message PaymentMethod {
  int32 exp_month = 1;
  int32 exp_year = 2;
  string last_four = 3;
}

message PaymentProduct {
  string name = 1;
  int32 price_unit_amount = 2;
  string price_currency = 3;
  string tax_code_name = 4;
}

message PaymentSubscription {
  PaymentProduct product = 1;

  enum Status {
    ACTIVE = 0;
    CANCELLED = 1;
    UNKNOWN = 2;
    ACTIVE_CANCEL_AT_PERIOD_END = 3;
  }
  Status status = 2;
}

message GetOrCreatePaymentConfigResponse {
  string user_id = 1;
  optional string client_secret = 2;
  optional PaymentMethod payment_method = 3;
  PaymentProduct product = 4;
  optional PaymentSubscription subscription = 5;
  int32 trial_end = 6;
}

message RefreshDefaultPaymentMethodArgs {
  string access_token = 1;
  string payment_method_id = 2;
}

message CancelPaymentSubscriptionArgs {
  string access_token = 1;
}

message AwsKey {
  string id = 1;
  string secret = 2;
}

message AwsEnvironment {
  string access_key_id = 1;
  string secret_access_key = 2;

  string bucket_region = 3;
  string bucket_name = 4;
  string bucket_user_folder = 5;
}

message UpdateAddressArgs {
  string access_token = 1;
  string name = 2;
  string line_1 = 3;
  optional string line_2 = 4;
  string city = 5;
  string state = 6;
  string postal_code = 7;
  string country = 8;
}

message GetUnlockedPortsRequest {
  string access_token = 1;
  string instance_short_uuid=2;
  string enclave_short_uuid=3;
}

message CheckPortAuthorizationRequest {
  Port port = 1;
}

message UnlockPortRequest {
  string access_token = 1;
  Port port = 2;
}

message LockPortRequest {
  string access_token = 1;
  Port port = 2;
}

message Port {
  uint32 port_number=1;
  string instance_short_uuid=2;
  string service_short_uuid=3;
  string enclave_short_uuid=4;
}

message GetUnlockedPortsResponse {
  repeated Port port = 1;
}
