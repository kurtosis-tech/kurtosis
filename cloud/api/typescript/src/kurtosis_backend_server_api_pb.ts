// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file kurtosis_backend_server_api.proto (package kurtosis_cloud, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message kurtosis_cloud.GetOrCreateApiKeyRequest
 */
export class GetOrCreateApiKeyRequest extends Message<GetOrCreateApiKeyRequest> {
  /**
   * @generated from field: string access_token = 1;
   */
  accessToken = "";

  constructor(data?: PartialMessage<GetOrCreateApiKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kurtosis_cloud.GetOrCreateApiKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrCreateApiKeyRequest {
    return new GetOrCreateApiKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrCreateApiKeyRequest {
    return new GetOrCreateApiKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrCreateApiKeyRequest {
    return new GetOrCreateApiKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrCreateApiKeyRequest | PlainMessage<GetOrCreateApiKeyRequest> | undefined, b: GetOrCreateApiKeyRequest | PlainMessage<GetOrCreateApiKeyRequest> | undefined): boolean {
    return proto3.util.equals(GetOrCreateApiKeyRequest, a, b);
  }
}

/**
 * @generated from message kurtosis_cloud.GetOrCreateApiKeyResponse
 */
export class GetOrCreateApiKeyResponse extends Message<GetOrCreateApiKeyResponse> {
  /**
   * @generated from field: string api_key = 1;
   */
  apiKey = "";

  constructor(data?: PartialMessage<GetOrCreateApiKeyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kurtosis_cloud.GetOrCreateApiKeyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "api_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrCreateApiKeyResponse {
    return new GetOrCreateApiKeyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrCreateApiKeyResponse {
    return new GetOrCreateApiKeyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrCreateApiKeyResponse {
    return new GetOrCreateApiKeyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrCreateApiKeyResponse | PlainMessage<GetOrCreateApiKeyResponse> | undefined, b: GetOrCreateApiKeyResponse | PlainMessage<GetOrCreateApiKeyResponse> | undefined): boolean {
    return proto3.util.equals(GetOrCreateApiKeyResponse, a, b);
  }
}

/**
 * @generated from message kurtosis_cloud.GetOrCreateInstanceRequest
 */
export class GetOrCreateInstanceRequest extends Message<GetOrCreateInstanceRequest> {
  /**
   * @generated from field: string api_key = 1;
   */
  apiKey = "";

  constructor(data?: PartialMessage<GetOrCreateInstanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kurtosis_cloud.GetOrCreateInstanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "api_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrCreateInstanceRequest {
    return new GetOrCreateInstanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrCreateInstanceRequest {
    return new GetOrCreateInstanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrCreateInstanceRequest {
    return new GetOrCreateInstanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrCreateInstanceRequest | PlainMessage<GetOrCreateInstanceRequest> | undefined, b: GetOrCreateInstanceRequest | PlainMessage<GetOrCreateInstanceRequest> | undefined): boolean {
    return proto3.util.equals(GetOrCreateInstanceRequest, a, b);
  }
}

/**
 * @generated from message kurtosis_cloud.GetOrCreateInstanceResponse
 */
export class GetOrCreateInstanceResponse extends Message<GetOrCreateInstanceResponse> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  constructor(data?: PartialMessage<GetOrCreateInstanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kurtosis_cloud.GetOrCreateInstanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrCreateInstanceResponse {
    return new GetOrCreateInstanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrCreateInstanceResponse {
    return new GetOrCreateInstanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrCreateInstanceResponse {
    return new GetOrCreateInstanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrCreateInstanceResponse | PlainMessage<GetOrCreateInstanceResponse> | undefined, b: GetOrCreateInstanceResponse | PlainMessage<GetOrCreateInstanceResponse> | undefined): boolean {
    return proto3.util.equals(GetOrCreateInstanceResponse, a, b);
  }
}

/**
 * @generated from message kurtosis_cloud.GetCloudInstanceConfigArgs
 */
export class GetCloudInstanceConfigArgs extends Message<GetCloudInstanceConfigArgs> {
  /**
   * @generated from field: optional string api_key = 1;
   */
  apiKey?: string;

  /**
   * @generated from field: optional string instance_id = 2;
   */
  instanceId?: string;

  /**
   * @generated from field: optional string instance_short_id = 3;
   */
  instanceShortId?: string;

  constructor(data?: PartialMessage<GetCloudInstanceConfigArgs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kurtosis_cloud.GetCloudInstanceConfigArgs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "api_key", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "instance_short_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCloudInstanceConfigArgs {
    return new GetCloudInstanceConfigArgs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCloudInstanceConfigArgs {
    return new GetCloudInstanceConfigArgs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCloudInstanceConfigArgs {
    return new GetCloudInstanceConfigArgs().fromJsonString(jsonString, options);
  }

  static equals(a: GetCloudInstanceConfigArgs | PlainMessage<GetCloudInstanceConfigArgs> | undefined, b: GetCloudInstanceConfigArgs | PlainMessage<GetCloudInstanceConfigArgs> | undefined): boolean {
    return proto3.util.equals(GetCloudInstanceConfigArgs, a, b);
  }
}

/**
 * @generated from message kurtosis_cloud.LaunchResult
 */
export class LaunchResult extends Message<LaunchResult> {
  /**
   * @generated from field: string instance_name = 1;
   */
  instanceName = "";

  /**
   * @generated from field: string instance_id = 2;
   */
  instanceId = "";

  /**
   * @generated from field: string public_dns = 3;
   */
  publicDns = "";

  /**
   * @generated from field: string ip_address = 4;
   */
  ipAddress = "";

  constructor(data?: PartialMessage<LaunchResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kurtosis_cloud.LaunchResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "public_dns", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "ip_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LaunchResult {
    return new LaunchResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LaunchResult {
    return new LaunchResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LaunchResult {
    return new LaunchResult().fromJsonString(jsonString, options);
  }

  static equals(a: LaunchResult | PlainMessage<LaunchResult> | undefined, b: LaunchResult | PlainMessage<LaunchResult> | undefined): boolean {
    return proto3.util.equals(LaunchResult, a, b);
  }
}

/**
 * @generated from message kurtosis_cloud.GetCloudInstanceConfigResponse
 */
export class GetCloudInstanceConfigResponse extends Message<GetCloudInstanceConfigResponse> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: string instance_id = 2;
   */
  instanceId = "";

  /**
   * @generated from field: string context_config = 3;
   */
  contextConfig = "";

  /**
   * @generated from field: kurtosis_cloud.LaunchResult launch_result = 4;
   */
  launchResult?: LaunchResult;

  /**
   * @generated from field: string status = 5;
   */
  status = "";

  /**
   * @generated from field: string created = 6;
   */
  created = "";

  /**
   * @generated from field: string updated = 7;
   */
  updated = "";

  /**
   * deprecated in favor of aws_environment
   * TODO: remove it once this is released and the cloud BE is upgraded
   *
   * @generated from field: optional kurtosis_cloud.AwsKey user_key = 8;
   */
  userKey?: AwsKey;

  /**
   * TODO: remove the optional once this is released and the cloud BE is upgraded
   *
   * @generated from field: optional kurtosis_cloud.AwsEnvironment aws_environment = 9;
   */
  awsEnvironment?: AwsEnvironment;

  constructor(data?: PartialMessage<GetCloudInstanceConfigResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kurtosis_cloud.GetCloudInstanceConfigResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "context_config", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "launch_result", kind: "message", T: LaunchResult },
    { no: 5, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "created", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "updated", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "user_key", kind: "message", T: AwsKey, opt: true },
    { no: 9, name: "aws_environment", kind: "message", T: AwsEnvironment, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCloudInstanceConfigResponse {
    return new GetCloudInstanceConfigResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCloudInstanceConfigResponse {
    return new GetCloudInstanceConfigResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCloudInstanceConfigResponse {
    return new GetCloudInstanceConfigResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCloudInstanceConfigResponse | PlainMessage<GetCloudInstanceConfigResponse> | undefined, b: GetCloudInstanceConfigResponse | PlainMessage<GetCloudInstanceConfigResponse> | undefined): boolean {
    return proto3.util.equals(GetCloudInstanceConfigResponse, a, b);
  }
}

/**
 * @generated from message kurtosis_cloud.GetOrCreatePaymentConfigArgs
 */
export class GetOrCreatePaymentConfigArgs extends Message<GetOrCreatePaymentConfigArgs> {
  /**
   * @generated from field: string access_token = 1;
   */
  accessToken = "";

  /**
   * @generated from field: bool setup_intent = 2;
   */
  setupIntent = false;

  constructor(data?: PartialMessage<GetOrCreatePaymentConfigArgs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kurtosis_cloud.GetOrCreatePaymentConfigArgs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "setup_intent", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrCreatePaymentConfigArgs {
    return new GetOrCreatePaymentConfigArgs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrCreatePaymentConfigArgs {
    return new GetOrCreatePaymentConfigArgs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrCreatePaymentConfigArgs {
    return new GetOrCreatePaymentConfigArgs().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrCreatePaymentConfigArgs | PlainMessage<GetOrCreatePaymentConfigArgs> | undefined, b: GetOrCreatePaymentConfigArgs | PlainMessage<GetOrCreatePaymentConfigArgs> | undefined): boolean {
    return proto3.util.equals(GetOrCreatePaymentConfigArgs, a, b);
  }
}

/**
 * @generated from message kurtosis_cloud.PaymentMethod
 */
export class PaymentMethod extends Message<PaymentMethod> {
  /**
   * @generated from field: int32 exp_month = 1;
   */
  expMonth = 0;

  /**
   * @generated from field: int32 exp_year = 2;
   */
  expYear = 0;

  /**
   * @generated from field: string last_four = 3;
   */
  lastFour = "";

  constructor(data?: PartialMessage<PaymentMethod>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kurtosis_cloud.PaymentMethod";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "exp_month", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "exp_year", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "last_four", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentMethod {
    return new PaymentMethod().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentMethod {
    return new PaymentMethod().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentMethod {
    return new PaymentMethod().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentMethod | PlainMessage<PaymentMethod> | undefined, b: PaymentMethod | PlainMessage<PaymentMethod> | undefined): boolean {
    return proto3.util.equals(PaymentMethod, a, b);
  }
}

/**
 * @generated from message kurtosis_cloud.PaymentProduct
 */
export class PaymentProduct extends Message<PaymentProduct> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: int32 price_unit_amount = 2;
   */
  priceUnitAmount = 0;

  /**
   * @generated from field: string price_currency = 3;
   */
  priceCurrency = "";

  /**
   * @generated from field: string tax_code_name = 4;
   */
  taxCodeName = "";

  constructor(data?: PartialMessage<PaymentProduct>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kurtosis_cloud.PaymentProduct";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "price_unit_amount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "price_currency", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "tax_code_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentProduct {
    return new PaymentProduct().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentProduct {
    return new PaymentProduct().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentProduct {
    return new PaymentProduct().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentProduct | PlainMessage<PaymentProduct> | undefined, b: PaymentProduct | PlainMessage<PaymentProduct> | undefined): boolean {
    return proto3.util.equals(PaymentProduct, a, b);
  }
}

/**
 * @generated from message kurtosis_cloud.PaymentSubscription
 */
export class PaymentSubscription extends Message<PaymentSubscription> {
  /**
   * @generated from field: kurtosis_cloud.PaymentProduct product = 1;
   */
  product?: PaymentProduct;

  /**
   * @generated from field: kurtosis_cloud.PaymentSubscription.Status status = 2;
   */
  status = PaymentSubscription_Status.ACTIVE;

  constructor(data?: PartialMessage<PaymentSubscription>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kurtosis_cloud.PaymentSubscription";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "product", kind: "message", T: PaymentProduct },
    { no: 2, name: "status", kind: "enum", T: proto3.getEnumType(PaymentSubscription_Status) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentSubscription {
    return new PaymentSubscription().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentSubscription {
    return new PaymentSubscription().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentSubscription {
    return new PaymentSubscription().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentSubscription | PlainMessage<PaymentSubscription> | undefined, b: PaymentSubscription | PlainMessage<PaymentSubscription> | undefined): boolean {
    return proto3.util.equals(PaymentSubscription, a, b);
  }
}

/**
 * @generated from enum kurtosis_cloud.PaymentSubscription.Status
 */
export enum PaymentSubscription_Status {
  /**
   * @generated from enum value: ACTIVE = 0;
   */
  ACTIVE = 0,

  /**
   * @generated from enum value: CANCELLED = 1;
   */
  CANCELLED = 1,

  /**
   * @generated from enum value: UNKNOWN = 2;
   */
  UNKNOWN = 2,

  /**
   * @generated from enum value: ACTIVE_CANCEL_AT_PERIOD_END = 3;
   */
  ACTIVE_CANCEL_AT_PERIOD_END = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(PaymentSubscription_Status)
proto3.util.setEnumType(PaymentSubscription_Status, "kurtosis_cloud.PaymentSubscription.Status", [
  { no: 0, name: "ACTIVE" },
  { no: 1, name: "CANCELLED" },
  { no: 2, name: "UNKNOWN" },
  { no: 3, name: "ACTIVE_CANCEL_AT_PERIOD_END" },
]);

/**
 * @generated from message kurtosis_cloud.GetOrCreatePaymentConfigResponse
 */
export class GetOrCreatePaymentConfigResponse extends Message<GetOrCreatePaymentConfigResponse> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: optional string client_secret = 2;
   */
  clientSecret?: string;

  /**
   * @generated from field: optional kurtosis_cloud.PaymentMethod payment_method = 3;
   */
  paymentMethod?: PaymentMethod;

  /**
   * @generated from field: kurtosis_cloud.PaymentProduct product = 4;
   */
  product?: PaymentProduct;

  /**
   * @generated from field: optional kurtosis_cloud.PaymentSubscription subscription = 5;
   */
  subscription?: PaymentSubscription;

  /**
   * @generated from field: int32 trial_end = 6;
   */
  trialEnd = 0;

  constructor(data?: PartialMessage<GetOrCreatePaymentConfigResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kurtosis_cloud.GetOrCreatePaymentConfigResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "client_secret", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "payment_method", kind: "message", T: PaymentMethod, opt: true },
    { no: 4, name: "product", kind: "message", T: PaymentProduct },
    { no: 5, name: "subscription", kind: "message", T: PaymentSubscription, opt: true },
    { no: 6, name: "trial_end", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrCreatePaymentConfigResponse {
    return new GetOrCreatePaymentConfigResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrCreatePaymentConfigResponse {
    return new GetOrCreatePaymentConfigResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrCreatePaymentConfigResponse {
    return new GetOrCreatePaymentConfigResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrCreatePaymentConfigResponse | PlainMessage<GetOrCreatePaymentConfigResponse> | undefined, b: GetOrCreatePaymentConfigResponse | PlainMessage<GetOrCreatePaymentConfigResponse> | undefined): boolean {
    return proto3.util.equals(GetOrCreatePaymentConfigResponse, a, b);
  }
}

/**
 * @generated from message kurtosis_cloud.RefreshDefaultPaymentMethodArgs
 */
export class RefreshDefaultPaymentMethodArgs extends Message<RefreshDefaultPaymentMethodArgs> {
  /**
   * @generated from field: string access_token = 1;
   */
  accessToken = "";

  /**
   * @generated from field: string payment_method_id = 2;
   */
  paymentMethodId = "";

  constructor(data?: PartialMessage<RefreshDefaultPaymentMethodArgs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kurtosis_cloud.RefreshDefaultPaymentMethodArgs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "payment_method_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RefreshDefaultPaymentMethodArgs {
    return new RefreshDefaultPaymentMethodArgs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RefreshDefaultPaymentMethodArgs {
    return new RefreshDefaultPaymentMethodArgs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RefreshDefaultPaymentMethodArgs {
    return new RefreshDefaultPaymentMethodArgs().fromJsonString(jsonString, options);
  }

  static equals(a: RefreshDefaultPaymentMethodArgs | PlainMessage<RefreshDefaultPaymentMethodArgs> | undefined, b: RefreshDefaultPaymentMethodArgs | PlainMessage<RefreshDefaultPaymentMethodArgs> | undefined): boolean {
    return proto3.util.equals(RefreshDefaultPaymentMethodArgs, a, b);
  }
}

/**
 * @generated from message kurtosis_cloud.CancelPaymentSubscriptionArgs
 */
export class CancelPaymentSubscriptionArgs extends Message<CancelPaymentSubscriptionArgs> {
  /**
   * @generated from field: string access_token = 1;
   */
  accessToken = "";

  constructor(data?: PartialMessage<CancelPaymentSubscriptionArgs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kurtosis_cloud.CancelPaymentSubscriptionArgs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelPaymentSubscriptionArgs {
    return new CancelPaymentSubscriptionArgs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelPaymentSubscriptionArgs {
    return new CancelPaymentSubscriptionArgs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CancelPaymentSubscriptionArgs {
    return new CancelPaymentSubscriptionArgs().fromJsonString(jsonString, options);
  }

  static equals(a: CancelPaymentSubscriptionArgs | PlainMessage<CancelPaymentSubscriptionArgs> | undefined, b: CancelPaymentSubscriptionArgs | PlainMessage<CancelPaymentSubscriptionArgs> | undefined): boolean {
    return proto3.util.equals(CancelPaymentSubscriptionArgs, a, b);
  }
}

/**
 * @generated from message kurtosis_cloud.AwsKey
 */
export class AwsKey extends Message<AwsKey> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string secret = 2;
   */
  secret = "";

  constructor(data?: PartialMessage<AwsKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kurtosis_cloud.AwsKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AwsKey {
    return new AwsKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AwsKey {
    return new AwsKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AwsKey {
    return new AwsKey().fromJsonString(jsonString, options);
  }

  static equals(a: AwsKey | PlainMessage<AwsKey> | undefined, b: AwsKey | PlainMessage<AwsKey> | undefined): boolean {
    return proto3.util.equals(AwsKey, a, b);
  }
}

/**
 * @generated from message kurtosis_cloud.AwsEnvironment
 */
export class AwsEnvironment extends Message<AwsEnvironment> {
  /**
   * @generated from field: string access_key_id = 1;
   */
  accessKeyId = "";

  /**
   * @generated from field: string secret_access_key = 2;
   */
  secretAccessKey = "";

  /**
   * @generated from field: string bucket_region = 3;
   */
  bucketRegion = "";

  /**
   * @generated from field: string bucket_name = 4;
   */
  bucketName = "";

  /**
   * @generated from field: string bucket_user_folder = 5;
   */
  bucketUserFolder = "";

  constructor(data?: PartialMessage<AwsEnvironment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kurtosis_cloud.AwsEnvironment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_key_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "secret_access_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "bucket_region", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "bucket_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "bucket_user_folder", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AwsEnvironment {
    return new AwsEnvironment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AwsEnvironment {
    return new AwsEnvironment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AwsEnvironment {
    return new AwsEnvironment().fromJsonString(jsonString, options);
  }

  static equals(a: AwsEnvironment | PlainMessage<AwsEnvironment> | undefined, b: AwsEnvironment | PlainMessage<AwsEnvironment> | undefined): boolean {
    return proto3.util.equals(AwsEnvironment, a, b);
  }
}

/**
 * @generated from message kurtosis_cloud.UpdateAddressArgs
 */
export class UpdateAddressArgs extends Message<UpdateAddressArgs> {
  /**
   * @generated from field: string access_token = 1;
   */
  accessToken = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string line_1 = 3;
   */
  line1 = "";

  /**
   * @generated from field: optional string line_2 = 4;
   */
  line2?: string;

  /**
   * @generated from field: string city = 5;
   */
  city = "";

  /**
   * @generated from field: string state = 6;
   */
  state = "";

  /**
   * @generated from field: string postal_code = 7;
   */
  postalCode = "";

  /**
   * @generated from field: string country = 8;
   */
  country = "";

  constructor(data?: PartialMessage<UpdateAddressArgs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kurtosis_cloud.UpdateAddressArgs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "line_1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "line_2", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "city", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "postal_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "country", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAddressArgs {
    return new UpdateAddressArgs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAddressArgs {
    return new UpdateAddressArgs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAddressArgs {
    return new UpdateAddressArgs().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAddressArgs | PlainMessage<UpdateAddressArgs> | undefined, b: UpdateAddressArgs | PlainMessage<UpdateAddressArgs> | undefined): boolean {
    return proto3.util.equals(UpdateAddressArgs, a, b);
  }
}

/**
 * @generated from message kurtosis_cloud.DeleteInstanceRequest
 */
export class DeleteInstanceRequest extends Message<DeleteInstanceRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string ec2_id = 2;
   */
  ec2Id = "";

  constructor(data?: PartialMessage<DeleteInstanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kurtosis_cloud.DeleteInstanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ec2_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteInstanceRequest {
    return new DeleteInstanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteInstanceRequest {
    return new DeleteInstanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteInstanceRequest {
    return new DeleteInstanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteInstanceRequest | PlainMessage<DeleteInstanceRequest> | undefined, b: DeleteInstanceRequest | PlainMessage<DeleteInstanceRequest> | undefined): boolean {
    return proto3.util.equals(DeleteInstanceRequest, a, b);
  }
}

/**
 * @generated from message kurtosis_cloud.DeleteInstanceResponse
 */
export class DeleteInstanceResponse extends Message<DeleteInstanceResponse> {
  /**
   * @generated from field: string status = 1;
   */
  status = "";

  constructor(data?: PartialMessage<DeleteInstanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kurtosis_cloud.DeleteInstanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteInstanceResponse {
    return new DeleteInstanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteInstanceResponse {
    return new DeleteInstanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteInstanceResponse {
    return new DeleteInstanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteInstanceResponse | PlainMessage<DeleteInstanceResponse> | undefined, b: DeleteInstanceResponse | PlainMessage<DeleteInstanceResponse> | undefined): boolean {
    return proto3.util.equals(DeleteInstanceResponse, a, b);
  }
}

/**
 * @generated from message kurtosis_cloud.GetInstancesResponse
 */
export class GetInstancesResponse extends Message<GetInstancesResponse> {
  /**
   * @generated from field: map<string, kurtosis_cloud.Instance> instances = 1;
   */
  instances: { [key: string]: Instance } = {};

  constructor(data?: PartialMessage<GetInstancesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kurtosis_cloud.GetInstancesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instances", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Instance} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetInstancesResponse {
    return new GetInstancesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetInstancesResponse {
    return new GetInstancesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetInstancesResponse {
    return new GetInstancesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetInstancesResponse | PlainMessage<GetInstancesResponse> | undefined, b: GetInstancesResponse | PlainMessage<GetInstancesResponse> | undefined): boolean {
    return proto3.util.equals(GetInstancesResponse, a, b);
  }
}

/**
 * @generated from message kurtosis_cloud.ChangeUserActiveRequest
 */
export class ChangeUserActiveRequest extends Message<ChangeUserActiveRequest> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: bool active = 2;
   */
  active = false;

  constructor(data?: PartialMessage<ChangeUserActiveRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kurtosis_cloud.ChangeUserActiveRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangeUserActiveRequest {
    return new ChangeUserActiveRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangeUserActiveRequest {
    return new ChangeUserActiveRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangeUserActiveRequest {
    return new ChangeUserActiveRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ChangeUserActiveRequest | PlainMessage<ChangeUserActiveRequest> | undefined, b: ChangeUserActiveRequest | PlainMessage<ChangeUserActiveRequest> | undefined): boolean {
    return proto3.util.equals(ChangeUserActiveRequest, a, b);
  }
}

/**
 * @generated from message kurtosis_cloud.GetUserRequest
 */
export class GetUserRequest extends Message<GetUserRequest> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<GetUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kurtosis_cloud.GetUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserRequest {
    return new GetUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserRequest {
    return new GetUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserRequest {
    return new GetUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserRequest | PlainMessage<GetUserRequest> | undefined, b: GetUserRequest | PlainMessage<GetUserRequest> | undefined): boolean {
    return proto3.util.equals(GetUserRequest, a, b);
  }
}

/**
 * @generated from message kurtosis_cloud.GetUserResponse
 */
export class GetUserResponse extends Message<GetUserResponse> {
  /**
   * @generated from field: kurtosis_cloud.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<GetUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kurtosis_cloud.GetUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserResponse {
    return new GetUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserResponse {
    return new GetUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserResponse {
    return new GetUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserResponse | PlainMessage<GetUserResponse> | undefined, b: GetUserResponse | PlainMessage<GetUserResponse> | undefined): boolean {
    return proto3.util.equals(GetUserResponse, a, b);
  }
}

/**
 * @generated from message kurtosis_cloud.Auth0User
 */
export class Auth0User extends Message<Auth0User> {
  /**
   * @generated from field: string Auth0UserId = 1;
   */
  Auth0UserId = "";

  /**
   * @generated from field: optional string Auth0Name = 2;
   */
  Auth0Name?: string;

  /**
   * @generated from field: optional string Auth0GivenName = 3;
   */
  Auth0GivenName?: string;

  /**
   * @generated from field: optional string Auth0FamilyName = 4;
   */
  Auth0FamilyName?: string;

  /**
   * @generated from field: optional string Auth0Email = 5;
   */
  Auth0Email?: string;

  /**
   * @generated from field: optional bool Auth0EmailVerified = 6;
   */
  Auth0EmailVerified?: boolean;

  /**
   * @generated from field: optional string Auth0Provider = 7;
   */
  Auth0Provider?: string;

  /**
   * @generated from field: optional string Auth0Created = 8;
   */
  Auth0Created?: string;

  /**
   * @generated from field: optional string Auth0LastLogin = 9;
   */
  Auth0LastLogin?: string;

  /**
   * @generated from field: optional string Auth0LastIp = 10;
   */
  Auth0LastIp?: string;

  /**
   * @generated from field: optional int64 Auth0LoginsCount = 11;
   */
  Auth0LoginsCount?: bigint;

  /**
   * @generated from field: optional string Auth0Picture = 12;
   */
  Auth0Picture?: string;

  /**
   * @generated from field: optional string Auth0Location = 13;
   */
  Auth0Location?: string;

  constructor(data?: PartialMessage<Auth0User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kurtosis_cloud.Auth0User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Auth0UserId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Auth0Name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "Auth0GivenName", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "Auth0FamilyName", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "Auth0Email", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "Auth0EmailVerified", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 7, name: "Auth0Provider", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "Auth0Created", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 9, name: "Auth0LastLogin", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 10, name: "Auth0LastIp", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 11, name: "Auth0LoginsCount", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 12, name: "Auth0Picture", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 13, name: "Auth0Location", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Auth0User {
    return new Auth0User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Auth0User {
    return new Auth0User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Auth0User {
    return new Auth0User().fromJsonString(jsonString, options);
  }

  static equals(a: Auth0User | PlainMessage<Auth0User> | undefined, b: Auth0User | PlainMessage<Auth0User> | undefined): boolean {
    return proto3.util.equals(Auth0User, a, b);
  }
}

/**
 * @generated from message kurtosis_cloud.Ec2Connection
 */
export class Ec2Connection extends Message<Ec2Connection> {
  /**
   * @generated from field: string InstanceName = 1;
   */
  InstanceName = "";

  /**
   * @generated from field: string PublicDns = 2;
   */
  PublicDns = "";

  /**
   * @generated from field: string IpAddress = 3;
   */
  IpAddress = "";

  /**
   * @generated from field: string InstanceId = 4;
   */
  InstanceId = "";

  constructor(data?: PartialMessage<Ec2Connection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kurtosis_cloud.Ec2Connection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "InstanceName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "PublicDns", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "IpAddress", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "InstanceId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Ec2Connection {
    return new Ec2Connection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Ec2Connection {
    return new Ec2Connection().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Ec2Connection {
    return new Ec2Connection().fromJsonString(jsonString, options);
  }

  static equals(a: Ec2Connection | PlainMessage<Ec2Connection> | undefined, b: Ec2Connection | PlainMessage<Ec2Connection> | undefined): boolean {
    return proto3.util.equals(Ec2Connection, a, b);
  }
}

/**
 * @generated from message kurtosis_cloud.PaymentUser
 */
export class PaymentUser extends Message<PaymentUser> {
  /**
   * @generated from field: string UserId = 1;
   */
  UserId = "";

  /**
   * @generated from field: string Subscription = 2;
   */
  Subscription = "";

  constructor(data?: PartialMessage<PaymentUser>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kurtosis_cloud.PaymentUser";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "UserId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Subscription", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentUser {
    return new PaymentUser().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentUser {
    return new PaymentUser().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentUser {
    return new PaymentUser().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentUser | PlainMessage<PaymentUser> | undefined, b: PaymentUser | PlainMessage<PaymentUser> | undefined): boolean {
    return proto3.util.equals(PaymentUser, a, b);
  }
}

/**
 * @generated from message kurtosis_cloud.Instance
 */
export class Instance extends Message<Instance> {
  /**
   * @generated from field: string Uuid = 1;
   */
  Uuid = "";

  /**
   * @generated from field: string UserId = 2;
   */
  UserId = "";

  /**
   * @generated from field: optional kurtosis_cloud.Auth0User Auth0User = 3;
   */
  Auth0User?: Auth0User;

  /**
   * @generated from field: optional kurtosis_cloud.Ec2Connection Ec2Connection = 4;
   */
  Ec2Connection?: Ec2Connection;

  /**
   * @generated from field: string Status = 5;
   */
  Status = "";

  /**
   * @generated from field: string Updated = 6;
   */
  Updated = "";

  /**
   * @generated from field: string Created = 7;
   */
  Created = "";

  /**
   * @generated from field: optional kurtosis_cloud.PaymentUser PaymentUser = 8;
   */
  PaymentUser?: PaymentUser;

  constructor(data?: PartialMessage<Instance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kurtosis_cloud.Instance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "UserId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "Auth0User", kind: "message", T: Auth0User, opt: true },
    { no: 4, name: "Ec2Connection", kind: "message", T: Ec2Connection, opt: true },
    { no: 5, name: "Status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "Updated", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "Created", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "PaymentUser", kind: "message", T: PaymentUser, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Instance {
    return new Instance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Instance {
    return new Instance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Instance {
    return new Instance().fromJsonString(jsonString, options);
  }

  static equals(a: Instance | PlainMessage<Instance> | undefined, b: Instance | PlainMessage<Instance> | undefined): boolean {
    return proto3.util.equals(Instance, a, b);
  }
}

/**
 * @generated from message kurtosis_cloud.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: string UserID = 1;
   */
  UserID = "";

  /**
   * @generated from field: string ExternalUserID = 2;
   */
  ExternalUserID = "";

  /**
   * @generated from field: bool Active = 3;
   */
  Active = false;

  /**
   * @generated from field: string Updated = 4;
   */
  Updated = "";

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kurtosis_cloud.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "UserID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ExternalUserID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "Active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "Updated", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * @generated from message kurtosis_cloud.GetUnlockedPortsRequest
 */
export class GetUnlockedPortsRequest extends Message<GetUnlockedPortsRequest> {
  /**
   * @generated from field: string access_token = 1;
   */
  accessToken = "";

  /**
   * @generated from field: string instance_short_uuid = 2;
   */
  instanceShortUuid = "";

  /**
   * @generated from field: string enclave_short_uuid = 3;
   */
  enclaveShortUuid = "";

  constructor(data?: PartialMessage<GetUnlockedPortsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kurtosis_cloud.GetUnlockedPortsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "instance_short_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "enclave_short_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUnlockedPortsRequest {
    return new GetUnlockedPortsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUnlockedPortsRequest {
    return new GetUnlockedPortsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUnlockedPortsRequest {
    return new GetUnlockedPortsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUnlockedPortsRequest | PlainMessage<GetUnlockedPortsRequest> | undefined, b: GetUnlockedPortsRequest | PlainMessage<GetUnlockedPortsRequest> | undefined): boolean {
    return proto3.util.equals(GetUnlockedPortsRequest, a, b);
  }
}

/**
 * @generated from message kurtosis_cloud.CheckPortAuthorizationRequest
 */
export class CheckPortAuthorizationRequest extends Message<CheckPortAuthorizationRequest> {
  /**
   * @generated from field: kurtosis_cloud.Port port = 1;
   */
  port?: Port;

  constructor(data?: PartialMessage<CheckPortAuthorizationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kurtosis_cloud.CheckPortAuthorizationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port", kind: "message", T: Port },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckPortAuthorizationRequest {
    return new CheckPortAuthorizationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckPortAuthorizationRequest {
    return new CheckPortAuthorizationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckPortAuthorizationRequest {
    return new CheckPortAuthorizationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CheckPortAuthorizationRequest | PlainMessage<CheckPortAuthorizationRequest> | undefined, b: CheckPortAuthorizationRequest | PlainMessage<CheckPortAuthorizationRequest> | undefined): boolean {
    return proto3.util.equals(CheckPortAuthorizationRequest, a, b);
  }
}

/**
 * @generated from message kurtosis_cloud.UnlockPortRequest
 */
export class UnlockPortRequest extends Message<UnlockPortRequest> {
  /**
   * @generated from field: string access_token = 1;
   */
  accessToken = "";

  /**
   * @generated from field: kurtosis_cloud.Port port = 2;
   */
  port?: Port;

  constructor(data?: PartialMessage<UnlockPortRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kurtosis_cloud.UnlockPortRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "port", kind: "message", T: Port },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnlockPortRequest {
    return new UnlockPortRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnlockPortRequest {
    return new UnlockPortRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnlockPortRequest {
    return new UnlockPortRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UnlockPortRequest | PlainMessage<UnlockPortRequest> | undefined, b: UnlockPortRequest | PlainMessage<UnlockPortRequest> | undefined): boolean {
    return proto3.util.equals(UnlockPortRequest, a, b);
  }
}

/**
 * @generated from message kurtosis_cloud.LockPortRequest
 */
export class LockPortRequest extends Message<LockPortRequest> {
  /**
   * @generated from field: string access_token = 1;
   */
  accessToken = "";

  /**
   * @generated from field: kurtosis_cloud.Port port = 2;
   */
  port?: Port;

  constructor(data?: PartialMessage<LockPortRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kurtosis_cloud.LockPortRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "port", kind: "message", T: Port },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LockPortRequest {
    return new LockPortRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LockPortRequest {
    return new LockPortRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LockPortRequest {
    return new LockPortRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LockPortRequest | PlainMessage<LockPortRequest> | undefined, b: LockPortRequest | PlainMessage<LockPortRequest> | undefined): boolean {
    return proto3.util.equals(LockPortRequest, a, b);
  }
}

/**
 * @generated from message kurtosis_cloud.Port
 */
export class Port extends Message<Port> {
  /**
   * @generated from field: uint32 port_number = 1;
   */
  portNumber = 0;

  /**
   * @generated from field: string instance_short_uuid = 2;
   */
  instanceShortUuid = "";

  /**
   * @generated from field: string service_short_uuid = 3;
   */
  serviceShortUuid = "";

  /**
   * @generated from field: string enclave_short_uuid = 4;
   */
  enclaveShortUuid = "";

  constructor(data?: PartialMessage<Port>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kurtosis_cloud.Port";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port_number", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "instance_short_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "service_short_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "enclave_short_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Port {
    return new Port().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Port {
    return new Port().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Port {
    return new Port().fromJsonString(jsonString, options);
  }

  static equals(a: Port | PlainMessage<Port> | undefined, b: Port | PlainMessage<Port> | undefined): boolean {
    return proto3.util.equals(Port, a, b);
  }
}

/**
 * @generated from message kurtosis_cloud.GetUnlockedPortsResponse
 */
export class GetUnlockedPortsResponse extends Message<GetUnlockedPortsResponse> {
  /**
   * @generated from field: repeated kurtosis_cloud.Port port = 1;
   */
  port: Port[] = [];

  constructor(data?: PartialMessage<GetUnlockedPortsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kurtosis_cloud.GetUnlockedPortsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port", kind: "message", T: Port, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUnlockedPortsResponse {
    return new GetUnlockedPortsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUnlockedPortsResponse {
    return new GetUnlockedPortsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUnlockedPortsResponse {
    return new GetUnlockedPortsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUnlockedPortsResponse | PlainMessage<GetUnlockedPortsResponse> | undefined, b: GetUnlockedPortsResponse | PlainMessage<GetUnlockedPortsResponse> | undefined): boolean {
    return proto3.util.equals(GetUnlockedPortsResponse, a, b);
  }
}

