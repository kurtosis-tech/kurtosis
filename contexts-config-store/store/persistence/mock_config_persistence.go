// Code generated by mockery v2.20.2. DO NOT EDIT.

package persistence

import (
	generated "github.com/kurtosis-tech/kurtosis/contexts-config-store/api/golang/generated"
	mock "github.com/stretchr/testify/mock"
)

// MockConfigPersistence is an autogenerated mock type for the ConfigPersistence type
type MockConfigPersistence struct {
	mock.Mock
}

type MockConfigPersistence_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigPersistence) EXPECT() *MockConfigPersistence_Expecter {
	return &MockConfigPersistence_Expecter{mock: &_m.Mock}
}

// LoadContextsConfig provides a mock function with given fields:
func (_m *MockConfigPersistence) LoadContextsConfig() (*generated.KurtosisContextsConfig, error) {
	ret := _m.Called()

	var r0 *generated.KurtosisContextsConfig
	var r1 error
	if rf, ok := ret.Get(0).(func() (*generated.KurtosisContextsConfig, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *generated.KurtosisContextsConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*generated.KurtosisContextsConfig)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfigPersistence_LoadContextsConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadContextsConfig'
type MockConfigPersistence_LoadContextsConfig_Call struct {
	*mock.Call
}

// LoadContextsConfig is a helper method to define mock.On call
func (_e *MockConfigPersistence_Expecter) LoadContextsConfig() *MockConfigPersistence_LoadContextsConfig_Call {
	return &MockConfigPersistence_LoadContextsConfig_Call{Call: _e.mock.On("LoadContextsConfig")}
}

func (_c *MockConfigPersistence_LoadContextsConfig_Call) Run(run func()) *MockConfigPersistence_LoadContextsConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigPersistence_LoadContextsConfig_Call) Return(_a0 *generated.KurtosisContextsConfig, _a1 error) *MockConfigPersistence_LoadContextsConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfigPersistence_LoadContextsConfig_Call) RunAndReturn(run func() (*generated.KurtosisContextsConfig, error)) *MockConfigPersistence_LoadContextsConfig_Call {
	_c.Call.Return(run)
	return _c
}

// PersistContextsConfig provides a mock function with given fields: newContextsConfig
func (_m *MockConfigPersistence) PersistContextsConfig(newContextsConfig *generated.KurtosisContextsConfig) error {
	ret := _m.Called(newContextsConfig)

	var r0 error
	if rf, ok := ret.Get(0).(func(*generated.KurtosisContextsConfig) error); ok {
		r0 = rf(newContextsConfig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConfigPersistence_PersistContextsConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PersistContextsConfig'
type MockConfigPersistence_PersistContextsConfig_Call struct {
	*mock.Call
}

// PersistContextsConfig is a helper method to define mock.On call
//   - newContextsConfig *generated.KurtosisContextsConfig
func (_e *MockConfigPersistence_Expecter) PersistContextsConfig(newContextsConfig interface{}) *MockConfigPersistence_PersistContextsConfig_Call {
	return &MockConfigPersistence_PersistContextsConfig_Call{Call: _e.mock.On("PersistContextsConfig", newContextsConfig)}
}

func (_c *MockConfigPersistence_PersistContextsConfig_Call) Run(run func(newContextsConfig *generated.KurtosisContextsConfig)) *MockConfigPersistence_PersistContextsConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*generated.KurtosisContextsConfig))
	})
	return _c
}

func (_c *MockConfigPersistence_PersistContextsConfig_Call) Return(_a0 error) *MockConfigPersistence_PersistContextsConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfigPersistence_PersistContextsConfig_Call) RunAndReturn(run func(*generated.KurtosisContextsConfig) error) *MockConfigPersistence_PersistContextsConfig_Call {
	_c.Call.Return(run)
	return _c
}

// init provides a mock function with given fields:
func (_m *MockConfigPersistence) init() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConfigPersistence_init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'init'
type MockConfigPersistence_init_Call struct {
	*mock.Call
}

// init is a helper method to define mock.On call
func (_e *MockConfigPersistence_Expecter) init() *MockConfigPersistence_init_Call {
	return &MockConfigPersistence_init_Call{Call: _e.mock.On("init")}
}

func (_c *MockConfigPersistence_init_Call) Run(run func()) *MockConfigPersistence_init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigPersistence_init_Call) Return(_a0 error) *MockConfigPersistence_init_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfigPersistence_init_Call) RunAndReturn(run func() error) *MockConfigPersistence_init_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockConfigPersistence interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockConfigPersistence creates a new instance of MockConfigPersistence. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockConfigPersistence(t mockConstructorTestingTNewMockConfigPersistence) *MockConfigPersistence {
	mock := &MockConfigPersistence{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
