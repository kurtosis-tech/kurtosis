// Code generated by mockery v2.20.2. DO NOT EDIT.

package store

import (
	generated "github.com/kurtosis-tech/kurtosis/contexts-config-store/api/golang/generated"
	mock "github.com/stretchr/testify/mock"
)

// MockContextsConfigStore is an autogenerated mock type for the ContextsConfigStore type
type MockContextsConfigStore struct {
	mock.Mock
}

type MockContextsConfigStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockContextsConfigStore) EXPECT() *MockContextsConfigStore_Expecter {
	return &MockContextsConfigStore_Expecter{mock: &_m.Mock}
}

// AddNewContext provides a mock function with given fields: newContext
func (_m *MockContextsConfigStore) AddNewContext(newContext *generated.KurtosisContext) error {
	ret := _m.Called(newContext)

	var r0 error
	if rf, ok := ret.Get(0).(func(*generated.KurtosisContext) error); ok {
		r0 = rf(newContext)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContextsConfigStore_AddNewContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddNewContext'
type MockContextsConfigStore_AddNewContext_Call struct {
	*mock.Call
}

// AddNewContext is a helper method to define mock.On call
//   - newContext *generated.KurtosisContext
func (_e *MockContextsConfigStore_Expecter) AddNewContext(newContext interface{}) *MockContextsConfigStore_AddNewContext_Call {
	return &MockContextsConfigStore_AddNewContext_Call{Call: _e.mock.On("AddNewContext", newContext)}
}

func (_c *MockContextsConfigStore_AddNewContext_Call) Run(run func(newContext *generated.KurtosisContext)) *MockContextsConfigStore_AddNewContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*generated.KurtosisContext))
	})
	return _c
}

func (_c *MockContextsConfigStore_AddNewContext_Call) Return(_a0 error) *MockContextsConfigStore_AddNewContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContextsConfigStore_AddNewContext_Call) RunAndReturn(run func(*generated.KurtosisContext) error) *MockContextsConfigStore_AddNewContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrentContext provides a mock function with given fields:
func (_m *MockContextsConfigStore) GetCurrentContext() (*generated.KurtosisContext, error) {
	ret := _m.Called()

	var r0 *generated.KurtosisContext
	var r1 error
	if rf, ok := ret.Get(0).(func() (*generated.KurtosisContext, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *generated.KurtosisContext); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*generated.KurtosisContext)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContextsConfigStore_GetCurrentContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentContext'
type MockContextsConfigStore_GetCurrentContext_Call struct {
	*mock.Call
}

// GetCurrentContext is a helper method to define mock.On call
func (_e *MockContextsConfigStore_Expecter) GetCurrentContext() *MockContextsConfigStore_GetCurrentContext_Call {
	return &MockContextsConfigStore_GetCurrentContext_Call{Call: _e.mock.On("GetCurrentContext")}
}

func (_c *MockContextsConfigStore_GetCurrentContext_Call) Run(run func()) *MockContextsConfigStore_GetCurrentContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContextsConfigStore_GetCurrentContext_Call) Return(_a0 *generated.KurtosisContext, _a1 error) *MockContextsConfigStore_GetCurrentContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContextsConfigStore_GetCurrentContext_Call) RunAndReturn(run func() (*generated.KurtosisContext, error)) *MockContextsConfigStore_GetCurrentContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetKurtosisContextsConfig provides a mock function with given fields:
func (_m *MockContextsConfigStore) GetKurtosisContextsConfig() (*generated.KurtosisContextsConfig, error) {
	ret := _m.Called()

	var r0 *generated.KurtosisContextsConfig
	var r1 error
	if rf, ok := ret.Get(0).(func() (*generated.KurtosisContextsConfig, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *generated.KurtosisContextsConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*generated.KurtosisContextsConfig)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContextsConfigStore_GetKurtosisContextsConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKurtosisContextsConfig'
type MockContextsConfigStore_GetKurtosisContextsConfig_Call struct {
	*mock.Call
}

// GetKurtosisContextsConfig is a helper method to define mock.On call
func (_e *MockContextsConfigStore_Expecter) GetKurtosisContextsConfig() *MockContextsConfigStore_GetKurtosisContextsConfig_Call {
	return &MockContextsConfigStore_GetKurtosisContextsConfig_Call{Call: _e.mock.On("GetKurtosisContextsConfig")}
}

func (_c *MockContextsConfigStore_GetKurtosisContextsConfig_Call) Run(run func()) *MockContextsConfigStore_GetKurtosisContextsConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContextsConfigStore_GetKurtosisContextsConfig_Call) Return(_a0 *generated.KurtosisContextsConfig, _a1 error) *MockContextsConfigStore_GetKurtosisContextsConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContextsConfigStore_GetKurtosisContextsConfig_Call) RunAndReturn(run func() (*generated.KurtosisContextsConfig, error)) *MockContextsConfigStore_GetKurtosisContextsConfig_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveContext provides a mock function with given fields: contextUuid
func (_m *MockContextsConfigStore) RemoveContext(contextUuid *generated.ContextUuid) error {
	ret := _m.Called(contextUuid)

	var r0 error
	if rf, ok := ret.Get(0).(func(*generated.ContextUuid) error); ok {
		r0 = rf(contextUuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContextsConfigStore_RemoveContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveContext'
type MockContextsConfigStore_RemoveContext_Call struct {
	*mock.Call
}

// RemoveContext is a helper method to define mock.On call
//   - contextUuid *generated.ContextUuid
func (_e *MockContextsConfigStore_Expecter) RemoveContext(contextUuid interface{}) *MockContextsConfigStore_RemoveContext_Call {
	return &MockContextsConfigStore_RemoveContext_Call{Call: _e.mock.On("RemoveContext", contextUuid)}
}

func (_c *MockContextsConfigStore_RemoveContext_Call) Run(run func(contextUuid *generated.ContextUuid)) *MockContextsConfigStore_RemoveContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*generated.ContextUuid))
	})
	return _c
}

func (_c *MockContextsConfigStore_RemoveContext_Call) Return(_a0 error) *MockContextsConfigStore_RemoveContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContextsConfigStore_RemoveContext_Call) RunAndReturn(run func(*generated.ContextUuid) error) *MockContextsConfigStore_RemoveContext_Call {
	_c.Call.Return(run)
	return _c
}

// SwitchContext provides a mock function with given fields: contextUuid
func (_m *MockContextsConfigStore) SwitchContext(contextUuid *generated.ContextUuid) error {
	ret := _m.Called(contextUuid)

	var r0 error
	if rf, ok := ret.Get(0).(func(*generated.ContextUuid) error); ok {
		r0 = rf(contextUuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContextsConfigStore_SwitchContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SwitchContext'
type MockContextsConfigStore_SwitchContext_Call struct {
	*mock.Call
}

// SwitchContext is a helper method to define mock.On call
//   - contextUuid *generated.ContextUuid
func (_e *MockContextsConfigStore_Expecter) SwitchContext(contextUuid interface{}) *MockContextsConfigStore_SwitchContext_Call {
	return &MockContextsConfigStore_SwitchContext_Call{Call: _e.mock.On("SwitchContext", contextUuid)}
}

func (_c *MockContextsConfigStore_SwitchContext_Call) Run(run func(contextUuid *generated.ContextUuid)) *MockContextsConfigStore_SwitchContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*generated.ContextUuid))
	})
	return _c
}

func (_c *MockContextsConfigStore_SwitchContext_Call) Return(_a0 error) *MockContextsConfigStore_SwitchContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContextsConfigStore_SwitchContext_Call) RunAndReturn(run func(*generated.ContextUuid) error) *MockContextsConfigStore_SwitchContext_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockContextsConfigStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockContextsConfigStore creates a new instance of MockContextsConfigStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockContextsConfigStore(t mockConstructorTestingTNewMockContextsConfigStore) *MockContextsConfigStore {
	mock := &MockContextsConfigStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
