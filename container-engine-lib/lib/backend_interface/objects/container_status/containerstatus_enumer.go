// Code generated by "enumer -trimprefix=ContainerStatus_ -transform=snake-upper -type=ContainerStatus"; DO NOT EDIT.

package container_status

import (
	"fmt"
	"strings"
)

const _ContainerStatusName = "STOPPEDRUNNING"

var _ContainerStatusIndex = [...]uint8{0, 7, 14}

const _ContainerStatusLowerName = "stoppedrunning"

func (i ContainerStatus) String() string {
	if i < 0 || i >= ContainerStatus(len(_ContainerStatusIndex)-1) {
		return fmt.Sprintf("ContainerStatus(%d)", i)
	}
	return _ContainerStatusName[_ContainerStatusIndex[i]:_ContainerStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ContainerStatusNoOp() {
	var x [1]struct{}
	_ = x[ContainerStatus_Stopped-(0)]
	_ = x[ContainerStatus_Running-(1)]
}

var _ContainerStatusValues = []ContainerStatus{ContainerStatus_Stopped, ContainerStatus_Running}

var _ContainerStatusNameToValueMap = map[string]ContainerStatus{
	_ContainerStatusName[0:7]:       ContainerStatus_Stopped,
	_ContainerStatusLowerName[0:7]:  ContainerStatus_Stopped,
	_ContainerStatusName[7:14]:      ContainerStatus_Running,
	_ContainerStatusLowerName[7:14]: ContainerStatus_Running,
}

var _ContainerStatusNames = []string{
	_ContainerStatusName[0:7],
	_ContainerStatusName[7:14],
}

// ContainerStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ContainerStatusString(s string) (ContainerStatus, error) {
	if val, ok := _ContainerStatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ContainerStatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ContainerStatus values", s)
}

// ContainerStatusValues returns all values of the enum
func ContainerStatusValues() []ContainerStatus {
	return _ContainerStatusValues
}

// ContainerStatusStrings returns a slice of all String values of the enum
func ContainerStatusStrings() []string {
	strs := make([]string, len(_ContainerStatusNames))
	copy(strs, _ContainerStatusNames)
	return strs
}

// IsAContainerStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ContainerStatus) IsAContainerStatus() bool {
	for _, v := range _ContainerStatusValues {
		if i == v {
			return true
		}
	}
	return false
}
