// Code generated by mockery v2.14.1. DO NOT EDIT.

package persistence

import (
	golang "github.com/kurtosis-tech/kurtosis/context-config-store/api/golang"
	mock "github.com/stretchr/testify/mock"
)

// MockConfigPersistence is an autogenerated mock type for the ConfigPersistence type
type MockConfigPersistence struct {
	mock.Mock
}

type MockConfigPersistence_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigPersistence) EXPECT() *MockConfigPersistence_Expecter {
	return &MockConfigPersistence_Expecter{mock: &_m.Mock}
}

// LoadContextConfig provides a mock function with given fields:
func (_m *MockConfigPersistence) LoadContextConfig() (*golang.KurtosisContextConfig, error) {
	ret := _m.Called()

	var r0 *golang.KurtosisContextConfig
	if rf, ok := ret.Get(0).(func() *golang.KurtosisContextConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*golang.KurtosisContextConfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfigPersistence_LoadContextConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadContextConfig'
type MockConfigPersistence_LoadContextConfig_Call struct {
	*mock.Call
}

// LoadContextConfig is a helper method to define mock.On call
func (_e *MockConfigPersistence_Expecter) LoadContextConfig() *MockConfigPersistence_LoadContextConfig_Call {
	return &MockConfigPersistence_LoadContextConfig_Call{Call: _e.mock.On("LoadContextConfig")}
}

func (_c *MockConfigPersistence_LoadContextConfig_Call) Run(run func()) *MockConfigPersistence_LoadContextConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigPersistence_LoadContextConfig_Call) Return(_a0 *golang.KurtosisContextConfig, _a1 error) *MockConfigPersistence_LoadContextConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PersistContextConfig provides a mock function with given fields: contextConfig
func (_m *MockConfigPersistence) PersistContextConfig(contextConfig *golang.KurtosisContextConfig) error {
	ret := _m.Called(contextConfig)

	var r0 error
	if rf, ok := ret.Get(0).(func(*golang.KurtosisContextConfig) error); ok {
		r0 = rf(contextConfig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConfigPersistence_PersistContextConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PersistContextConfig'
type MockConfigPersistence_PersistContextConfig_Call struct {
	*mock.Call
}

// PersistContextConfig is a helper method to define mock.On call
//   - contextConfig *golang.KurtosisContextConfig
func (_e *MockConfigPersistence_Expecter) PersistContextConfig(contextConfig interface{}) *MockConfigPersistence_PersistContextConfig_Call {
	return &MockConfigPersistence_PersistContextConfig_Call{Call: _e.mock.On("PersistContextConfig", contextConfig)}
}

func (_c *MockConfigPersistence_PersistContextConfig_Call) Run(run func(contextConfig *golang.KurtosisContextConfig)) *MockConfigPersistence_PersistContextConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*golang.KurtosisContextConfig))
	})
	return _c
}

func (_c *MockConfigPersistence_PersistContextConfig_Call) Return(_a0 error) *MockConfigPersistence_PersistContextConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

// init provides a mock function with given fields:
func (_m *MockConfigPersistence) init() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConfigPersistence_init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'init'
type MockConfigPersistence_init_Call struct {
	*mock.Call
}

// init is a helper method to define mock.On call
func (_e *MockConfigPersistence_Expecter) init() *MockConfigPersistence_init_Call {
	return &MockConfigPersistence_init_Call{Call: _e.mock.On("init")}
}

func (_c *MockConfigPersistence_init_Call) Run(run func()) *MockConfigPersistence_init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigPersistence_init_Call) Return(_a0 error) *MockConfigPersistence_init_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewMockConfigPersistence interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockConfigPersistence creates a new instance of MockConfigPersistence. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockConfigPersistence(t mockConstructorTestingTNewMockConfigPersistence) *MockConfigPersistence {
	mock := &MockConfigPersistence{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
