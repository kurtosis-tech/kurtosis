// Code generated by Fern. DO NOT EDIT.

package streaming

import (
	context "context"
	sdk "sdk"
	core "sdk/core"
	internal "sdk/internal"
	option "sdk/option"
)

type Client struct {
	WithRawResponse *RawClient

	options *core.RequestOptions
	baseURL string
	caller  *internal.Caller
}

func NewClient(options *core.RequestOptions) *Client {
	return &Client{
		WithRawResponse: NewRawClient(options),
		options:         options,
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
	}
}

// Get multiple enclave services logs concurrently. This endpoint can stream the logs by either starting
// a Websocket connection (recommended) or legacy HTTP streaming.
func (c *Client) GetEnclavesServicesLogs(
	ctx context.Context,
	// UUID, shortened UUID, or name of the enclave
	enclaveIdentifier string,
	request *sdk.GetEnclavesEnclaveIdentifierLogsRequest,
	opts ...option.RequestOption,
) (*sdk.ServiceLogs, error) {
	response, err := c.WithRawResponse.GetEnclavesServicesLogs(
		ctx,
		enclaveIdentifier,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Get service logs. This endpoint can stream the logs by either starting
// a Websocket connection (recommended) or legacy HTTP streaming.
func (c *Client) GetServiceLogs(
	ctx context.Context,
	// UUID, shortened UUID, or name of the enclave
	enclaveIdentifier string,
	// The service identifier of the container that the command should be executed in
	serviceIdentifier string,
	request *sdk.GetEnclavesEnclaveIdentifierServicesServiceIdentifierLogsRequest,
	opts ...option.RequestOption,
) (*sdk.ServiceLogs, error) {
	response, err := c.WithRawResponse.GetServiceLogs(
		ctx,
		enclaveIdentifier,
		serviceIdentifier,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Stream the logs of an Starlark execution that were initiated using `retrieve_logs_async`.
// The async logs can be consumed only once and expire after consumption or 2 hours after creation.
// This endpoint can stream the logs by either starting a Websocket connection (recommended) or
// legacy HTTP streaming.
func (c *Client) GetStarlarkExecutionLogs(
	ctx context.Context,
	// The unique identifier to track the execution of a Starlark script or package
	starlarkExecutionUuid string,
	opts ...option.RequestOption,
) ([]*sdk.StarlarkRunResponseLine, error) {
	response, err := c.WithRawResponse.GetStarlarkExecutionLogs(
		ctx,
		starlarkExecutionUuid,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
