// Code generated by Fern. DO NOT EDIT.

package streaming

import (
	context "context"
	http "net/http"

	sdk "github.com/kurtosis-tech/kurtosis/sdks/go"
	core "github.com/kurtosis-tech/kurtosis/sdks/go/core"
	internal "github.com/kurtosis-tech/kurtosis/sdks/go/internal"
	option "github.com/kurtosis-tech/kurtosis/sdks/go/option"
)

type RawClient struct {
	baseURL string
	caller  *internal.Caller
	options *core.RequestOptions
}

func NewRawClient(options *core.RequestOptions) *RawClient {
	return &RawClient{
		options: options,
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
	}
}

func (r *RawClient) GetEnclavesServicesLogs(
	ctx context.Context,
	// UUID, shortened UUID, or name of the enclave
	enclaveIdentifier string,
	request *sdk.GetEnclavesEnclaveIdentifierLogsRequest,
	opts ...option.RequestOption,
) (*core.Response[*sdk.ServiceLogs], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"http://localhost:9779/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/enclaves/%v/logs",
		enclaveIdentifier,
	)
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	var response *sdk.ServiceLogs
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*sdk.ServiceLogs]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) GetServiceLogs(
	ctx context.Context,
	// UUID, shortened UUID, or name of the enclave
	enclaveIdentifier string,
	// The service identifier of the container that the command should be executed in
	serviceIdentifier string,
	request *sdk.GetEnclavesEnclaveIdentifierServicesServiceIdentifierLogsRequest,
	opts ...option.RequestOption,
) (*core.Response[*sdk.ServiceLogs], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"http://localhost:9779/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/enclaves/%v/services/%v/logs",
		enclaveIdentifier,
		serviceIdentifier,
	)
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	var response *sdk.ServiceLogs
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*sdk.ServiceLogs]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) GetStarlarkExecutionLogs(
	ctx context.Context,
	// The unique identifier to track the execution of a Starlark script or package
	starlarkExecutionUuid string,
	opts ...option.RequestOption,
) (*core.Response[[]*sdk.StarlarkRunResponseLine], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"http://localhost:9779/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/starlark/executions/%v/logs",
		starlarkExecutionUuid,
	)
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	var response []*sdk.StarlarkRunResponseLine
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[[]*sdk.StarlarkRunResponseLine]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}
