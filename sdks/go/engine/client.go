// Code generated by Fern. DO NOT EDIT.

package engine

import (
	context "context"
	sdk "sdk"
	core "sdk/core"
	internal "sdk/internal"
	option "sdk/option"
)

type Client struct {
	WithRawResponse *RawClient

	options *core.RequestOptions
	baseURL string
	caller  *internal.Caller
}

func NewClient(options *core.RequestOptions) *Client {
	return &Client{
		WithRawResponse: NewRawClient(options),
		options:         options,
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
	}
}

func (c *Client) GetEngineInfo(
	ctx context.Context,
	opts ...option.RequestOption,
) (*sdk.EngineInfo, error) {
	response, err := c.WithRawResponse.GetEngineInfo(
		ctx,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) ListEnclaves(
	ctx context.Context,
	opts ...option.RequestOption,
) (map[string]*sdk.EnclaveInfo, error) {
	response, err := c.WithRawResponse.ListEnclaves(
		ctx,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) CreateEnclave(
	ctx context.Context,
	request *sdk.CreateEnclave,
	opts ...option.RequestOption,
) (*sdk.EnclaveInfo, error) {
	response, err := c.WithRawResponse.CreateEnclave(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Delete stopped enclaves. TO delete all the enclaves use the query parameter `remove_all`
func (c *Client) DeleteEnclaves(
	ctx context.Context,
	request *sdk.DeleteEnclavesRequest,
	opts ...option.RequestOption,
) (*sdk.DeletionSummary, error) {
	response, err := c.WithRawResponse.DeleteEnclaves(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) ListAllEnclaveIdentifiers(
	ctx context.Context,
	opts ...option.RequestOption,
) ([]*sdk.EnclaveIdentifiers, error) {
	response, err := c.WithRawResponse.ListAllEnclaveIdentifiers(
		ctx,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) GetEnclaveDetailedInfo(
	ctx context.Context,
	// UUID, shortened UUID, or name of the enclave
	enclaveIdentifier string,
	opts ...option.RequestOption,
) (*sdk.EnclaveInfo, error) {
	response, err := c.WithRawResponse.GetEnclaveDetailedInfo(
		ctx,
		enclaveIdentifier,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) DestroyEnclave(
	ctx context.Context,
	// UUID, shortened UUID, or name of the enclave
	enclaveIdentifier string,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.DestroyEnclave(
		ctx,
		enclaveIdentifier,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}

func (c *Client) GetEnclaveStatus(
	ctx context.Context,
	// UUID, shortened UUID, or name of the enclave
	enclaveIdentifier string,
	opts ...option.RequestOption,
) (*sdk.EnclaveStatus, error) {
	response, err := c.WithRawResponse.GetEnclaveStatus(
		ctx,
		enclaveIdentifier,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) SetEnclaveStatus(
	ctx context.Context,
	// UUID, shortened UUID, or name of the enclave
	enclaveIdentifier string,
	request sdk.EnclaveTargetStatus,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.SetEnclaveStatus(
		ctx,
		enclaveIdentifier,
		request,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}
