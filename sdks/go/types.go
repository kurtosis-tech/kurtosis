// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	big "math/big"
	internal "sdk/internal"
	time "time"
)

var (
	starlarkErrorFieldError = big.NewInt(1 << 0)
)

type StarlarkError struct {
	Error *StarlarkErrorError `json:"error" url:"error"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *StarlarkError) GetError() *StarlarkErrorError {
	if s == nil {
		return nil
	}
	return s.Error
}

func (s *StarlarkError) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StarlarkError) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetError sets the Error field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *StarlarkError) SetError(error_ *StarlarkErrorError) {
	s.Error = error_
	s.require(starlarkErrorFieldError)
}

func (s *StarlarkError) UnmarshalJSON(data []byte) error {
	type unmarshaler StarlarkError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StarlarkError(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *StarlarkError) MarshalJSON() ([]byte, error) {
	type embed StarlarkError
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *StarlarkError) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type StarlarkErrorError struct {
	StarlarkInterpretationError *StarlarkInterpretationError
	StarlarkValidationError     *StarlarkValidationError
	StarlarkExecutionError      *StarlarkExecutionError

	typ string
}

func (s *StarlarkErrorError) GetStarlarkInterpretationError() *StarlarkInterpretationError {
	if s == nil {
		return nil
	}
	return s.StarlarkInterpretationError
}

func (s *StarlarkErrorError) GetStarlarkValidationError() *StarlarkValidationError {
	if s == nil {
		return nil
	}
	return s.StarlarkValidationError
}

func (s *StarlarkErrorError) GetStarlarkExecutionError() *StarlarkExecutionError {
	if s == nil {
		return nil
	}
	return s.StarlarkExecutionError
}

func (s *StarlarkErrorError) UnmarshalJSON(data []byte) error {
	valueStarlarkInterpretationError := new(StarlarkInterpretationError)
	if err := json.Unmarshal(data, &valueStarlarkInterpretationError); err == nil {
		s.typ = "StarlarkInterpretationError"
		s.StarlarkInterpretationError = valueStarlarkInterpretationError
		return nil
	}
	valueStarlarkValidationError := new(StarlarkValidationError)
	if err := json.Unmarshal(data, &valueStarlarkValidationError); err == nil {
		s.typ = "StarlarkValidationError"
		s.StarlarkValidationError = valueStarlarkValidationError
		return nil
	}
	valueStarlarkExecutionError := new(StarlarkExecutionError)
	if err := json.Unmarshal(data, &valueStarlarkExecutionError); err == nil {
		s.typ = "StarlarkExecutionError"
		s.StarlarkExecutionError = valueStarlarkExecutionError
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s StarlarkErrorError) MarshalJSON() ([]byte, error) {
	if s.typ == "StarlarkInterpretationError" || s.StarlarkInterpretationError != nil {
		return json.Marshal(s.StarlarkInterpretationError)
	}
	if s.typ == "StarlarkValidationError" || s.StarlarkValidationError != nil {
		return json.Marshal(s.StarlarkValidationError)
	}
	if s.typ == "StarlarkExecutionError" || s.StarlarkExecutionError != nil {
		return json.Marshal(s.StarlarkExecutionError)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", s)
}

type StarlarkErrorErrorVisitor interface {
	VisitStarlarkInterpretationError(*StarlarkInterpretationError) error
	VisitStarlarkValidationError(*StarlarkValidationError) error
	VisitStarlarkExecutionError(*StarlarkExecutionError) error
}

func (s *StarlarkErrorError) Accept(visitor StarlarkErrorErrorVisitor) error {
	if s.typ == "StarlarkInterpretationError" || s.StarlarkInterpretationError != nil {
		return visitor.VisitStarlarkInterpretationError(s.StarlarkInterpretationError)
	}
	if s.typ == "StarlarkValidationError" || s.StarlarkValidationError != nil {
		return visitor.VisitStarlarkValidationError(s.StarlarkValidationError)
	}
	if s.typ == "StarlarkExecutionError" || s.StarlarkExecutionError != nil {
		return visitor.VisitStarlarkExecutionError(s.StarlarkExecutionError)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", s)
}

var (
	starlarkExecutionErrorFieldExecutionError = big.NewInt(1 << 0)
)

type StarlarkExecutionError struct {
	ExecutionError *StarlarkExecutionErrorExecutionError `json:"execution_error" url:"execution_error"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *StarlarkExecutionError) GetExecutionError() *StarlarkExecutionErrorExecutionError {
	if s == nil {
		return nil
	}
	return s.ExecutionError
}

func (s *StarlarkExecutionError) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StarlarkExecutionError) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetExecutionError sets the ExecutionError field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *StarlarkExecutionError) SetExecutionError(executionError *StarlarkExecutionErrorExecutionError) {
	s.ExecutionError = executionError
	s.require(starlarkExecutionErrorFieldExecutionError)
}

func (s *StarlarkExecutionError) UnmarshalJSON(data []byte) error {
	type unmarshaler StarlarkExecutionError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StarlarkExecutionError(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *StarlarkExecutionError) MarshalJSON() ([]byte, error) {
	type embed StarlarkExecutionError
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *StarlarkExecutionError) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

var (
	starlarkExecutionErrorExecutionErrorFieldErrorMessage = big.NewInt(1 << 0)
)

type StarlarkExecutionErrorExecutionError struct {
	ErrorMessage string `json:"error_message" url:"error_message"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *StarlarkExecutionErrorExecutionError) GetErrorMessage() string {
	if s == nil {
		return ""
	}
	return s.ErrorMessage
}

func (s *StarlarkExecutionErrorExecutionError) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StarlarkExecutionErrorExecutionError) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetErrorMessage sets the ErrorMessage field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *StarlarkExecutionErrorExecutionError) SetErrorMessage(errorMessage string) {
	s.ErrorMessage = errorMessage
	s.require(starlarkExecutionErrorExecutionErrorFieldErrorMessage)
}

func (s *StarlarkExecutionErrorExecutionError) UnmarshalJSON(data []byte) error {
	type unmarshaler StarlarkExecutionErrorExecutionError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StarlarkExecutionErrorExecutionError(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *StarlarkExecutionErrorExecutionError) MarshalJSON() ([]byte, error) {
	type embed StarlarkExecutionErrorExecutionError
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *StarlarkExecutionErrorExecutionError) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

var (
	starlarkInfoFieldInfo = big.NewInt(1 << 0)
)

type StarlarkInfo struct {
	Info *StarlarkInfoInfo `json:"info" url:"info"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *StarlarkInfo) GetInfo() *StarlarkInfoInfo {
	if s == nil {
		return nil
	}
	return s.Info
}

func (s *StarlarkInfo) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StarlarkInfo) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetInfo sets the Info field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *StarlarkInfo) SetInfo(info *StarlarkInfoInfo) {
	s.Info = info
	s.require(starlarkInfoFieldInfo)
}

func (s *StarlarkInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler StarlarkInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StarlarkInfo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *StarlarkInfo) MarshalJSON() ([]byte, error) {
	type embed StarlarkInfo
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *StarlarkInfo) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

var (
	starlarkInfoInfoFieldInstruction = big.NewInt(1 << 0)
)

type StarlarkInfoInfo struct {
	Instruction *StarlarkInfoInfoInstruction `json:"instruction" url:"instruction"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *StarlarkInfoInfo) GetInstruction() *StarlarkInfoInfoInstruction {
	if s == nil {
		return nil
	}
	return s.Instruction
}

func (s *StarlarkInfoInfo) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StarlarkInfoInfo) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetInstruction sets the Instruction field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *StarlarkInfoInfo) SetInstruction(instruction *StarlarkInfoInfoInstruction) {
	s.Instruction = instruction
	s.require(starlarkInfoInfoFieldInstruction)
}

func (s *StarlarkInfoInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler StarlarkInfoInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StarlarkInfoInfo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *StarlarkInfoInfo) MarshalJSON() ([]byte, error) {
	type embed StarlarkInfoInfo
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *StarlarkInfoInfo) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

var (
	starlarkInfoInfoInstructionFieldInfoMessage = big.NewInt(1 << 0)
)

type StarlarkInfoInfoInstruction struct {
	InfoMessage string `json:"info_message" url:"info_message"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *StarlarkInfoInfoInstruction) GetInfoMessage() string {
	if s == nil {
		return ""
	}
	return s.InfoMessage
}

func (s *StarlarkInfoInfoInstruction) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StarlarkInfoInfoInstruction) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetInfoMessage sets the InfoMessage field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *StarlarkInfoInfoInstruction) SetInfoMessage(infoMessage string) {
	s.InfoMessage = infoMessage
	s.require(starlarkInfoInfoInstructionFieldInfoMessage)
}

func (s *StarlarkInfoInfoInstruction) UnmarshalJSON(data []byte) error {
	type unmarshaler StarlarkInfoInfoInstruction
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StarlarkInfoInfoInstruction(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *StarlarkInfoInfoInstruction) MarshalJSON() ([]byte, error) {
	type embed StarlarkInfoInfoInstruction
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *StarlarkInfoInfoInstruction) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

var (
	starlarkInstructionFieldPosition              = big.NewInt(1 << 0)
	starlarkInstructionFieldInstructionName       = big.NewInt(1 << 1)
	starlarkInstructionFieldArguments             = big.NewInt(1 << 2)
	starlarkInstructionFieldExecutableInstruction = big.NewInt(1 << 3)
	starlarkInstructionFieldIsSkipped             = big.NewInt(1 << 4)
)

type StarlarkInstruction struct {
	Position              *StarlarkInstructionPosition   `json:"position,omitempty" url:"position,omitempty"`
	InstructionName       string                         `json:"instruction_name" url:"instruction_name"`
	Arguments             []*StarlarkInstructionArgument `json:"arguments" url:"arguments"`
	ExecutableInstruction string                         `json:"executable_instruction" url:"executable_instruction"`
	IsSkipped             bool                           `json:"is_skipped" url:"is_skipped"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *StarlarkInstruction) GetPosition() *StarlarkInstructionPosition {
	if s == nil {
		return nil
	}
	return s.Position
}

func (s *StarlarkInstruction) GetInstructionName() string {
	if s == nil {
		return ""
	}
	return s.InstructionName
}

func (s *StarlarkInstruction) GetArguments() []*StarlarkInstructionArgument {
	if s == nil {
		return nil
	}
	return s.Arguments
}

func (s *StarlarkInstruction) GetExecutableInstruction() string {
	if s == nil {
		return ""
	}
	return s.ExecutableInstruction
}

func (s *StarlarkInstruction) GetIsSkipped() bool {
	if s == nil {
		return false
	}
	return s.IsSkipped
}

func (s *StarlarkInstruction) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StarlarkInstruction) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetPosition sets the Position field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *StarlarkInstruction) SetPosition(position *StarlarkInstructionPosition) {
	s.Position = position
	s.require(starlarkInstructionFieldPosition)
}

// SetInstructionName sets the InstructionName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *StarlarkInstruction) SetInstructionName(instructionName string) {
	s.InstructionName = instructionName
	s.require(starlarkInstructionFieldInstructionName)
}

// SetArguments sets the Arguments field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *StarlarkInstruction) SetArguments(arguments []*StarlarkInstructionArgument) {
	s.Arguments = arguments
	s.require(starlarkInstructionFieldArguments)
}

// SetExecutableInstruction sets the ExecutableInstruction field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *StarlarkInstruction) SetExecutableInstruction(executableInstruction string) {
	s.ExecutableInstruction = executableInstruction
	s.require(starlarkInstructionFieldExecutableInstruction)
}

// SetIsSkipped sets the IsSkipped field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *StarlarkInstruction) SetIsSkipped(isSkipped bool) {
	s.IsSkipped = isSkipped
	s.require(starlarkInstructionFieldIsSkipped)
}

func (s *StarlarkInstruction) UnmarshalJSON(data []byte) error {
	type unmarshaler StarlarkInstruction
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StarlarkInstruction(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *StarlarkInstruction) MarshalJSON() ([]byte, error) {
	type embed StarlarkInstruction
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *StarlarkInstruction) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

var (
	starlarkInstructionArgumentFieldSerializedArgValue = big.NewInt(1 << 0)
	starlarkInstructionArgumentFieldArgName            = big.NewInt(1 << 1)
	starlarkInstructionArgumentFieldIsRepresentative   = big.NewInt(1 << 2)
)

type StarlarkInstructionArgument struct {
	SerializedArgValue string  `json:"serialized_arg_value" url:"serialized_arg_value"`
	ArgName            *string `json:"arg_name,omitempty" url:"arg_name,omitempty"`
	IsRepresentative   bool    `json:"is_representative" url:"is_representative"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *StarlarkInstructionArgument) GetSerializedArgValue() string {
	if s == nil {
		return ""
	}
	return s.SerializedArgValue
}

func (s *StarlarkInstructionArgument) GetArgName() *string {
	if s == nil {
		return nil
	}
	return s.ArgName
}

func (s *StarlarkInstructionArgument) GetIsRepresentative() bool {
	if s == nil {
		return false
	}
	return s.IsRepresentative
}

func (s *StarlarkInstructionArgument) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StarlarkInstructionArgument) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetSerializedArgValue sets the SerializedArgValue field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *StarlarkInstructionArgument) SetSerializedArgValue(serializedArgValue string) {
	s.SerializedArgValue = serializedArgValue
	s.require(starlarkInstructionArgumentFieldSerializedArgValue)
}

// SetArgName sets the ArgName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *StarlarkInstructionArgument) SetArgName(argName *string) {
	s.ArgName = argName
	s.require(starlarkInstructionArgumentFieldArgName)
}

// SetIsRepresentative sets the IsRepresentative field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *StarlarkInstructionArgument) SetIsRepresentative(isRepresentative bool) {
	s.IsRepresentative = isRepresentative
	s.require(starlarkInstructionArgumentFieldIsRepresentative)
}

func (s *StarlarkInstructionArgument) UnmarshalJSON(data []byte) error {
	type unmarshaler StarlarkInstructionArgument
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StarlarkInstructionArgument(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *StarlarkInstructionArgument) MarshalJSON() ([]byte, error) {
	type embed StarlarkInstructionArgument
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *StarlarkInstructionArgument) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

var (
	starlarkInstructionPositionFieldFilename = big.NewInt(1 << 0)
	starlarkInstructionPositionFieldLine     = big.NewInt(1 << 1)
	starlarkInstructionPositionFieldColumn   = big.NewInt(1 << 2)
)

type StarlarkInstructionPosition struct {
	Filename string `json:"filename" url:"filename"`
	Line     int    `json:"line" url:"line"`
	Column   int    `json:"column" url:"column"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *StarlarkInstructionPosition) GetFilename() string {
	if s == nil {
		return ""
	}
	return s.Filename
}

func (s *StarlarkInstructionPosition) GetLine() int {
	if s == nil {
		return 0
	}
	return s.Line
}

func (s *StarlarkInstructionPosition) GetColumn() int {
	if s == nil {
		return 0
	}
	return s.Column
}

func (s *StarlarkInstructionPosition) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StarlarkInstructionPosition) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetFilename sets the Filename field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *StarlarkInstructionPosition) SetFilename(filename string) {
	s.Filename = filename
	s.require(starlarkInstructionPositionFieldFilename)
}

// SetLine sets the Line field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *StarlarkInstructionPosition) SetLine(line int) {
	s.Line = line
	s.require(starlarkInstructionPositionFieldLine)
}

// SetColumn sets the Column field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *StarlarkInstructionPosition) SetColumn(column int) {
	s.Column = column
	s.require(starlarkInstructionPositionFieldColumn)
}

func (s *StarlarkInstructionPosition) UnmarshalJSON(data []byte) error {
	type unmarshaler StarlarkInstructionPosition
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StarlarkInstructionPosition(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *StarlarkInstructionPosition) MarshalJSON() ([]byte, error) {
	type embed StarlarkInstructionPosition
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *StarlarkInstructionPosition) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

var (
	starlarkInstructionResultFieldInstructionResult = big.NewInt(1 << 0)
)

type StarlarkInstructionResult struct {
	InstructionResult *StarlarkInstructionResultInstructionResult `json:"instruction_result" url:"instruction_result"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *StarlarkInstructionResult) GetInstructionResult() *StarlarkInstructionResultInstructionResult {
	if s == nil {
		return nil
	}
	return s.InstructionResult
}

func (s *StarlarkInstructionResult) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StarlarkInstructionResult) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetInstructionResult sets the InstructionResult field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *StarlarkInstructionResult) SetInstructionResult(instructionResult *StarlarkInstructionResultInstructionResult) {
	s.InstructionResult = instructionResult
	s.require(starlarkInstructionResultFieldInstructionResult)
}

func (s *StarlarkInstructionResult) UnmarshalJSON(data []byte) error {
	type unmarshaler StarlarkInstructionResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StarlarkInstructionResult(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *StarlarkInstructionResult) MarshalJSON() ([]byte, error) {
	type embed StarlarkInstructionResult
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *StarlarkInstructionResult) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

var (
	starlarkInstructionResultInstructionResultFieldSerializedInstructionResult = big.NewInt(1 << 0)
)

type StarlarkInstructionResultInstructionResult struct {
	SerializedInstructionResult string `json:"serialized_instruction_result" url:"serialized_instruction_result"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *StarlarkInstructionResultInstructionResult) GetSerializedInstructionResult() string {
	if s == nil {
		return ""
	}
	return s.SerializedInstructionResult
}

func (s *StarlarkInstructionResultInstructionResult) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StarlarkInstructionResultInstructionResult) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetSerializedInstructionResult sets the SerializedInstructionResult field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *StarlarkInstructionResultInstructionResult) SetSerializedInstructionResult(serializedInstructionResult string) {
	s.SerializedInstructionResult = serializedInstructionResult
	s.require(starlarkInstructionResultInstructionResultFieldSerializedInstructionResult)
}

func (s *StarlarkInstructionResultInstructionResult) UnmarshalJSON(data []byte) error {
	type unmarshaler StarlarkInstructionResultInstructionResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StarlarkInstructionResultInstructionResult(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *StarlarkInstructionResultInstructionResult) MarshalJSON() ([]byte, error) {
	type embed StarlarkInstructionResultInstructionResult
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *StarlarkInstructionResultInstructionResult) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

var (
	starlarkInterpretationErrorFieldInterpretationError = big.NewInt(1 << 0)
)

type StarlarkInterpretationError struct {
	InterpretationError *StarlarkInterpretationErrorInterpretationError `json:"interpretation_error" url:"interpretation_error"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *StarlarkInterpretationError) GetInterpretationError() *StarlarkInterpretationErrorInterpretationError {
	if s == nil {
		return nil
	}
	return s.InterpretationError
}

func (s *StarlarkInterpretationError) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StarlarkInterpretationError) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetInterpretationError sets the InterpretationError field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *StarlarkInterpretationError) SetInterpretationError(interpretationError *StarlarkInterpretationErrorInterpretationError) {
	s.InterpretationError = interpretationError
	s.require(starlarkInterpretationErrorFieldInterpretationError)
}

func (s *StarlarkInterpretationError) UnmarshalJSON(data []byte) error {
	type unmarshaler StarlarkInterpretationError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StarlarkInterpretationError(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *StarlarkInterpretationError) MarshalJSON() ([]byte, error) {
	type embed StarlarkInterpretationError
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *StarlarkInterpretationError) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

var (
	starlarkInterpretationErrorInterpretationErrorFieldErrorMessage = big.NewInt(1 << 0)
)

type StarlarkInterpretationErrorInterpretationError struct {
	ErrorMessage string `json:"error_message" url:"error_message"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *StarlarkInterpretationErrorInterpretationError) GetErrorMessage() string {
	if s == nil {
		return ""
	}
	return s.ErrorMessage
}

func (s *StarlarkInterpretationErrorInterpretationError) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StarlarkInterpretationErrorInterpretationError) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetErrorMessage sets the ErrorMessage field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *StarlarkInterpretationErrorInterpretationError) SetErrorMessage(errorMessage string) {
	s.ErrorMessage = errorMessage
	s.require(starlarkInterpretationErrorInterpretationErrorFieldErrorMessage)
}

func (s *StarlarkInterpretationErrorInterpretationError) UnmarshalJSON(data []byte) error {
	type unmarshaler StarlarkInterpretationErrorInterpretationError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StarlarkInterpretationErrorInterpretationError(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *StarlarkInterpretationErrorInterpretationError) MarshalJSON() ([]byte, error) {
	type embed StarlarkInterpretationErrorInterpretationError
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *StarlarkInterpretationErrorInterpretationError) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

var (
	starlarkRunFinishedEventFieldRunFinishedEvent = big.NewInt(1 << 0)
)

type StarlarkRunFinishedEvent struct {
	RunFinishedEvent *StarlarkRunFinishedEventRunFinishedEvent `json:"run_finished_event" url:"run_finished_event"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *StarlarkRunFinishedEvent) GetRunFinishedEvent() *StarlarkRunFinishedEventRunFinishedEvent {
	if s == nil {
		return nil
	}
	return s.RunFinishedEvent
}

func (s *StarlarkRunFinishedEvent) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StarlarkRunFinishedEvent) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetRunFinishedEvent sets the RunFinishedEvent field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *StarlarkRunFinishedEvent) SetRunFinishedEvent(runFinishedEvent *StarlarkRunFinishedEventRunFinishedEvent) {
	s.RunFinishedEvent = runFinishedEvent
	s.require(starlarkRunFinishedEventFieldRunFinishedEvent)
}

func (s *StarlarkRunFinishedEvent) UnmarshalJSON(data []byte) error {
	type unmarshaler StarlarkRunFinishedEvent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StarlarkRunFinishedEvent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *StarlarkRunFinishedEvent) MarshalJSON() ([]byte, error) {
	type embed StarlarkRunFinishedEvent
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *StarlarkRunFinishedEvent) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

var (
	starlarkRunFinishedEventRunFinishedEventFieldIsRunSuccessful  = big.NewInt(1 << 0)
	starlarkRunFinishedEventRunFinishedEventFieldSerializedOutput = big.NewInt(1 << 1)
)

type StarlarkRunFinishedEventRunFinishedEvent struct {
	IsRunSuccessful  bool    `json:"is_run_successful" url:"is_run_successful"`
	SerializedOutput *string `json:"serialized_output,omitempty" url:"serialized_output,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *StarlarkRunFinishedEventRunFinishedEvent) GetIsRunSuccessful() bool {
	if s == nil {
		return false
	}
	return s.IsRunSuccessful
}

func (s *StarlarkRunFinishedEventRunFinishedEvent) GetSerializedOutput() *string {
	if s == nil {
		return nil
	}
	return s.SerializedOutput
}

func (s *StarlarkRunFinishedEventRunFinishedEvent) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StarlarkRunFinishedEventRunFinishedEvent) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetIsRunSuccessful sets the IsRunSuccessful field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *StarlarkRunFinishedEventRunFinishedEvent) SetIsRunSuccessful(isRunSuccessful bool) {
	s.IsRunSuccessful = isRunSuccessful
	s.require(starlarkRunFinishedEventRunFinishedEventFieldIsRunSuccessful)
}

// SetSerializedOutput sets the SerializedOutput field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *StarlarkRunFinishedEventRunFinishedEvent) SetSerializedOutput(serializedOutput *string) {
	s.SerializedOutput = serializedOutput
	s.require(starlarkRunFinishedEventRunFinishedEventFieldSerializedOutput)
}

func (s *StarlarkRunFinishedEventRunFinishedEvent) UnmarshalJSON(data []byte) error {
	type unmarshaler StarlarkRunFinishedEventRunFinishedEvent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StarlarkRunFinishedEventRunFinishedEvent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *StarlarkRunFinishedEventRunFinishedEvent) MarshalJSON() ([]byte, error) {
	type embed StarlarkRunFinishedEventRunFinishedEvent
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *StarlarkRunFinishedEventRunFinishedEvent) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

var (
	starlarkRunProgressFieldProgressInfo = big.NewInt(1 << 0)
)

type StarlarkRunProgress struct {
	ProgressInfo *StarlarkRunProgressProgressInfo `json:"progress_info" url:"progress_info"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *StarlarkRunProgress) GetProgressInfo() *StarlarkRunProgressProgressInfo {
	if s == nil {
		return nil
	}
	return s.ProgressInfo
}

func (s *StarlarkRunProgress) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StarlarkRunProgress) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetProgressInfo sets the ProgressInfo field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *StarlarkRunProgress) SetProgressInfo(progressInfo *StarlarkRunProgressProgressInfo) {
	s.ProgressInfo = progressInfo
	s.require(starlarkRunProgressFieldProgressInfo)
}

func (s *StarlarkRunProgress) UnmarshalJSON(data []byte) error {
	type unmarshaler StarlarkRunProgress
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StarlarkRunProgress(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *StarlarkRunProgress) MarshalJSON() ([]byte, error) {
	type embed StarlarkRunProgress
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *StarlarkRunProgress) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

var (
	starlarkRunProgressProgressInfoFieldCurrentStepInfo   = big.NewInt(1 << 0)
	starlarkRunProgressProgressInfoFieldTotalSteps        = big.NewInt(1 << 1)
	starlarkRunProgressProgressInfoFieldCurrentStepNumber = big.NewInt(1 << 2)
)

type StarlarkRunProgressProgressInfo struct {
	CurrentStepInfo   []string `json:"current_step_info" url:"current_step_info"`
	TotalSteps        int      `json:"total_steps" url:"total_steps"`
	CurrentStepNumber int      `json:"current_step_number" url:"current_step_number"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *StarlarkRunProgressProgressInfo) GetCurrentStepInfo() []string {
	if s == nil {
		return nil
	}
	return s.CurrentStepInfo
}

func (s *StarlarkRunProgressProgressInfo) GetTotalSteps() int {
	if s == nil {
		return 0
	}
	return s.TotalSteps
}

func (s *StarlarkRunProgressProgressInfo) GetCurrentStepNumber() int {
	if s == nil {
		return 0
	}
	return s.CurrentStepNumber
}

func (s *StarlarkRunProgressProgressInfo) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StarlarkRunProgressProgressInfo) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetCurrentStepInfo sets the CurrentStepInfo field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *StarlarkRunProgressProgressInfo) SetCurrentStepInfo(currentStepInfo []string) {
	s.CurrentStepInfo = currentStepInfo
	s.require(starlarkRunProgressProgressInfoFieldCurrentStepInfo)
}

// SetTotalSteps sets the TotalSteps field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *StarlarkRunProgressProgressInfo) SetTotalSteps(totalSteps int) {
	s.TotalSteps = totalSteps
	s.require(starlarkRunProgressProgressInfoFieldTotalSteps)
}

// SetCurrentStepNumber sets the CurrentStepNumber field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *StarlarkRunProgressProgressInfo) SetCurrentStepNumber(currentStepNumber int) {
	s.CurrentStepNumber = currentStepNumber
	s.require(starlarkRunProgressProgressInfoFieldCurrentStepNumber)
}

func (s *StarlarkRunProgressProgressInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler StarlarkRunProgressProgressInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StarlarkRunProgressProgressInfo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *StarlarkRunProgressProgressInfo) MarshalJSON() ([]byte, error) {
	type embed StarlarkRunProgressProgressInfo
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *StarlarkRunProgressProgressInfo) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Starlark Execution Response
type StarlarkRunResponseLine struct {
	StarlarkInstruction       *StarlarkInstruction
	StarlarkError             *StarlarkError
	StarlarkRunProgress       *StarlarkRunProgress
	StarlarkInstructionResult *StarlarkInstructionResult
	StarlarkRunFinishedEvent  *StarlarkRunFinishedEvent
	StarlarkWarning           *StarlarkWarning
	StarlarkInfo              *StarlarkInfo

	typ string
}

func (s *StarlarkRunResponseLine) GetStarlarkInstruction() *StarlarkInstruction {
	if s == nil {
		return nil
	}
	return s.StarlarkInstruction
}

func (s *StarlarkRunResponseLine) GetStarlarkError() *StarlarkError {
	if s == nil {
		return nil
	}
	return s.StarlarkError
}

func (s *StarlarkRunResponseLine) GetStarlarkRunProgress() *StarlarkRunProgress {
	if s == nil {
		return nil
	}
	return s.StarlarkRunProgress
}

func (s *StarlarkRunResponseLine) GetStarlarkInstructionResult() *StarlarkInstructionResult {
	if s == nil {
		return nil
	}
	return s.StarlarkInstructionResult
}

func (s *StarlarkRunResponseLine) GetStarlarkRunFinishedEvent() *StarlarkRunFinishedEvent {
	if s == nil {
		return nil
	}
	return s.StarlarkRunFinishedEvent
}

func (s *StarlarkRunResponseLine) GetStarlarkWarning() *StarlarkWarning {
	if s == nil {
		return nil
	}
	return s.StarlarkWarning
}

func (s *StarlarkRunResponseLine) GetStarlarkInfo() *StarlarkInfo {
	if s == nil {
		return nil
	}
	return s.StarlarkInfo
}

func (s *StarlarkRunResponseLine) UnmarshalJSON(data []byte) error {
	valueStarlarkInstruction := new(StarlarkInstruction)
	if err := json.Unmarshal(data, &valueStarlarkInstruction); err == nil {
		s.typ = "StarlarkInstruction"
		s.StarlarkInstruction = valueStarlarkInstruction
		return nil
	}
	valueStarlarkError := new(StarlarkError)
	if err := json.Unmarshal(data, &valueStarlarkError); err == nil {
		s.typ = "StarlarkError"
		s.StarlarkError = valueStarlarkError
		return nil
	}
	valueStarlarkRunProgress := new(StarlarkRunProgress)
	if err := json.Unmarshal(data, &valueStarlarkRunProgress); err == nil {
		s.typ = "StarlarkRunProgress"
		s.StarlarkRunProgress = valueStarlarkRunProgress
		return nil
	}
	valueStarlarkInstructionResult := new(StarlarkInstructionResult)
	if err := json.Unmarshal(data, &valueStarlarkInstructionResult); err == nil {
		s.typ = "StarlarkInstructionResult"
		s.StarlarkInstructionResult = valueStarlarkInstructionResult
		return nil
	}
	valueStarlarkRunFinishedEvent := new(StarlarkRunFinishedEvent)
	if err := json.Unmarshal(data, &valueStarlarkRunFinishedEvent); err == nil {
		s.typ = "StarlarkRunFinishedEvent"
		s.StarlarkRunFinishedEvent = valueStarlarkRunFinishedEvent
		return nil
	}
	valueStarlarkWarning := new(StarlarkWarning)
	if err := json.Unmarshal(data, &valueStarlarkWarning); err == nil {
		s.typ = "StarlarkWarning"
		s.StarlarkWarning = valueStarlarkWarning
		return nil
	}
	valueStarlarkInfo := new(StarlarkInfo)
	if err := json.Unmarshal(data, &valueStarlarkInfo); err == nil {
		s.typ = "StarlarkInfo"
		s.StarlarkInfo = valueStarlarkInfo
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s StarlarkRunResponseLine) MarshalJSON() ([]byte, error) {
	if s.typ == "StarlarkInstruction" || s.StarlarkInstruction != nil {
		return json.Marshal(s.StarlarkInstruction)
	}
	if s.typ == "StarlarkError" || s.StarlarkError != nil {
		return json.Marshal(s.StarlarkError)
	}
	if s.typ == "StarlarkRunProgress" || s.StarlarkRunProgress != nil {
		return json.Marshal(s.StarlarkRunProgress)
	}
	if s.typ == "StarlarkInstructionResult" || s.StarlarkInstructionResult != nil {
		return json.Marshal(s.StarlarkInstructionResult)
	}
	if s.typ == "StarlarkRunFinishedEvent" || s.StarlarkRunFinishedEvent != nil {
		return json.Marshal(s.StarlarkRunFinishedEvent)
	}
	if s.typ == "StarlarkWarning" || s.StarlarkWarning != nil {
		return json.Marshal(s.StarlarkWarning)
	}
	if s.typ == "StarlarkInfo" || s.StarlarkInfo != nil {
		return json.Marshal(s.StarlarkInfo)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", s)
}

type StarlarkRunResponseLineVisitor interface {
	VisitStarlarkInstruction(*StarlarkInstruction) error
	VisitStarlarkError(*StarlarkError) error
	VisitStarlarkRunProgress(*StarlarkRunProgress) error
	VisitStarlarkInstructionResult(*StarlarkInstructionResult) error
	VisitStarlarkRunFinishedEvent(*StarlarkRunFinishedEvent) error
	VisitStarlarkWarning(*StarlarkWarning) error
	VisitStarlarkInfo(*StarlarkInfo) error
}

func (s *StarlarkRunResponseLine) Accept(visitor StarlarkRunResponseLineVisitor) error {
	if s.typ == "StarlarkInstruction" || s.StarlarkInstruction != nil {
		return visitor.VisitStarlarkInstruction(s.StarlarkInstruction)
	}
	if s.typ == "StarlarkError" || s.StarlarkError != nil {
		return visitor.VisitStarlarkError(s.StarlarkError)
	}
	if s.typ == "StarlarkRunProgress" || s.StarlarkRunProgress != nil {
		return visitor.VisitStarlarkRunProgress(s.StarlarkRunProgress)
	}
	if s.typ == "StarlarkInstructionResult" || s.StarlarkInstructionResult != nil {
		return visitor.VisitStarlarkInstructionResult(s.StarlarkInstructionResult)
	}
	if s.typ == "StarlarkRunFinishedEvent" || s.StarlarkRunFinishedEvent != nil {
		return visitor.VisitStarlarkRunFinishedEvent(s.StarlarkRunFinishedEvent)
	}
	if s.typ == "StarlarkWarning" || s.StarlarkWarning != nil {
		return visitor.VisitStarlarkWarning(s.StarlarkWarning)
	}
	if s.typ == "StarlarkInfo" || s.StarlarkInfo != nil {
		return visitor.VisitStarlarkInfo(s.StarlarkInfo)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", s)
}

var (
	starlarkValidationErrorFieldValidationError = big.NewInt(1 << 0)
)

type StarlarkValidationError struct {
	ValidationError *StarlarkValidationErrorValidationError `json:"validation_error" url:"validation_error"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *StarlarkValidationError) GetValidationError() *StarlarkValidationErrorValidationError {
	if s == nil {
		return nil
	}
	return s.ValidationError
}

func (s *StarlarkValidationError) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StarlarkValidationError) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetValidationError sets the ValidationError field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *StarlarkValidationError) SetValidationError(validationError *StarlarkValidationErrorValidationError) {
	s.ValidationError = validationError
	s.require(starlarkValidationErrorFieldValidationError)
}

func (s *StarlarkValidationError) UnmarshalJSON(data []byte) error {
	type unmarshaler StarlarkValidationError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StarlarkValidationError(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *StarlarkValidationError) MarshalJSON() ([]byte, error) {
	type embed StarlarkValidationError
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *StarlarkValidationError) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

var (
	starlarkValidationErrorValidationErrorFieldErrorMessage = big.NewInt(1 << 0)
)

type StarlarkValidationErrorValidationError struct {
	ErrorMessage string `json:"error_message" url:"error_message"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *StarlarkValidationErrorValidationError) GetErrorMessage() string {
	if s == nil {
		return ""
	}
	return s.ErrorMessage
}

func (s *StarlarkValidationErrorValidationError) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StarlarkValidationErrorValidationError) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetErrorMessage sets the ErrorMessage field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *StarlarkValidationErrorValidationError) SetErrorMessage(errorMessage string) {
	s.ErrorMessage = errorMessage
	s.require(starlarkValidationErrorValidationErrorFieldErrorMessage)
}

func (s *StarlarkValidationErrorValidationError) UnmarshalJSON(data []byte) error {
	type unmarshaler StarlarkValidationErrorValidationError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StarlarkValidationErrorValidationError(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *StarlarkValidationErrorValidationError) MarshalJSON() ([]byte, error) {
	type embed StarlarkValidationErrorValidationError
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *StarlarkValidationErrorValidationError) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

var (
	starlarkWarningFieldWarning = big.NewInt(1 << 0)
)

type StarlarkWarning struct {
	Warning *StarlarkWarningWarning `json:"warning" url:"warning"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *StarlarkWarning) GetWarning() *StarlarkWarningWarning {
	if s == nil {
		return nil
	}
	return s.Warning
}

func (s *StarlarkWarning) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StarlarkWarning) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetWarning sets the Warning field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *StarlarkWarning) SetWarning(warning *StarlarkWarningWarning) {
	s.Warning = warning
	s.require(starlarkWarningFieldWarning)
}

func (s *StarlarkWarning) UnmarshalJSON(data []byte) error {
	type unmarshaler StarlarkWarning
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StarlarkWarning(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *StarlarkWarning) MarshalJSON() ([]byte, error) {
	type embed StarlarkWarning
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *StarlarkWarning) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

var (
	starlarkWarningWarningFieldWarningMessage = big.NewInt(1 << 0)
)

type StarlarkWarningWarning struct {
	WarningMessage string `json:"warning_message" url:"warning_message"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *StarlarkWarningWarning) GetWarningMessage() string {
	if s == nil {
		return ""
	}
	return s.WarningMessage
}

func (s *StarlarkWarningWarning) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StarlarkWarningWarning) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetWarningMessage sets the WarningMessage field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *StarlarkWarningWarning) SetWarningMessage(warningMessage string) {
	s.WarningMessage = warningMessage
	s.require(starlarkWarningWarningFieldWarningMessage)
}

func (s *StarlarkWarningWarning) UnmarshalJSON(data []byte) error {
	type unmarshaler StarlarkWarningWarning
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StarlarkWarningWarning(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *StarlarkWarningWarning) MarshalJSON() ([]byte, error) {
	type embed StarlarkWarningWarning
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *StarlarkWarningWarning) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type Timestamp = time.Time
