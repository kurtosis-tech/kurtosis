// Code generated by Fern. DO NOT EDIT.

package enclave

import (
	bytes "bytes"
	context "context"
	io "io"
	http "net/http"

	sdk "github.com/kurtosis-tech/kurtosis/sdks/go"
	core "github.com/kurtosis-tech/kurtosis/sdks/go/core"
	internal "github.com/kurtosis-tech/kurtosis/sdks/go/internal"
	option "github.com/kurtosis-tech/kurtosis/sdks/go/option"
)

type RawClient struct {
	baseURL string
	caller  *internal.Caller
	options *core.RequestOptions
}

func NewRawClient(options *core.RequestOptions) *RawClient {
	return &RawClient{
		options: options,
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
	}
}

func (r *RawClient) GetLastStarlarkRun(
	ctx context.Context,
	// UUID, shortened UUID, or name of the enclave
	enclaveIdentifier string,
	opts ...option.RequestOption,
) (*core.Response[*sdk.StarlarkDescription], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"http://engine.localhost:9779/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/enclaves/%v/starlark",
		enclaveIdentifier,
	)
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	var response *sdk.StarlarkDescription
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*sdk.StarlarkDescription]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) UploadsAStarlarkPackage(
	ctx context.Context,
	// UUID, shortened UUID, or name of the enclave
	enclaveIdentifier string,
	request *sdk.PostEnclavesEnclaveIdentifierStarlarkPackagesRequest,
	opts ...option.RequestOption,
) (*core.Response[any], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"http://engine.localhost:9779/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/enclaves/%v/starlark/packages",
		enclaveIdentifier,
	)
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	writer := internal.NewMultipartWriter()
	if err := writer.Close(); err != nil {
		return nil, err
	}
	headers.Set("Content-Type", writer.ContentType())

	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         writer.Buffer(),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[any]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       nil,
	}, nil
}

func (r *RawClient) ExecutesAStarlarkPackageOnTheUsersBehalf(
	ctx context.Context,
	// UUID, shortened UUID, or name of the enclave
	enclaveIdentifier string,
	// The package identifier that will be executed
	packageId string,
	request *sdk.RunStarlarkPackage,
	opts ...option.RequestOption,
) (*core.Response[*sdk.StarlarkRunResponse], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"http://engine.localhost:9779/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/enclaves/%v/starlark/packages/%v",
		enclaveIdentifier,
		packageId,
	)
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	headers.Add("Content-Type", "application/json")
	var response *sdk.StarlarkRunResponse
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*sdk.StarlarkRunResponse]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) ExecutesAStarlarkScriptOnTheUsersBehalf(
	ctx context.Context,
	// UUID, shortened UUID, or name of the enclave
	enclaveIdentifier string,
	request *sdk.RunStarlarkScript,
	opts ...option.RequestOption,
) (*core.Response[*sdk.StarlarkRunResponse], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"http://engine.localhost:9779/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/enclaves/%v/starlark/scripts",
		enclaveIdentifier,
	)
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	headers.Add("Content-Type", "application/json")
	var response *sdk.StarlarkRunResponse
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*sdk.StarlarkRunResponse]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) ReturnsDetailedInformationAboutASpecificService(
	ctx context.Context,
	// UUID, shortened UUID, or name of the enclave
	enclaveIdentifier string,
	// The service identifier of the container that the command should be executed in
	serviceIdentifier string,
	opts ...option.RequestOption,
) (*core.Response[*sdk.ServiceInfo], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"http://engine.localhost:9779/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/enclaves/%v/services/%v",
		enclaveIdentifier,
		serviceIdentifier,
	)
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	var response *sdk.ServiceInfo
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*sdk.ServiceInfo]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) ReturnsInformationAboutAllExistingHistoricalServices(
	ctx context.Context,
	// UUID, shortened UUID, or name of the enclave
	enclaveIdentifier string,
	opts ...option.RequestOption,
) (*core.Response[[]*sdk.ServiceIdentifiers], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"http://engine.localhost:9779/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/enclaves/%v/services/history",
		enclaveIdentifier,
	)
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	var response []*sdk.ServiceIdentifiers
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[[]*sdk.ServiceIdentifiers]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) ReturnsDetailedInformationAboutAllsServicesWithinTheEnclave(
	ctx context.Context,
	// UUID, shortened UUID, or name of the enclave
	enclaveIdentifier string,
	request *sdk.GetEnclavesEnclaveIdentifierServicesRequest,
	opts ...option.RequestOption,
) (*core.Response[map[string]*sdk.ServiceInfo], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"http://engine.localhost:9779/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/enclaves/%v/services",
		enclaveIdentifier,
	)
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	var response map[string]*sdk.ServiceInfo
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[map[string]*sdk.ServiceInfo]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) ExecutesTheGivenCommandInsideARunningServicesContainer(
	ctx context.Context,
	// UUID, shortened UUID, or name of the enclave
	enclaveIdentifier string,
	// The service identifier of the container that the command should be executed in
	serviceIdentifier string,
	request *sdk.ExecCommand,
	opts ...option.RequestOption,
) (*core.Response[*sdk.ExecCommandResult], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"http://engine.localhost:9779/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/enclaves/%v/services/%v/command",
		enclaveIdentifier,
		serviceIdentifier,
	)
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	headers.Add("Content-Type", "application/json")
	var response *sdk.ExecCommandResult
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*sdk.ExecCommandResult]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) CheckForServiceAvailability(
	ctx context.Context,
	// UUID, shortened UUID, or name of the enclave
	enclaveIdentifier string,
	// The service identifier of the container that the command should be executed in
	serviceIdentifier string,
	// The port number to check availability
	portNumber int,
	request *sdk.GetEnclavesEnclaveIdentifierServicesServiceIdentifierEndpointsPortNumberAvailabilityRequest,
	opts ...option.RequestOption,
) (*core.Response[any], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"http://engine.localhost:9779/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/enclaves/%v/services/%v/endpoints/%v/availability",
		enclaveIdentifier,
		serviceIdentifier,
		portNumber,
	)
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[any]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       nil,
	}, nil
}

func (r *RawClient) ListAllFilesArtifacts(
	ctx context.Context,
	// UUID, shortened UUID, or name of the enclave
	enclaveIdentifier string,
	opts ...option.RequestOption,
) (*core.Response[[]*sdk.FileArtifactReference], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"http://engine.localhost:9779/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/enclaves/%v/artifacts",
		enclaveIdentifier,
	)
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	var response []*sdk.FileArtifactReference
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[[]*sdk.FileArtifactReference]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) InspectTheContentOfAFileArtifact(
	ctx context.Context,
	// UUID, shortened UUID, or name of the enclave
	enclaveIdentifier string,
	// The artifact name or uuid
	artifactIdentifier string,
	opts ...option.RequestOption,
) (*core.Response[[]*sdk.FileArtifactDescription], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"http://engine.localhost:9779/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/enclaves/%v/artifacts/%v",
		enclaveIdentifier,
		artifactIdentifier,
	)
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	var response []*sdk.FileArtifactDescription
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[[]*sdk.FileArtifactDescription]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) DownloadsAFilesArtifactFromTheKurtosisFileSystem(
	ctx context.Context,
	// UUID, shortened UUID, or name of the enclave
	enclaveIdentifier string,
	// The artifact name or uuid
	artifactIdentifier string,
	opts ...option.RequestOption,
) (*core.Response[io.Reader], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"http://engine.localhost:9779/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/enclaves/%v/artifacts/%v/download",
		enclaveIdentifier,
		artifactIdentifier,
	)
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	response := bytes.NewBuffer(nil)
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        response,
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[io.Reader]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) UploadsLocalFileArtifactToTheKurtosisFileSystem(
	ctx context.Context,
	// UUID, shortened UUID, or name of the enclave
	enclaveIdentifier string,
	request *sdk.PostEnclavesEnclaveIdentifierArtifactsLocalFileRequest,
	opts ...option.RequestOption,
) (*core.Response[map[string]*sdk.FileArtifactUploadResult], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"http://engine.localhost:9779/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/enclaves/%v/artifacts/local-file",
		enclaveIdentifier,
	)
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	writer := internal.NewMultipartWriter()
	if err := writer.Close(); err != nil {
		return nil, err
	}
	headers.Set("Content-Type", writer.ContentType())

	var response map[string]*sdk.FileArtifactUploadResult
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         writer.Buffer(),
			Response:        &response,
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[map[string]*sdk.FileArtifactUploadResult]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) AddRemoteFileToKurtosisFileSystem(
	ctx context.Context,
	// UUID, shortened UUID, or name of the enclave
	enclaveIdentifier string,
	request *sdk.StoreWebFilesArtifact,
	opts ...option.RequestOption,
) (*core.Response[*sdk.FileArtifactReference], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"http://engine.localhost:9779/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/enclaves/%v/artifacts/remote-file",
		enclaveIdentifier,
	)
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	headers.Add("Content-Type", "application/json")
	var response *sdk.FileArtifactReference
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*sdk.FileArtifactReference]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) AddServicesFileToKurtosisFileSystem(
	ctx context.Context,
	// UUID, shortened UUID, or name of the enclave
	enclaveIdentifier string,
	// The service identifier of the container that the command should be executed in
	serviceIdentifier string,
	request *sdk.StoreFilesArtifactFromService,
	opts ...option.RequestOption,
) (*core.Response[*sdk.FileArtifactReference], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"http://engine.localhost:9779/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/enclaves/%v/artifacts/services/%v",
		enclaveIdentifier,
		serviceIdentifier,
	)
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	headers.Add("Content-Type", "application/json")
	var response *sdk.FileArtifactReference
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*sdk.FileArtifactReference]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) UserServicesPortForwarding(
	ctx context.Context,
	// UUID, shortened UUID, or name of the enclave
	enclaveIdentifier string,
	request *sdk.Connect,
	opts ...option.RequestOption,
) (*core.Response[any], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"http://engine.localhost:9779/api",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/enclaves/%v/services/connection",
		enclaveIdentifier,
	)
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[any]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       nil,
	}, nil
}
