// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	big "math/big"
	time "time"

	internal "github.com/kurtosis-tech/kurtosis/sdks/go/internal"
)

var (
	getEnclavesEnclaveIdentifierLogsRequestFieldServiceUuidSet     = big.NewInt(1 << 0)
	getEnclavesEnclaveIdentifierLogsRequestFieldFollowLogs         = big.NewInt(1 << 1)
	getEnclavesEnclaveIdentifierLogsRequestFieldConjunctiveFilters = big.NewInt(1 << 2)
	getEnclavesEnclaveIdentifierLogsRequestFieldReturnAllLogs      = big.NewInt(1 << 3)
	getEnclavesEnclaveIdentifierLogsRequestFieldNumLogLines        = big.NewInt(1 << 4)
)

type GetEnclavesEnclaveIdentifierLogsRequest struct {
	ServiceUuidSet     []*string        `json:"-" url:"service_uuid_set,omitempty"`
	FollowLogs         *bool            `json:"-" url:"follow_logs,omitempty"`
	ConjunctiveFilters []*LogLineFilter `json:"-" url:"conjunctive_filters,omitempty"`
	ReturnAllLogs      *bool            `json:"-" url:"return_all_logs,omitempty"`
	NumLogLines        *int             `json:"-" url:"num_log_lines,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (g *GetEnclavesEnclaveIdentifierLogsRequest) require(field *big.Int) {
	if g.explicitFields == nil {
		g.explicitFields = big.NewInt(0)
	}
	g.explicitFields.Or(g.explicitFields, field)
}

// SetServiceUuidSet sets the ServiceUuidSet field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetEnclavesEnclaveIdentifierLogsRequest) SetServiceUuidSet(serviceUuidSet []*string) {
	g.ServiceUuidSet = serviceUuidSet
	g.require(getEnclavesEnclaveIdentifierLogsRequestFieldServiceUuidSet)
}

// SetFollowLogs sets the FollowLogs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetEnclavesEnclaveIdentifierLogsRequest) SetFollowLogs(followLogs *bool) {
	g.FollowLogs = followLogs
	g.require(getEnclavesEnclaveIdentifierLogsRequestFieldFollowLogs)
}

// SetConjunctiveFilters sets the ConjunctiveFilters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetEnclavesEnclaveIdentifierLogsRequest) SetConjunctiveFilters(conjunctiveFilters []*LogLineFilter) {
	g.ConjunctiveFilters = conjunctiveFilters
	g.require(getEnclavesEnclaveIdentifierLogsRequestFieldConjunctiveFilters)
}

// SetReturnAllLogs sets the ReturnAllLogs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetEnclavesEnclaveIdentifierLogsRequest) SetReturnAllLogs(returnAllLogs *bool) {
	g.ReturnAllLogs = returnAllLogs
	g.require(getEnclavesEnclaveIdentifierLogsRequestFieldReturnAllLogs)
}

// SetNumLogLines sets the NumLogLines field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetEnclavesEnclaveIdentifierLogsRequest) SetNumLogLines(numLogLines *int) {
	g.NumLogLines = numLogLines
	g.require(getEnclavesEnclaveIdentifierLogsRequestFieldNumLogLines)
}

var (
	getEnclavesEnclaveIdentifierServicesServiceIdentifierLogsRequestFieldFollowLogs         = big.NewInt(1 << 0)
	getEnclavesEnclaveIdentifierServicesServiceIdentifierLogsRequestFieldConjunctiveFilters = big.NewInt(1 << 1)
	getEnclavesEnclaveIdentifierServicesServiceIdentifierLogsRequestFieldReturnAllLogs      = big.NewInt(1 << 2)
	getEnclavesEnclaveIdentifierServicesServiceIdentifierLogsRequestFieldNumLogLines        = big.NewInt(1 << 3)
)

type GetEnclavesEnclaveIdentifierServicesServiceIdentifierLogsRequest struct {
	FollowLogs         *bool            `json:"-" url:"follow_logs,omitempty"`
	ConjunctiveFilters []*LogLineFilter `json:"-" url:"conjunctive_filters,omitempty"`
	ReturnAllLogs      *bool            `json:"-" url:"return_all_logs,omitempty"`
	NumLogLines        *int             `json:"-" url:"num_log_lines,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (g *GetEnclavesEnclaveIdentifierServicesServiceIdentifierLogsRequest) require(field *big.Int) {
	if g.explicitFields == nil {
		g.explicitFields = big.NewInt(0)
	}
	g.explicitFields.Or(g.explicitFields, field)
}

// SetFollowLogs sets the FollowLogs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetEnclavesEnclaveIdentifierServicesServiceIdentifierLogsRequest) SetFollowLogs(followLogs *bool) {
	g.FollowLogs = followLogs
	g.require(getEnclavesEnclaveIdentifierServicesServiceIdentifierLogsRequestFieldFollowLogs)
}

// SetConjunctiveFilters sets the ConjunctiveFilters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetEnclavesEnclaveIdentifierServicesServiceIdentifierLogsRequest) SetConjunctiveFilters(conjunctiveFilters []*LogLineFilter) {
	g.ConjunctiveFilters = conjunctiveFilters
	g.require(getEnclavesEnclaveIdentifierServicesServiceIdentifierLogsRequestFieldConjunctiveFilters)
}

// SetReturnAllLogs sets the ReturnAllLogs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetEnclavesEnclaveIdentifierServicesServiceIdentifierLogsRequest) SetReturnAllLogs(returnAllLogs *bool) {
	g.ReturnAllLogs = returnAllLogs
	g.require(getEnclavesEnclaveIdentifierServicesServiceIdentifierLogsRequestFieldReturnAllLogs)
}

// SetNumLogLines sets the NumLogLines field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetEnclavesEnclaveIdentifierServicesServiceIdentifierLogsRequest) SetNumLogLines(numLogLines *int) {
	g.NumLogLines = numLogLines
	g.require(getEnclavesEnclaveIdentifierServicesServiceIdentifierLogsRequestFieldNumLogLines)
}

var (
	logLineFieldLine      = big.NewInt(1 << 0)
	logLineFieldTimestamp = big.NewInt(1 << 1)
)

type LogLine struct {
	Line      []string  `json:"line" url:"line"`
	Timestamp Timestamp `json:"timestamp" url:"timestamp"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *LogLine) GetLine() []string {
	if l == nil {
		return nil
	}
	return l.Line
}

func (l *LogLine) GetTimestamp() Timestamp {
	if l == nil {
		return time.Time{}
	}
	return l.Timestamp
}

func (l *LogLine) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *LogLine) require(field *big.Int) {
	if l.explicitFields == nil {
		l.explicitFields = big.NewInt(0)
	}
	l.explicitFields.Or(l.explicitFields, field)
}

// SetLine sets the Line field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *LogLine) SetLine(line []string) {
	l.Line = line
	l.require(logLineFieldLine)
}

// SetTimestamp sets the Timestamp field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *LogLine) SetTimestamp(timestamp Timestamp) {
	l.Timestamp = timestamp
	l.require(logLineFieldTimestamp)
}

func (l *LogLine) UnmarshalJSON(data []byte) error {
	type unmarshaler LogLine
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LogLine(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *LogLine) MarshalJSON() ([]byte, error) {
	type embed LogLine
	var marshaler = struct {
		embed
	}{
		embed: embed(*l),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, l.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (l *LogLine) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

var (
	logLineFilterFieldOperator    = big.NewInt(1 << 0)
	logLineFilterFieldTextPattern = big.NewInt(1 << 1)
)

type LogLineFilter struct {
	Operator    LogLineOperator `json:"operator" url:"operator"`
	TextPattern string          `json:"text_pattern" url:"text_pattern"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *LogLineFilter) GetOperator() LogLineOperator {
	if l == nil {
		return ""
	}
	return l.Operator
}

func (l *LogLineFilter) GetTextPattern() string {
	if l == nil {
		return ""
	}
	return l.TextPattern
}

func (l *LogLineFilter) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *LogLineFilter) require(field *big.Int) {
	if l.explicitFields == nil {
		l.explicitFields = big.NewInt(0)
	}
	l.explicitFields.Or(l.explicitFields, field)
}

// SetOperator sets the Operator field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *LogLineFilter) SetOperator(operator LogLineOperator) {
	l.Operator = operator
	l.require(logLineFilterFieldOperator)
}

// SetTextPattern sets the TextPattern field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *LogLineFilter) SetTextPattern(textPattern string) {
	l.TextPattern = textPattern
	l.require(logLineFilterFieldTextPattern)
}

func (l *LogLineFilter) UnmarshalJSON(data []byte) error {
	type unmarshaler LogLineFilter
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LogLineFilter(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *LogLineFilter) MarshalJSON() ([]byte, error) {
	type embed LogLineFilter
	var marshaler = struct {
		embed
	}{
		embed: embed(*l),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, l.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (l *LogLineFilter) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type LogLineOperator string

const (
	LogLineOperatorDoesContainText          LogLineOperator = "DOES_CONTAIN_TEXT"
	LogLineOperatorDoesNotContainText       LogLineOperator = "DOES_NOT_CONTAIN_TEXT"
	LogLineOperatorDoesContainMatchRegex    LogLineOperator = "DOES_CONTAIN_MATCH_REGEX"
	LogLineOperatorDoesNotContainMatchRegex LogLineOperator = "DOES_NOT_CONTAIN_MATCH_REGEX"
)

func NewLogLineOperatorFromString(s string) (LogLineOperator, error) {
	switch s {
	case "DOES_CONTAIN_TEXT":
		return LogLineOperatorDoesContainText, nil
	case "DOES_NOT_CONTAIN_TEXT":
		return LogLineOperatorDoesNotContainText, nil
	case "DOES_CONTAIN_MATCH_REGEX":
		return LogLineOperatorDoesContainMatchRegex, nil
	case "DOES_NOT_CONTAIN_MATCH_REGEX":
		return LogLineOperatorDoesNotContainMatchRegex, nil
	}
	var t LogLineOperator
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l LogLineOperator) Ptr() *LogLineOperator {
	return &l
}

var (
	serviceLogsFieldServiceLogsByServiceUuid = big.NewInt(1 << 0)
	serviceLogsFieldNotFoundServiceUuidSet   = big.NewInt(1 << 1)
)

type ServiceLogs struct {
	ServiceLogsByServiceUuid map[string]*LogLine `json:"service_logs_by_service_uuid,omitempty" url:"service_logs_by_service_uuid,omitempty"`
	NotFoundServiceUuidSet   []string            `json:"not_found_service_uuid_set,omitempty" url:"not_found_service_uuid_set,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *ServiceLogs) GetServiceLogsByServiceUuid() map[string]*LogLine {
	if s == nil {
		return nil
	}
	return s.ServiceLogsByServiceUuid
}

func (s *ServiceLogs) GetNotFoundServiceUuidSet() []string {
	if s == nil {
		return nil
	}
	return s.NotFoundServiceUuidSet
}

func (s *ServiceLogs) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *ServiceLogs) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetServiceLogsByServiceUuid sets the ServiceLogsByServiceUuid field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *ServiceLogs) SetServiceLogsByServiceUuid(serviceLogsByServiceUuid map[string]*LogLine) {
	s.ServiceLogsByServiceUuid = serviceLogsByServiceUuid
	s.require(serviceLogsFieldServiceLogsByServiceUuid)
}

// SetNotFoundServiceUuidSet sets the NotFoundServiceUuidSet field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *ServiceLogs) SetNotFoundServiceUuidSet(notFoundServiceUuidSet []string) {
	s.NotFoundServiceUuidSet = notFoundServiceUuidSet
	s.require(serviceLogsFieldNotFoundServiceUuidSet)
}

func (s *ServiceLogs) UnmarshalJSON(data []byte) error {
	type unmarshaler ServiceLogs
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ServiceLogs(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *ServiceLogs) MarshalJSON() ([]byte, error) {
	type embed ServiceLogs
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *ServiceLogs) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}
