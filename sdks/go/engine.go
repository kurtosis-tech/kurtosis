// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	big "math/big"
	time "time"

	internal "github.com/kurtosis-tech/kurtosis/sdks/go/internal"
)

var (
	createEnclaveFieldEnclaveName              = big.NewInt(1 << 0)
	createEnclaveFieldApiContainerVersionTag   = big.NewInt(1 << 1)
	createEnclaveFieldApiContainerLogLevel     = big.NewInt(1 << 2)
	createEnclaveFieldMode                     = big.NewInt(1 << 3)
	createEnclaveFieldShouldApicRunInDebugMode = big.NewInt(1 << 4)
)

type CreateEnclave struct {
	EnclaveName            string `json:"enclave_name" url:"-"`
	ApiContainerVersionTag string `json:"api_container_version_tag" url:"-"`
	// Enclave log level, defaults to INFO
	ApiContainerLogLevel *string `json:"api_container_log_level,omitempty" url:"-"`
	// Enclave mode, defaults to TEST
	Mode *EnclaveMode `json:"mode,omitempty" url:"-"`
	// Whether the APIC's container should run with the debug server to receive a remote debug connection
	ShouldApicRunInDebugMode *ApiContainerDebugMode `json:"should_apic_run_in_debug_mode,omitempty" url:"-"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (c *CreateEnclave) require(field *big.Int) {
	if c.explicitFields == nil {
		c.explicitFields = big.NewInt(0)
	}
	c.explicitFields.Or(c.explicitFields, field)
}

// SetEnclaveName sets the EnclaveName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CreateEnclave) SetEnclaveName(enclaveName string) {
	c.EnclaveName = enclaveName
	c.require(createEnclaveFieldEnclaveName)
}

// SetApiContainerVersionTag sets the ApiContainerVersionTag field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CreateEnclave) SetApiContainerVersionTag(apiContainerVersionTag string) {
	c.ApiContainerVersionTag = apiContainerVersionTag
	c.require(createEnclaveFieldApiContainerVersionTag)
}

// SetApiContainerLogLevel sets the ApiContainerLogLevel field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CreateEnclave) SetApiContainerLogLevel(apiContainerLogLevel *string) {
	c.ApiContainerLogLevel = apiContainerLogLevel
	c.require(createEnclaveFieldApiContainerLogLevel)
}

// SetMode sets the Mode field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CreateEnclave) SetMode(mode *EnclaveMode) {
	c.Mode = mode
	c.require(createEnclaveFieldMode)
}

// SetShouldApicRunInDebugMode sets the ShouldApicRunInDebugMode field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CreateEnclave) SetShouldApicRunInDebugMode(shouldApicRunInDebugMode *ApiContainerDebugMode) {
	c.ShouldApicRunInDebugMode = shouldApicRunInDebugMode
	c.require(createEnclaveFieldShouldApicRunInDebugMode)
}

var (
	deleteEnclavesRequestFieldRemoveAll = big.NewInt(1 << 0)
)

type DeleteEnclavesRequest struct {
	// If true, remove all enclaves. Otherwise only remove stopped enclaves. Default is false
	RemoveAll *bool `json:"-" url:"remove_all,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (d *DeleteEnclavesRequest) require(field *big.Int) {
	if d.explicitFields == nil {
		d.explicitFields = big.NewInt(0)
	}
	d.explicitFields.Or(d.explicitFields, field)
}

// SetRemoveAll sets the RemoveAll field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DeleteEnclavesRequest) SetRemoveAll(removeAll *bool) {
	d.RemoveAll = removeAll
	d.require(deleteEnclavesRequestFieldRemoveAll)
}

type ApiContainerDebugMode = bool

type ApiContainerStatus string

const (
	ApiContainerStatusRunning     ApiContainerStatus = "RUNNING"
	ApiContainerStatusStopped     ApiContainerStatus = "STOPPED"
	ApiContainerStatusNonExistent ApiContainerStatus = "NON_EXISTENT"
)

func NewApiContainerStatusFromString(s string) (ApiContainerStatus, error) {
	switch s {
	case "RUNNING":
		return ApiContainerStatusRunning, nil
	case "STOPPED":
		return ApiContainerStatusStopped, nil
	case "NON_EXISTENT":
		return ApiContainerStatusNonExistent, nil
	}
	var t ApiContainerStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a ApiContainerStatus) Ptr() *ApiContainerStatus {
	return &a
}

var (
	deletionSummaryFieldRemovedEnclaveNameAndUuids = big.NewInt(1 << 0)
)

type DeletionSummary struct {
	RemovedEnclaveNameAndUuids []*EnclaveNameAndUuid `json:"removed_enclave_name_and_uuids,omitempty" url:"removed_enclave_name_and_uuids,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeletionSummary) GetRemovedEnclaveNameAndUuids() []*EnclaveNameAndUuid {
	if d == nil {
		return nil
	}
	return d.RemovedEnclaveNameAndUuids
}

func (d *DeletionSummary) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeletionSummary) require(field *big.Int) {
	if d.explicitFields == nil {
		d.explicitFields = big.NewInt(0)
	}
	d.explicitFields.Or(d.explicitFields, field)
}

// SetRemovedEnclaveNameAndUuids sets the RemovedEnclaveNameAndUuids field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DeletionSummary) SetRemovedEnclaveNameAndUuids(removedEnclaveNameAndUuids []*EnclaveNameAndUuid) {
	d.RemovedEnclaveNameAndUuids = removedEnclaveNameAndUuids
	d.require(deletionSummaryFieldRemovedEnclaveNameAndUuids)
}

func (d *DeletionSummary) UnmarshalJSON(data []byte) error {
	type unmarshaler DeletionSummary
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeletionSummary(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeletionSummary) MarshalJSON() ([]byte, error) {
	type embed DeletionSummary
	var marshaler = struct {
		embed
	}{
		embed: embed(*d),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, d.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (d *DeletionSummary) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

var (
	enclaveApiContainerHostMachineInfoFieldIpOnHostMachine       = big.NewInt(1 << 0)
	enclaveApiContainerHostMachineInfoFieldGrpcPortOnHostMachine = big.NewInt(1 << 1)
)

type EnclaveApiContainerHostMachineInfo struct {
	IpOnHostMachine       string `json:"ip_on_host_machine" url:"ip_on_host_machine"`
	GrpcPortOnHostMachine int    `json:"grpc_port_on_host_machine" url:"grpc_port_on_host_machine"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EnclaveApiContainerHostMachineInfo) GetIpOnHostMachine() string {
	if e == nil {
		return ""
	}
	return e.IpOnHostMachine
}

func (e *EnclaveApiContainerHostMachineInfo) GetGrpcPortOnHostMachine() int {
	if e == nil {
		return 0
	}
	return e.GrpcPortOnHostMachine
}

func (e *EnclaveApiContainerHostMachineInfo) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EnclaveApiContainerHostMachineInfo) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetIpOnHostMachine sets the IpOnHostMachine field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *EnclaveApiContainerHostMachineInfo) SetIpOnHostMachine(ipOnHostMachine string) {
	e.IpOnHostMachine = ipOnHostMachine
	e.require(enclaveApiContainerHostMachineInfoFieldIpOnHostMachine)
}

// SetGrpcPortOnHostMachine sets the GrpcPortOnHostMachine field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *EnclaveApiContainerHostMachineInfo) SetGrpcPortOnHostMachine(grpcPortOnHostMachine int) {
	e.GrpcPortOnHostMachine = grpcPortOnHostMachine
	e.require(enclaveApiContainerHostMachineInfoFieldGrpcPortOnHostMachine)
}

func (e *EnclaveApiContainerHostMachineInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler EnclaveApiContainerHostMachineInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EnclaveApiContainerHostMachineInfo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EnclaveApiContainerHostMachineInfo) MarshalJSON() ([]byte, error) {
	type embed EnclaveApiContainerHostMachineInfo
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *EnclaveApiContainerHostMachineInfo) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

var (
	enclaveApiContainerInfoFieldContainerId           = big.NewInt(1 << 0)
	enclaveApiContainerInfoFieldIpInsideEnclave       = big.NewInt(1 << 1)
	enclaveApiContainerInfoFieldGrpcPortInsideEnclave = big.NewInt(1 << 2)
	enclaveApiContainerInfoFieldBridgeIpAddress       = big.NewInt(1 << 3)
)

type EnclaveApiContainerInfo struct {
	ContainerId           string `json:"container_id" url:"container_id"`
	IpInsideEnclave       string `json:"ip_inside_enclave" url:"ip_inside_enclave"`
	GrpcPortInsideEnclave int    `json:"grpc_port_inside_enclave" url:"grpc_port_inside_enclave"`
	BridgeIpAddress       string `json:"bridge_ip_address" url:"bridge_ip_address"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EnclaveApiContainerInfo) GetContainerId() string {
	if e == nil {
		return ""
	}
	return e.ContainerId
}

func (e *EnclaveApiContainerInfo) GetIpInsideEnclave() string {
	if e == nil {
		return ""
	}
	return e.IpInsideEnclave
}

func (e *EnclaveApiContainerInfo) GetGrpcPortInsideEnclave() int {
	if e == nil {
		return 0
	}
	return e.GrpcPortInsideEnclave
}

func (e *EnclaveApiContainerInfo) GetBridgeIpAddress() string {
	if e == nil {
		return ""
	}
	return e.BridgeIpAddress
}

func (e *EnclaveApiContainerInfo) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EnclaveApiContainerInfo) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetContainerId sets the ContainerId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *EnclaveApiContainerInfo) SetContainerId(containerId string) {
	e.ContainerId = containerId
	e.require(enclaveApiContainerInfoFieldContainerId)
}

// SetIpInsideEnclave sets the IpInsideEnclave field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *EnclaveApiContainerInfo) SetIpInsideEnclave(ipInsideEnclave string) {
	e.IpInsideEnclave = ipInsideEnclave
	e.require(enclaveApiContainerInfoFieldIpInsideEnclave)
}

// SetGrpcPortInsideEnclave sets the GrpcPortInsideEnclave field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *EnclaveApiContainerInfo) SetGrpcPortInsideEnclave(grpcPortInsideEnclave int) {
	e.GrpcPortInsideEnclave = grpcPortInsideEnclave
	e.require(enclaveApiContainerInfoFieldGrpcPortInsideEnclave)
}

// SetBridgeIpAddress sets the BridgeIpAddress field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *EnclaveApiContainerInfo) SetBridgeIpAddress(bridgeIpAddress string) {
	e.BridgeIpAddress = bridgeIpAddress
	e.require(enclaveApiContainerInfoFieldBridgeIpAddress)
}

func (e *EnclaveApiContainerInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler EnclaveApiContainerInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EnclaveApiContainerInfo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EnclaveApiContainerInfo) MarshalJSON() ([]byte, error) {
	type embed EnclaveApiContainerInfo
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *EnclaveApiContainerInfo) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

var (
	enclaveIdentifiersFieldEnclaveUuid   = big.NewInt(1 << 0)
	enclaveIdentifiersFieldName          = big.NewInt(1 << 1)
	enclaveIdentifiersFieldShortenedUuid = big.NewInt(1 << 2)
)

type EnclaveIdentifiers struct {
	EnclaveUuid   string `json:"enclave_uuid" url:"enclave_uuid"`
	Name          string `json:"name" url:"name"`
	ShortenedUuid string `json:"shortened_uuid" url:"shortened_uuid"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EnclaveIdentifiers) GetEnclaveUuid() string {
	if e == nil {
		return ""
	}
	return e.EnclaveUuid
}

func (e *EnclaveIdentifiers) GetName() string {
	if e == nil {
		return ""
	}
	return e.Name
}

func (e *EnclaveIdentifiers) GetShortenedUuid() string {
	if e == nil {
		return ""
	}
	return e.ShortenedUuid
}

func (e *EnclaveIdentifiers) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EnclaveIdentifiers) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetEnclaveUuid sets the EnclaveUuid field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *EnclaveIdentifiers) SetEnclaveUuid(enclaveUuid string) {
	e.EnclaveUuid = enclaveUuid
	e.require(enclaveIdentifiersFieldEnclaveUuid)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *EnclaveIdentifiers) SetName(name string) {
	e.Name = name
	e.require(enclaveIdentifiersFieldName)
}

// SetShortenedUuid sets the ShortenedUuid field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *EnclaveIdentifiers) SetShortenedUuid(shortenedUuid string) {
	e.ShortenedUuid = shortenedUuid
	e.require(enclaveIdentifiersFieldShortenedUuid)
}

func (e *EnclaveIdentifiers) UnmarshalJSON(data []byte) error {
	type unmarshaler EnclaveIdentifiers
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EnclaveIdentifiers(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EnclaveIdentifiers) MarshalJSON() ([]byte, error) {
	type embed EnclaveIdentifiers
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *EnclaveIdentifiers) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

var (
	enclaveInfoFieldEnclaveUuid                 = big.NewInt(1 << 0)
	enclaveInfoFieldName                        = big.NewInt(1 << 1)
	enclaveInfoFieldShortenedUuid               = big.NewInt(1 << 2)
	enclaveInfoFieldContainersStatus            = big.NewInt(1 << 3)
	enclaveInfoFieldApiContainerStatus          = big.NewInt(1 << 4)
	enclaveInfoFieldApiContainerInfo            = big.NewInt(1 << 5)
	enclaveInfoFieldApiContainerHostMachineInfo = big.NewInt(1 << 6)
	enclaveInfoFieldCreationTime                = big.NewInt(1 << 7)
	enclaveInfoFieldMode                        = big.NewInt(1 << 8)
)

type EnclaveInfo struct {
	EnclaveUuid                 string                              `json:"enclave_uuid" url:"enclave_uuid"`
	Name                        string                              `json:"name" url:"name"`
	ShortenedUuid               string                              `json:"shortened_uuid" url:"shortened_uuid"`
	ContainersStatus            EnclaveStatus                       `json:"containers_status" url:"containers_status"`
	ApiContainerStatus          ApiContainerStatus                  `json:"api_container_status" url:"api_container_status"`
	ApiContainerInfo            *EnclaveApiContainerInfo            `json:"api_container_info,omitempty" url:"api_container_info,omitempty"`
	ApiContainerHostMachineInfo *EnclaveApiContainerHostMachineInfo `json:"api_container_host_machine_info,omitempty" url:"api_container_host_machine_info,omitempty"`
	CreationTime                Timestamp                           `json:"creation_time" url:"creation_time"`
	Mode                        EnclaveMode                         `json:"mode" url:"mode"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EnclaveInfo) GetEnclaveUuid() string {
	if e == nil {
		return ""
	}
	return e.EnclaveUuid
}

func (e *EnclaveInfo) GetName() string {
	if e == nil {
		return ""
	}
	return e.Name
}

func (e *EnclaveInfo) GetShortenedUuid() string {
	if e == nil {
		return ""
	}
	return e.ShortenedUuid
}

func (e *EnclaveInfo) GetContainersStatus() EnclaveStatus {
	if e == nil {
		return ""
	}
	return e.ContainersStatus
}

func (e *EnclaveInfo) GetApiContainerStatus() ApiContainerStatus {
	if e == nil {
		return ""
	}
	return e.ApiContainerStatus
}

func (e *EnclaveInfo) GetApiContainerInfo() *EnclaveApiContainerInfo {
	if e == nil {
		return nil
	}
	return e.ApiContainerInfo
}

func (e *EnclaveInfo) GetApiContainerHostMachineInfo() *EnclaveApiContainerHostMachineInfo {
	if e == nil {
		return nil
	}
	return e.ApiContainerHostMachineInfo
}

func (e *EnclaveInfo) GetCreationTime() Timestamp {
	if e == nil {
		return time.Time{}
	}
	return e.CreationTime
}

func (e *EnclaveInfo) GetMode() EnclaveMode {
	if e == nil {
		return ""
	}
	return e.Mode
}

func (e *EnclaveInfo) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EnclaveInfo) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetEnclaveUuid sets the EnclaveUuid field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *EnclaveInfo) SetEnclaveUuid(enclaveUuid string) {
	e.EnclaveUuid = enclaveUuid
	e.require(enclaveInfoFieldEnclaveUuid)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *EnclaveInfo) SetName(name string) {
	e.Name = name
	e.require(enclaveInfoFieldName)
}

// SetShortenedUuid sets the ShortenedUuid field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *EnclaveInfo) SetShortenedUuid(shortenedUuid string) {
	e.ShortenedUuid = shortenedUuid
	e.require(enclaveInfoFieldShortenedUuid)
}

// SetContainersStatus sets the ContainersStatus field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *EnclaveInfo) SetContainersStatus(containersStatus EnclaveStatus) {
	e.ContainersStatus = containersStatus
	e.require(enclaveInfoFieldContainersStatus)
}

// SetApiContainerStatus sets the ApiContainerStatus field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *EnclaveInfo) SetApiContainerStatus(apiContainerStatus ApiContainerStatus) {
	e.ApiContainerStatus = apiContainerStatus
	e.require(enclaveInfoFieldApiContainerStatus)
}

// SetApiContainerInfo sets the ApiContainerInfo field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *EnclaveInfo) SetApiContainerInfo(apiContainerInfo *EnclaveApiContainerInfo) {
	e.ApiContainerInfo = apiContainerInfo
	e.require(enclaveInfoFieldApiContainerInfo)
}

// SetApiContainerHostMachineInfo sets the ApiContainerHostMachineInfo field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *EnclaveInfo) SetApiContainerHostMachineInfo(apiContainerHostMachineInfo *EnclaveApiContainerHostMachineInfo) {
	e.ApiContainerHostMachineInfo = apiContainerHostMachineInfo
	e.require(enclaveInfoFieldApiContainerHostMachineInfo)
}

// SetCreationTime sets the CreationTime field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *EnclaveInfo) SetCreationTime(creationTime Timestamp) {
	e.CreationTime = creationTime
	e.require(enclaveInfoFieldCreationTime)
}

// SetMode sets the Mode field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *EnclaveInfo) SetMode(mode EnclaveMode) {
	e.Mode = mode
	e.require(enclaveInfoFieldMode)
}

func (e *EnclaveInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler EnclaveInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EnclaveInfo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EnclaveInfo) MarshalJSON() ([]byte, error) {
	type embed EnclaveInfo
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *EnclaveInfo) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EnclaveMode string

const (
	EnclaveModeTest       EnclaveMode = "TEST"
	EnclaveModeProduction EnclaveMode = "PRODUCTION"
)

func NewEnclaveModeFromString(s string) (EnclaveMode, error) {
	switch s {
	case "TEST":
		return EnclaveModeTest, nil
	case "PRODUCTION":
		return EnclaveModeProduction, nil
	}
	var t EnclaveMode
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EnclaveMode) Ptr() *EnclaveMode {
	return &e
}

var (
	enclaveNameAndUuidFieldName = big.NewInt(1 << 0)
	enclaveNameAndUuidFieldUuid = big.NewInt(1 << 1)
)

type EnclaveNameAndUuid struct {
	Name string `json:"name" url:"name"`
	Uuid string `json:"uuid" url:"uuid"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EnclaveNameAndUuid) GetName() string {
	if e == nil {
		return ""
	}
	return e.Name
}

func (e *EnclaveNameAndUuid) GetUuid() string {
	if e == nil {
		return ""
	}
	return e.Uuid
}

func (e *EnclaveNameAndUuid) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EnclaveNameAndUuid) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *EnclaveNameAndUuid) SetName(name string) {
	e.Name = name
	e.require(enclaveNameAndUuidFieldName)
}

// SetUuid sets the Uuid field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *EnclaveNameAndUuid) SetUuid(uuid string) {
	e.Uuid = uuid
	e.require(enclaveNameAndUuidFieldUuid)
}

func (e *EnclaveNameAndUuid) UnmarshalJSON(data []byte) error {
	type unmarshaler EnclaveNameAndUuid
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EnclaveNameAndUuid(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EnclaveNameAndUuid) MarshalJSON() ([]byte, error) {
	type embed EnclaveNameAndUuid
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *EnclaveNameAndUuid) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EnclaveStatus string

const (
	EnclaveStatusRunning EnclaveStatus = "RUNNING"
	EnclaveStatusStopped EnclaveStatus = "STOPPED"
	EnclaveStatusEmpty   EnclaveStatus = "EMPTY"
)

func NewEnclaveStatusFromString(s string) (EnclaveStatus, error) {
	switch s {
	case "RUNNING":
		return EnclaveStatusRunning, nil
	case "STOPPED":
		return EnclaveStatusStopped, nil
	case "EMPTY":
		return EnclaveStatusEmpty, nil
	}
	var t EnclaveStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EnclaveStatus) Ptr() *EnclaveStatus {
	return &e
}

type EnclaveTargetStatus = string

var (
	engineInfoFieldEngineVersion = big.NewInt(1 << 0)
)

type EngineInfo struct {
	EngineVersion string `json:"engine_version" url:"engine_version"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EngineInfo) GetEngineVersion() string {
	if e == nil {
		return ""
	}
	return e.EngineVersion
}

func (e *EngineInfo) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EngineInfo) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetEngineVersion sets the EngineVersion field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *EngineInfo) SetEngineVersion(engineVersion string) {
	e.EngineVersion = engineVersion
	e.require(engineInfoFieldEngineVersion)
}

func (e *EngineInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler EngineInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EngineInfo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EngineInfo) MarshalJSON() ([]byte, error) {
	type embed EngineInfo
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *EngineInfo) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}
